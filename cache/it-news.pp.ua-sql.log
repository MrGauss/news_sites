2020.01.15 20:44:56:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1448 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 20:44:56:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1448 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 20:44:56:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1448) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.15 20:44:56:
--------------------------------
SELECT * FROM categories ORDER BY level;  -- %QUERY_CACHABLE
--------------------------------
2020.01.15 20:44:56:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1448
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.15 20:44:56:
--------------------------------

                    -- Джон Уік покращить ваш настрій у Fortnite
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('покращить')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1448
                        AND posts.tag_id && ARRAY['3'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.15 20:44:56:
--------------------------------

                    -- Джон Уік покращить ваш настрій у Fortnite
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('настрій')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1448
                        AND posts.tag_id && ARRAY['3'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.15 20:44:56:
--------------------------------

                    -- Джон Уік покращить ваш настрій у Fortnite
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Fortnite')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1448
                        AND posts.tag_id && ARRAY['3'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.15 20:44:56:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1290 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 20:44:56:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1290 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 20:44:56:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1290) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.15 20:44:56:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1539 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 20:44:56:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1539 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 20:44:56:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1539) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.15 20:44:56:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 151 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 20:44:56:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 151 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 20:44:56:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (151) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.15 20:44:56:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 233 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 20:44:56:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 233 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 20:44:56:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (233) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.15 20:44:56:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1606 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 20:44:56:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1606 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 20:44:56:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1606) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.15 20:44:56:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( 'bbc73cf92656b27bd1280a5dceee4a98', '66.249.65.148'::inet, 'Chrome' );
--------------------------------
2020.01.15 20:44:56:
--------------------------------

                SELECT
                    tags.id,
                    tags.name,
                    tags.altname,
                    (SELECT count(posts_tags.post_id) FROM posts_tags WHERE posts_tags.tag_id = tags.id ) as news_count
                FROM
                    tags WHERE id > 0 ORDER BY name; -- %QUERY_CACHABLE
--------------------------------
2020.01.15 20:44:56:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 20:44:57:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 
-- ORDER
ORDER BY posts.created_time DESC, posts.fixed DESC, posts.posted ASC 
-- ORDER
-- OFFSET
OFFSET 0 LIMIT 10000;
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 20:44:58:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1710,1709,1708,1707,1706,1705,1704,1703,1702,1701,1700,1699,1698,1697,1696,1695,1694,1693,1692,1691,1690,1689,1688,1687,1686,1685,1684,1683,1682,1681,1680,1679,1678,1677,1676,1675,1674,1673,1672,1671,1670,1669,1668,1667,1666,1665,1664,1663,1662,1661,1660,1659,1658,1657,1656,1655,1654,1653,1652,1651,1650,1649,1648,1647,1646,1645,1644,1643,1642,1641,1640,1639,1638,1637,1636,1635,1634,1633,1632,1631,1630,1629,1628,1627,1626,1625,1624,1623,1622,1621,1620,1619,1618,1617,1616,1615,1614,1613,1612,1611,1610,1609,1608,1607,1606,1605,1604,1603,1602,1601,1600,1599,1598,1597,1596,1595,1594,1593,1592,1591,1590,1589,1588,1587,1586,1585,1584,1583,1582,1581,1580,1579,1578,1577,1576,1575,1574,1573,1572,1571,1570,1569,1568,1567,1566,1565,1564,1563,1562,1561,1560,1559,1558,1557,1556,1555,1554,1553,1552,1551,1550,1549,1548,1547,1546,1545,1544,1543,1542,1541,1540,1539,1538,1537,1536,1535,1534,1533,1532,1531,1530,1529,1528,1527,1526,1525,1524,1523,1522,1521,1520,1519,1518,1517,1516,1515,1514,1513,1512,1511,1510,1509,1508,1507,1506,1505,1504,1503,1502,1501,1500,1499,1498,1497,1496,1495,1494,1493,1492,1491,1490,1489,1488,1487,1486,1485,1484,1483,1482,1481,1480,1479,1478,1477,1476,1475,1474,1473,1472,1471,1470,1469,1468,1467,1466,1465,1464,1463,1462,1461,1460,1459,1458,1457,1456,1455,1454,1453,1452,1451,1450,1449,1448,1447,1446,1445,1444,1443,1442,1441,1440,1439,1438,1437,1436,1435,1434,1433,1432,1431,1430,1429,1428,1427,1426,1425,1424,1423,1422,1421,1420,1419,1418,1417,1416,1415,1414,1413,1412,1411,1410,1409,1408,1407,1406,1405,1404,1403,1402,1401,1400,1399,1398,1397,1396,1395,1394,1393,1392,1391,1390,1389,1388,1387,1386,1385,1384,1383,1382,1381,1380,1379,1378,1377,1376,1375,1374,1373,1372,1371,1370,1369,1368,1367,1366,1365,1364,1363,1362,1361,1360,1359,1358,1357,1356,1355,1354,1353,1352,1351,1350,1349,1348,1347,1346,1345,1344,1343,1342,1341,1340,1339,1338,1337,1336,1335,1334,1333,1332,1331,1330,1329,1328,1327,1326,1325,1324,1323,1322,1321,1320,1319,1318,1317,1316,1315,1314,1313,1312,1311,1310,1309,1308,1307,1306,1305,1304,1303,1302,1301,1300,1299,1298,1297,1296,1295,1294,1293,1292,1291,1290,1289,1288,1287,1286,1285,1284,1283,1282,1281,1280,1279,1278,1277,1276,1275,1274,1273,1272,1271,1270,1269,1268,1267,1266,1265,1264,1263,1262,1261,1260,1259,1258,1257,1256,1255,1254,1253,1252,1251,1250,1249,1248,1247,1246,1245,1244,1243,1242,1241,1240,1239,1238,1237,1236,1235,1234,1233,1232,1231,1230,1229,1228,1227,1226,1225,1224,1223,1222,1221,1220,1219,1218,1217,1216,1215,1214,1213,1212,1211,1210,1209,1208,1207,1206,1205,1204,1203,1202,1201,1200,1199,1198,1197,1196,1195,1194,1193,1192,1191,1190,1189,1188,1187,1186,1185,1184,1183,1182,1181,1180,1179,1178,1177,1176,1175,1174,1173,1172,1171,1170,1169,1168,1167,1166,1165,1164,1163,1162,1161,1160,1159,1158,1157,1156,1155,1154,1153,1152,1151,1150,1149,1148,1147,1146,1145,1144,1143,1142,1141,1140,1139,1138,1137,1136,1135,1134,1133,1132,1131,1130,1129,1128,1127,1126,1125,1124,1123,1122,1121,1120,1119,1118,1117,1116,1115,1114,1113,1112,1111,1110,1109,1108,1107,1106,1105,1104,1103,1102,1101,1100,1099,1098,1097,1096,1095,1094,1093,1092,1091,1090,1089,1088,1087,1086,1085,1084,1083,1082,1081,1080,1079,1078,1077,1076,1075,1074,1073,1072,1071,1070,1069,1068,1067,1066,1065,1064,1063,1062,1061,1060,1059,1058,1057,1056,1055,1054,1053,1052,1051,1050,1049,1048,1047,1046,1045,1044,1043,1042,1041,1040,1039,1038,1037,1036,1035,1034,1033,1032,1031,1030,1029,1028,1027,1026,1025,1024,1023,1022,1021,1020,1019,1018,1017,1016,1015,1014,1013,1012,1011,1010,1009,1008,1007,1006,1005,1004,1003,1002,1001,1000,999,998,997,996,995,994,993,992,991,990,989,988,987,986,985,984,983,982,981,980,979,978,977,976,975,974,973,972,971,970,969,968,967,966,965,964,963,962,961,960,959,958,957,956,955,954,953,952,951,950,949,948,947,946,945,944,943,942,941,940,939,938,937,936,935,934,933,932,931,930,929,928,927,926,925,924,923,922,921,920,919,918,917,916,915,914,913,912,911,910,909,908,907,906,905,904,903,902,901,900,899,898,897,896,895,894,893,892,891,890,889,888,887,886,885,884,883,882,881,880,879,878,877,876,875,874,873,872,871,870,869,868,867,866,865,864,863,862,861,860,859,858,857,856,855,854,853,852,851,850,849,848,847,846,845,844,843,842,841,840,839,838,837,836,835,834,833,832,831,830,829,828,827,826,825,824,823,822,821,820,819,818,817,816,815,814,813,812,811,810,809,808,807,806,805,804,803,802,801,800,799,798,797,796,795,794,793,792,791,790,789,788,787,786,785,784,783,782,781,780,779,778,777,776,775,774,773,772,771,770,769,768,767,766,765,764,763,762,761,760,759,758,757,756,755,754,753,752,751,750,749,748,747,746,745,744,743,742,741,740,739,738,737,736,735,734,733,732,731,730,729,728,727,726,725,724,723,722,721,719,718,716,715,714,712,708,703,702,701,700,699,698,697,696,695,694,693,692,691,690,689,688,687,686,685,678,677,675,674,673,672,671,670,669,667,666,665,664,663,661,658,657,656,653,647,646,645,644,639,638,637,636,635,632,630,629,627,626,623,620,619,618,617,616,615,614,611,610,609,607,606,605,604,603,602,601,598,597,595,593,591,590,589,588,587,586,585,584,583,582,581,580,579,578,577,576,574,572,571,570,569,567,562,559,558,557,556,555,554,553,551,550,548,546,545,542,537,535,534,533,532,531,529,528,526,525,524,523,522,521,520,519,513,511,510,509,508,507,506,505,504,503,500,497,495,493,489,487,485,484,483,482,481,480,479,478,477,476,475,474,473,472,471,470,469,468,467,466,465,464,463,460,457,455,452,451,441,440,439,438,437,436,435,434,433,432,431,428,427,425,423,422,421,420,419,418,417,414,411,410,408,407,405,404,400,399,398,396,395,394,393,390,389,388,386,385,379,378,375,374,372,370,369,368,367,366,364,362,361,359,356,355,354,353,348,347,346,345,344,343,342,341,340,339,338,337,336,334,333,332,329,327,326,324,319,318,317,316,314,310,307,304,302,300,299,298,297,296,295,294,293,292,291,290,286,285,283,282,280,274,273,272,271,270,269,268,267,266,265,264,261,257,255,249,248,245,241,240,239,238,237,236,235,234,233,231,230,227,226,225,224,223,222,221,220,219,218,214,213,211,210,207,203,201,199,198,197,196,195,194,193,192,191,190,189,188,187,186,185,184,183,182,181,180,179,178,177,176,175,174,173,172,171,170,169,168,167,166,165,164,163,162,161,160,159,158,157,156,155,154,153,152,151,150,149,148,147,145,139,138,137,136,135,134,133,132,131,130,129,128,127,126,125,124,123,122,121,120,119,118,117,116,115,114,113,112,111,110,109,108,107,106,105,104,103,102,101,100,99,98,97,96,95,94,93,92,91,90,89,88,87,86,85,84,83,82,81,80,79,78,77,76,75,74,73,72,71,70,69,68,67,66,65,64,63,62,61,60,59,56,55,54,53,52,51,50,49,48,47,46,45,44,43,42,41,40,39,38,37,36,35,34,33,24,23,22,21,20,19,18,17,16) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.15 20:44:59:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 20:45:00:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 
-- ORDER
ORDER BY posts.created_time DESC, posts.fixed DESC, posts.posted ASC 
-- ORDER
-- OFFSET
OFFSET 90 LIMIT 12;
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 20:45:00:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1620,1619,1618,1617,1616,1615,1614,1613,1612,1611,1610,1609) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.15 20:45:00:
--------------------------------
SELECT count( DISTINCT ua_hash ) as count FROM visit_counter WHERE date_trunc('day', ts) = date_trunc('day', now());
--------------------------------
2020.01.15 20:45:00:
--------------------------------

                SELECT
                    date_trunc('day', visit_counter.ts) as visit_day,
                    COUNT( DISTINCT visit_counter.ua_hash ) as count
                FROM
                    visit_counter
                WHERE
                    date_trunc('day', visit_counter.ts ) > date_trunc('day', NOW() - INTERVAL '1 week')
                GROUP BY visit_day
                ORDER BY visit_day;
            
--------------------------------
2020.01.15 21:46:41:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1113 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 21:46:41:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1113 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 21:46:41:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1113) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.15 21:46:41:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1113
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.15 21:46:41:
--------------------------------

                    -- На Одещині викрили зловмисника, який зламував Instagram-акаунти
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Одещині')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1113
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8, '14'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.15 21:46:41:
--------------------------------

                    -- На Одещині викрили зловмисника, який зламував Instagram-акаунти
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('викрили')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1113
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8, '14'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.15 21:46:41:
--------------------------------

                    -- На Одещині викрили зловмисника, який зламував Instagram-акаунти
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('зловмисника,')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1113
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8, '14'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.15 21:46:41:
--------------------------------

                    -- На Одещині викрили зловмисника, який зламував Instagram-акаунти
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('зламував')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1113
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8, '14'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.15 21:46:41:
--------------------------------

                    -- На Одещині викрили зловмисника, який зламував Instagram-акаунти
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Instagram-акаунти')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1113
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8, '14'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.15 21:46:41:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 33 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 21:46:41:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 33 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 21:46:41:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (33) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.15 21:46:41:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 78 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 21:46:41:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 78 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 21:46:41:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (78) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.15 21:46:41:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 38 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 21:46:41:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 38 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 21:46:41:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (38) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.15 21:46:41:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 972 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 21:46:41:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 972 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 21:46:41:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (972) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.15 21:46:41:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1125 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 21:46:41:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1125 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 21:46:41:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1125) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.15 21:46:41:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '2d2e8e6ab88742154eade31e44c21e75', '66.249.65.150'::inet, 'Chrome' );
--------------------------------
2020.01.15 21:46:43:
--------------------------------
SELECT count( DISTINCT ua_hash ) as count FROM visit_counter WHERE date_trunc('day', ts) = date_trunc('day', now());
--------------------------------
2020.01.15 21:53:38:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1307 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 21:53:38:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1307 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 21:53:38:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1307) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.15 21:53:38:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1307
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.15 21:53:38:
--------------------------------

                    -- Які речі допоможуть насолодитися повноцінним і якісним сном
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('допоможуть')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1307
                        AND posts.tag_id && ARRAY['12'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.15 21:53:38:
--------------------------------

                    -- Які речі допоможуть насолодитися повноцінним і якісним сном
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('насолодитися')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1307
                        AND posts.tag_id && ARRAY['12'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.15 21:53:38:
--------------------------------

                    -- Які речі допоможуть насолодитися повноцінним і якісним сном
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('повноцінним')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1307
                        AND posts.tag_id && ARRAY['12'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.15 21:53:38:
--------------------------------

                    -- Які речі допоможуть насолодитися повноцінним і якісним сном
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('якісним')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1307
                        AND posts.tag_id && ARRAY['12'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.15 21:53:38:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1401 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 21:53:38:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1401 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 21:53:38:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1401) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.15 21:53:38:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 801 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 21:53:38:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 801 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 21:53:38:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (801) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.15 21:53:38:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 347 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 21:53:38:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 347 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 21:53:38:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (347) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.15 21:53:38:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1499 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 21:53:38:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1499 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 21:53:38:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1499) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.15 21:53:38:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 627 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 21:53:38:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 627 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 21:53:38:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (627) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.15 21:53:38:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '1a0d36373ed7a1d578ee56dab756da62', '66.249.65.146'::inet, 'Chrome' );
--------------------------------
2020.01.15 22:08:58:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 470 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 22:08:58:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 470 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 22:08:58:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (470) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.15 22:08:58:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 470
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.15 22:08:58:
--------------------------------

                    -- Робота навчили імітувати рухи оператора-людини (відео)
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Робота')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 470
                        AND posts.tag_id && ARRAY['7'::int8, '8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.15 22:08:58:
--------------------------------

                    -- Робота навчили імітувати рухи оператора-людини (відео)
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('навчили')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 470
                        AND posts.tag_id && ARRAY['7'::int8, '8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.15 22:08:58:
--------------------------------

                    -- Робота навчили імітувати рухи оператора-людини (відео)
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('імітувати')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 470
                        AND posts.tag_id && ARRAY['7'::int8, '8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.15 22:08:58:
--------------------------------

                    -- Робота навчили імітувати рухи оператора-людини (відео)
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('оператора-людини')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 470
                        AND posts.tag_id && ARRAY['7'::int8, '8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.15 22:08:59:
--------------------------------

                    -- Робота навчили імітувати рухи оператора-людини (відео)
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('(відео)')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 470
                        AND posts.tag_id && ARRAY['7'::int8, '8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.15 22:08:59:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 231 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 22:08:59:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 231 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 22:08:59:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (231) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.15 22:08:59:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 369 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 22:08:59:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 369 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 22:08:59:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (369) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.15 22:08:59:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1369 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 22:08:59:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1369 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 22:08:59:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1369) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.15 22:08:59:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1532 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 22:08:59:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1532 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 22:08:59:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1532) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.15 22:08:59:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1139 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 22:08:59:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1139 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 22:08:59:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1139) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.15 22:08:59:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '50027cc66ea01f9c2732ba30158ccdd1', '5.255.250.61'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.15 22:08:59:
--------------------------------
SELECT count( DISTINCT ua_hash ) as count FROM visit_counter WHERE date_trunc('day', ts) = date_trunc('day', now());
--------------------------------
2020.01.15 22:28:05:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1479 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 22:28:05:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1479 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 22:28:05:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1479) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.15 22:28:05:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1479
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.15 22:28:05:
--------------------------------

                    -- Samsung представить свою «штучну людину» — NEON
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Samsung')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1479
                        AND posts.tag_id && ARRAY['9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.15 22:28:05:
--------------------------------

                    -- Samsung представить свою «штучну людину» — NEON
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('представить')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1479
                        AND posts.tag_id && ARRAY['9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.15 22:28:05:
--------------------------------

                    -- Samsung представить свою «штучну людину» — NEON
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('«штучну')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1479
                        AND posts.tag_id && ARRAY['9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.15 22:28:05:
--------------------------------

                    -- Samsung представить свою «штучну людину» — NEON
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('людину»')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1479
                        AND posts.tag_id && ARRAY['9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.15 22:28:05:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1617 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 22:28:05:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1617 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 22:28:05:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1617) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.15 22:28:05:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 478 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 22:28:05:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 478 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 22:28:05:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (478) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.15 22:28:05:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1010 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 22:28:05:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1010 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 22:28:05:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1010) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.15 22:28:05:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1085 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 22:28:05:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1085 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 22:28:05:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1085) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.15 22:28:05:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 911 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 22:28:05:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 911 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 22:28:05:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (911) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.15 22:28:05:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '50027cc66ea01f9c2732ba30158ccdd1', '5.255.250.61'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.15 22:46:37:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1501 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 22:46:37:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1501 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 22:46:37:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1501) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.15 22:46:37:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1501
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.15 22:46:37:
--------------------------------

                    -- Вчені знайшли справжню капсулу часу, вік якої нараховує 2 мільярди років і вона може містити життя
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('знайшли')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1501
                        AND posts.tag_id && ARRAY['6'::int8, '7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.15 22:46:37:
--------------------------------

                    -- Вчені знайшли справжню капсулу часу, вік якої нараховує 2 мільярди років і вона може містити життя
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('справжню')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1501
                        AND posts.tag_id && ARRAY['6'::int8, '7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.15 22:46:37:
--------------------------------

                    -- Вчені знайшли справжню капсулу часу, вік якої нараховує 2 мільярди років і вона може містити життя
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('капсулу')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1501
                        AND posts.tag_id && ARRAY['6'::int8, '7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.15 22:46:37:
--------------------------------

                    -- Вчені знайшли справжню капсулу часу, вік якої нараховує 2 мільярди років і вона може містити життя
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('нараховує')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1501
                        AND posts.tag_id && ARRAY['6'::int8, '7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.15 22:46:37:
--------------------------------

                    -- Вчені знайшли справжню капсулу часу, вік якої нараховує 2 мільярди років і вона може містити життя
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('мільярди')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1501
                        AND posts.tag_id && ARRAY['6'::int8, '7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.15 22:46:37:
--------------------------------

                    -- Вчені знайшли справжню капсулу часу, вік якої нараховує 2 мільярди років і вона може містити життя
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('містити')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1501
                        AND posts.tag_id && ARRAY['6'::int8, '7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.15 22:46:37:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 601 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 22:46:37:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 601 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 22:46:37:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (601) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.15 22:46:37:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1513 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 22:46:37:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1513 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 22:46:37:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1513) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.15 22:46:37:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1190 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 22:46:37:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1190 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 22:46:37:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1190) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.15 22:46:37:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1041 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 22:46:37:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1041 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 22:46:37:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1041) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.15 22:46:37:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1032 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 22:46:37:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1032 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 22:46:37:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1032) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.15 22:46:37:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '50027cc66ea01f9c2732ba30158ccdd1', '5.255.250.61'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.15 22:47:18:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1648 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 22:47:18:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1648 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 22:47:18:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1648) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.15 22:47:18:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1648
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.15 22:47:18:
--------------------------------

                    -- Японський мільярдер шукає подругу для подорожі на Місяць
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Японський')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1648
                        AND posts.tag_id && ARRAY['3'::int8, '6'::int8, '7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.15 22:47:18:
--------------------------------

                    -- Японський мільярдер шукає подругу для подорожі на Місяць
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('мільярдер')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1648
                        AND posts.tag_id && ARRAY['3'::int8, '6'::int8, '7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.15 22:47:18:
--------------------------------

                    -- Японський мільярдер шукає подругу для подорожі на Місяць
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('подругу')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1648
                        AND posts.tag_id && ARRAY['3'::int8, '6'::int8, '7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.15 22:47:18:
--------------------------------

                    -- Японський мільярдер шукає подругу для подорожі на Місяць
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('подорожі')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1648
                        AND posts.tag_id && ARRAY['3'::int8, '6'::int8, '7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.15 22:47:19:
--------------------------------

                    -- Японський мільярдер шукає подругу для подорожі на Місяць
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Місяць')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1648
                        AND posts.tag_id && ARRAY['3'::int8, '6'::int8, '7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.15 22:47:19:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1510 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 22:47:19:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1510 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 22:47:19:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1510) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.15 22:47:19:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1611 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 22:47:19:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1611 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 22:47:19:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1611) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.15 22:47:19:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 598 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 22:47:19:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 598 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 22:47:19:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (598) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.15 22:47:19:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 171 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 22:47:19:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 171 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 22:47:19:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (171) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.15 22:47:19:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1635 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 22:47:19:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1635 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 22:47:19:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1635) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.15 22:47:19:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '50027cc66ea01f9c2732ba30158ccdd1', '5.255.250.61'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.15 23:06:57:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1658 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 23:06:57:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1658 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 23:06:57:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1658) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.15 23:06:57:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1658
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.15 23:06:57:
--------------------------------

                    -- Microsoft відсьогодні припинила підтримку Windows 7
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Microsoft')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1658
                        AND posts.tag_id && ARRAY['3'::int8, '4'::int8, '7'::int8, '8'::int8, '9'::int8, '13'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.15 23:06:57:
--------------------------------

                    -- Microsoft відсьогодні припинила підтримку Windows 7
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('відсьогодні')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1658
                        AND posts.tag_id && ARRAY['3'::int8, '4'::int8, '7'::int8, '8'::int8, '9'::int8, '13'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.15 23:06:58:
--------------------------------

                    -- Microsoft відсьогодні припинила підтримку Windows 7
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('припинила')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1658
                        AND posts.tag_id && ARRAY['3'::int8, '4'::int8, '7'::int8, '8'::int8, '9'::int8, '13'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.15 23:06:58:
--------------------------------

                    -- Microsoft відсьогодні припинила підтримку Windows 7
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('підтримку')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1658
                        AND posts.tag_id && ARRAY['3'::int8, '4'::int8, '7'::int8, '8'::int8, '9'::int8, '13'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.15 23:06:58:
--------------------------------

                    -- Microsoft відсьогодні припинила підтримку Windows 7
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Windows')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1658
                        AND posts.tag_id && ARRAY['3'::int8, '4'::int8, '7'::int8, '8'::int8, '9'::int8, '13'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.15 23:06:58:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1416 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 23:06:58:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1416 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 23:06:58:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1416) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.15 23:06:58:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1022 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 23:06:58:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1022 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 23:06:58:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1022) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.15 23:06:58:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1014 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 23:06:58:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1014 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 23:06:58:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1014) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.15 23:06:58:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 854 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 23:06:58:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 854 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 23:06:58:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (854) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.15 23:06:58:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1355 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 23:06:58:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1355 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 23:06:58:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1355) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.15 23:06:58:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( 'a0ccd15a1aaf5e79e04089f4596357ba', '141.8.188.191'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.15 23:06:58:
--------------------------------
SELECT count( DISTINCT ua_hash ) as count FROM visit_counter WHERE date_trunc('day', ts) = date_trunc('day', now());
--------------------------------
2020.01.15 23:11:23:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 23:11:23:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 
-- ORDER
ORDER BY posts.created_time DESC, posts.fixed DESC, posts.posted ASC 
-- ORDER
-- OFFSET
OFFSET 0 LIMIT 10;
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 23:11:23:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1710,1709,1708,1707,1706,1705,1704,1703,1702,1701) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.15 23:11:24:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '2d2e8e6ab88742154eade31e44c21e75', '66.249.65.150'::inet, 'Chrome' );
--------------------------------
2020.01.15 23:11:24:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	posts.tag_id && ARRAY[ '25'::int8, '26'::int8, '27'::int8, '28'::int8, '29'::int8, '30'::int8, '31'::int8, '32'::int8, '33'::int8, '34'::int8, '35'::int8 ] 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 23:11:24:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	posts.tag_id && ARRAY[ '25'::int8, '26'::int8, '27'::int8, '28'::int8, '29'::int8, '30'::int8, '31'::int8, '32'::int8, '33'::int8, '34'::int8, '35'::int8 ] 
-- ORDER
ORDER BY posts.created_time DESC, posts.fixed DESC, posts.posted ASC 
-- ORDER
-- OFFSET
OFFSET 0 LIMIT 1;
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 23:11:24:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	posts.tag_id && ARRAY[ '11'::int8 ] 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 23:11:24:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	posts.tag_id && ARRAY[ '11'::int8 ] 
-- ORDER
ORDER BY posts.created_time DESC, posts.fixed DESC, posts.posted ASC 
-- ORDER
-- OFFSET
OFFSET 10 LIMIT 2;
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 23:11:24:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1176,1094) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.15 23:11:24:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	posts.tag_id && ARRAY[ '8'::int8 ] 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 23:11:24:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	posts.tag_id && ARRAY[ '8'::int8 ] 
-- ORDER
ORDER BY posts.created_time DESC, posts.fixed DESC, posts.posted ASC 
-- ORDER
-- OFFSET
OFFSET 0 LIMIT 1;
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 23:11:24:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1709) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.15 23:11:24:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	posts.tag_id && ARRAY[ '8'::int8 ] 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 23:11:24:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	posts.tag_id && ARRAY[ '8'::int8 ] 
-- ORDER
ORDER BY posts.created_time DESC, posts.fixed DESC, posts.posted ASC 
-- ORDER
-- OFFSET
OFFSET 10 LIMIT 3;
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 23:11:24:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1669,1668,1665) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.15 23:11:24:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	posts.tag_id && ARRAY[ '5'::int8, '13'::int8 ] 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 23:11:24:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	posts.tag_id && ARRAY[ '5'::int8, '13'::int8 ] 
-- ORDER
ORDER BY posts.created_time DESC, posts.fixed DESC, posts.posted ASC 
-- ORDER
-- OFFSET
OFFSET 0 LIMIT 1;
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 23:11:24:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1673) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.15 23:11:24:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	posts.tag_id && ARRAY[ '5'::int8, '13'::int8 ] 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 23:11:24:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	posts.tag_id && ARRAY[ '5'::int8, '13'::int8 ] 
-- ORDER
ORDER BY posts.created_time DESC, posts.fixed DESC, posts.posted ASC 
-- ORDER
-- OFFSET
OFFSET 0 LIMIT 4;
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 23:11:24:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1673,1658,1605,1465) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.15 23:11:24:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	posts.tag_id && ARRAY[ '6'::int8, '7'::int8 ] 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 23:11:25:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	posts.tag_id && ARRAY[ '6'::int8, '7'::int8 ] 
-- ORDER
ORDER BY posts.created_time DESC, posts.fixed DESC, posts.posted ASC 
-- ORDER
-- OFFSET
OFFSET 0 LIMIT 10;
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 23:11:25:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1709,1703,1698,1697,1696,1693,1688,1686,1682,1676) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.15 23:14:43:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1442 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 23:14:43:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1442 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 23:14:43:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1442) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.15 23:14:43:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1442
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.15 23:14:43:
--------------------------------

                    -- Струс змінює спосіб передачі інформації в мозку — вчені
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('змінює')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1442
                        AND posts.tag_id && ARRAY['7'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.15 23:14:43:
--------------------------------

                    -- Струс змінює спосіб передачі інформації в мозку — вчені
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('спосіб')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1442
                        AND posts.tag_id && ARRAY['7'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.15 23:14:43:
--------------------------------

                    -- Струс змінює спосіб передачі інформації в мозку — вчені
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('передачі')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1442
                        AND posts.tag_id && ARRAY['7'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.15 23:14:43:
--------------------------------

                    -- Струс змінює спосіб передачі інформації в мозку — вчені
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('інформації')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1442
                        AND posts.tag_id && ARRAY['7'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.15 23:14:44:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 399 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 23:14:44:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 399 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 23:14:44:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (399) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.15 23:14:44:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 302 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 23:14:44:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 302 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 23:14:44:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (302) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.15 23:14:44:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1333 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 23:14:44:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1333 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 23:14:44:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1333) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.15 23:14:44:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 772 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 23:14:44:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 772 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 23:14:44:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (772) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.15 23:14:44:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 678 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 23:14:44:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 678 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 23:14:44:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (678) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.15 23:14:44:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( 'bbc73cf92656b27bd1280a5dceee4a98', '66.249.65.148'::inet, 'Chrome' );
--------------------------------
2020.01.15 23:29:59:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 997 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 23:29:59:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 997 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 23:29:59:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (997) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.15 23:29:59:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 997
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.15 23:29:59:
--------------------------------

                    -- Google опублікував топ запитів українців у 2019 році
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Google')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 997
                        AND posts.tag_id && ARRAY['3'::int8, '14'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.15 23:29:59:
--------------------------------

                    -- Google опублікував топ запитів українців у 2019 році
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('опублікував')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 997
                        AND posts.tag_id && ARRAY['3'::int8, '14'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.15 23:29:59:
--------------------------------

                    -- Google опублікував топ запитів українців у 2019 році
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('запитів')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 997
                        AND posts.tag_id && ARRAY['3'::int8, '14'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.15 23:29:59:
--------------------------------

                    -- Google опублікував топ запитів українців у 2019 році
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('українців')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 997
                        AND posts.tag_id && ARRAY['3'::int8, '14'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.15 23:29:59:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 831 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 23:29:59:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 831 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 23:29:59:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (831) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.15 23:29:59:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1651 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 23:29:59:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1651 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 23:29:59:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1651) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.15 23:29:59:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 776 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 23:29:59:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 776 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 23:29:59:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (776) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.15 23:29:59:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 852 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 23:29:59:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 852 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 23:29:59:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (852) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.15 23:29:59:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 500 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 23:29:59:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 500 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 23:29:59:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (500) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.15 23:29:59:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '50027cc66ea01f9c2732ba30158ccdd1', '5.255.250.61'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.15 23:54:35:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	ARRAY['14'::int8] && posts.tag_id 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 23:54:35:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	ARRAY['14'::int8] && posts.tag_id 
-- ORDER
ORDER BY posts.created_time DESC, posts.fixed DESC, posts.posted ASC 
-- ORDER
-- OFFSET
OFFSET 20 LIMIT 10;
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 23:54:35:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1354,1315,1283,1265,1253,1236,1223,1219,1205,1204) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.15 23:54:35:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '50027cc66ea01f9c2732ba30158ccdd1', '5.255.250.61'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.15 23:54:43:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1134 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 23:54:43:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1134 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 23:54:43:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1134) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.15 23:54:43:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1134
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.15 23:54:43:
--------------------------------

                    -- Глобальне потепління призвело до зменшення птахів і збільшенню довжини їх крил
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Глобальне')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1134
                        AND posts.tag_id && ARRAY['7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.15 23:54:43:
--------------------------------

                    -- Глобальне потепління призвело до зменшення птахів і збільшенню довжини їх крил
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('потепління')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1134
                        AND posts.tag_id && ARRAY['7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.15 23:54:43:
--------------------------------

                    -- Глобальне потепління призвело до зменшення птахів і збільшенню довжини їх крил
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('призвело')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1134
                        AND posts.tag_id && ARRAY['7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.15 23:54:43:
--------------------------------

                    -- Глобальне потепління призвело до зменшення птахів і збільшенню довжини їх крил
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('зменшення')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1134
                        AND posts.tag_id && ARRAY['7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.15 23:54:43:
--------------------------------

                    -- Глобальне потепління призвело до зменшення птахів і збільшенню довжини їх крил
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('птахів')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1134
                        AND posts.tag_id && ARRAY['7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.15 23:54:43:
--------------------------------

                    -- Глобальне потепління призвело до зменшення птахів і збільшенню довжини їх крил
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('збільшенню')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1134
                        AND posts.tag_id && ARRAY['7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.15 23:54:43:
--------------------------------

                    -- Глобальне потепління призвело до зменшення птахів і збільшенню довжини їх крил
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('довжини')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1134
                        AND posts.tag_id && ARRAY['7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.15 23:54:43:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 781 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 23:54:43:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 781 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 23:54:43:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (781) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.15 23:54:43:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1027 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 23:54:43:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1027 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 23:54:43:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1027) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.15 23:54:43:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1230 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 23:54:43:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1230 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 23:54:44:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1230) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.15 23:54:44:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1508 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 23:54:44:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1508 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 23:54:44:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1508) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.15 23:54:44:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1693 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 23:54:44:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1693 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.15 23:54:44:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1693) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.15 23:54:44:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '50027cc66ea01f9c2732ba30158ccdd1', '5.255.250.61'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.15 23:58:26:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '1a0d36373ed7a1d578ee56dab756da62', '66.249.65.146'::inet, 'Chrome' );
--------------------------------
2020.01.16 00:09:19:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '2d2e8e6ab88742154eade31e44c21e75', '66.249.65.150'::inet, 'Chrome' );
--------------------------------
2020.01.16 00:09:19:
--------------------------------
SELECT count( DISTINCT ua_hash ) as count FROM visit_counter WHERE date_trunc('day', ts) = date_trunc('day', now());
--------------------------------
2020.01.16 00:16:11:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 21 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 00:16:11:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 21 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 00:16:11:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (21) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.16 00:16:11:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 21
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.16 00:16:11:
--------------------------------

                    -- Розпочався закритий бета-тест Warcraft 3: Reforged
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Розпочався')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 21
                        AND posts.tag_id && ARRAY['3'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.16 00:16:11:
--------------------------------

                    -- Розпочався закритий бета-тест Warcraft 3: Reforged
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('закритий')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 21
                        AND posts.tag_id && ARRAY['3'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.16 00:16:11:
--------------------------------

                    -- Розпочався закритий бета-тест Warcraft 3: Reforged
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('бета-тест')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 21
                        AND posts.tag_id && ARRAY['3'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.16 00:16:11:
--------------------------------

                    -- Розпочався закритий бета-тест Warcraft 3: Reforged
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Warcraft')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 21
                        AND posts.tag_id && ARRAY['3'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.16 00:16:12:
--------------------------------

                    -- Розпочався закритий бета-тест Warcraft 3: Reforged
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Reforged')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 21
                        AND posts.tag_id && ARRAY['3'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.16 00:16:12:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 700 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 00:16:12:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 700 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 00:16:12:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (700) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.16 00:16:12:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 156 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 00:16:12:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 156 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 00:16:12:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (156) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.16 00:16:12:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1268 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 00:16:12:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1268 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 00:16:12:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1268) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.16 00:16:12:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 106 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 00:16:12:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 106 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 00:16:12:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (106) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.16 00:16:12:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1465 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 00:16:12:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1465 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 00:16:12:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1465) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.16 00:16:12:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '50027cc66ea01f9c2732ba30158ccdd1', '5.255.250.61'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.16 00:25:03:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1376 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 00:25:03:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1376 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 00:25:03:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1376) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.16 00:25:03:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1376
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.16 00:25:03:
--------------------------------

                    -- Туманність у вигляді новорічної ялинки — ось, що зняв астролог-любитель
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Туманність')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1376
                        AND posts.tag_id && ARRAY['6'::int8, '7'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.16 00:25:03:
--------------------------------

                    -- Туманність у вигляді новорічної ялинки — ось, що зняв астролог-любитель
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('вигляді')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1376
                        AND posts.tag_id && ARRAY['6'::int8, '7'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.16 00:25:03:
--------------------------------

                    -- Туманність у вигляді новорічної ялинки — ось, що зняв астролог-любитель
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('новорічної')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1376
                        AND posts.tag_id && ARRAY['6'::int8, '7'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.16 00:25:03:
--------------------------------

                    -- Туманність у вигляді новорічної ялинки — ось, що зняв астролог-любитель
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('ялинки')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1376
                        AND posts.tag_id && ARRAY['6'::int8, '7'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.16 00:25:03:
--------------------------------

                    -- Туманність у вигляді новорічної ялинки — ось, що зняв астролог-любитель
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('астролог-любитель')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1376
                        AND posts.tag_id && ARRAY['6'::int8, '7'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.16 00:25:03:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 824 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 00:25:03:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 824 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 00:25:03:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (824) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.16 00:25:03:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1390 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 00:25:03:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1390 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 00:25:03:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1390) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.16 00:25:03:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 356 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 00:25:03:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 356 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 00:25:03:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (356) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.16 00:25:03:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1515 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 00:25:03:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1515 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 00:25:03:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1515) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.16 00:25:03:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 830 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 00:25:03:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 830 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 00:25:03:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (830) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.16 00:25:03:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '1a0d36373ed7a1d578ee56dab756da62', '66.249.65.146'::inet, 'Chrome' );
--------------------------------
2020.01.16 00:39:11:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1685 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 00:39:11:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1685 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 00:39:11:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1685) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.16 00:39:11:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1685
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.16 00:39:11:
--------------------------------

                    -- У Resident Evil 3 з’явився трейлер в якому показаний Nemesis
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Resident')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1685
                        AND posts.tag_id && ARRAY['3'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.16 00:39:11:
--------------------------------

                    -- У Resident Evil 3 з’явився трейлер в якому показаний Nemesis
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('з’явився')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1685
                        AND posts.tag_id && ARRAY['3'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.16 00:39:11:
--------------------------------

                    -- У Resident Evil 3 з’явився трейлер в якому показаний Nemesis
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('трейлер')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1685
                        AND posts.tag_id && ARRAY['3'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.16 00:39:11:
--------------------------------

                    -- У Resident Evil 3 з’явився трейлер в якому показаний Nemesis
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('показаний')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1685
                        AND posts.tag_id && ARRAY['3'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.16 00:39:11:
--------------------------------

                    -- У Resident Evil 3 з’явився трейлер в якому показаний Nemesis
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Nemesis')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1685
                        AND posts.tag_id && ARRAY['3'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.16 00:39:11:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1270 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 00:39:11:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1270 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 00:39:11:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1270) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.16 00:39:11:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 817 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 00:39:11:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 817 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 00:39:11:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (817) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.16 00:39:11:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 855 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 00:39:11:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 855 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 00:39:11:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (855) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.16 00:39:11:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 978 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 00:39:11:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 978 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 00:39:11:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (978) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.16 00:39:11:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1172 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 00:39:11:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1172 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 00:39:11:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1172) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.16 00:39:11:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '1a0d36373ed7a1d578ee56dab756da62', '66.249.65.146'::inet, 'Chrome' );
--------------------------------
2020.01.16 00:39:12:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1683 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 00:39:12:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1683 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 00:39:12:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1683) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.16 00:39:12:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1683
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.16 00:39:12:
--------------------------------

                    -- Порада, як змусити дітей ненавидіти відеоігри, метод простий і він працює
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Порада,')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1683
                        AND posts.tag_id && ARRAY['9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.16 00:39:12:
--------------------------------

                    -- Порада, як змусити дітей ненавидіти відеоігри, метод простий і він працює
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('змусити')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1683
                        AND posts.tag_id && ARRAY['9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.16 00:39:12:
--------------------------------

                    -- Порада, як змусити дітей ненавидіти відеоігри, метод простий і він працює
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('ненавидіти')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1683
                        AND posts.tag_id && ARRAY['9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.16 00:39:12:
--------------------------------

                    -- Порада, як змусити дітей ненавидіти відеоігри, метод простий і він працює
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('відеоігри,')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1683
                        AND posts.tag_id && ARRAY['9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.16 00:39:12:
--------------------------------

                    -- Порада, як змусити дітей ненавидіти відеоігри, метод простий і він працює
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('простий')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1683
                        AND posts.tag_id && ARRAY['9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.16 00:39:12:
--------------------------------

                    -- Порада, як змусити дітей ненавидіти відеоігри, метод простий і він працює
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('працює')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1683
                        AND posts.tag_id && ARRAY['9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.16 00:39:12:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 337 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 00:39:12:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 337 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 00:39:12:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (337) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.16 00:39:12:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 537 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 00:39:12:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 537 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 00:39:12:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (537) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.16 00:39:12:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 721 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 00:39:12:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 721 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 00:39:12:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (721) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.16 00:39:12:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 469 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 00:39:12:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 469 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 00:39:12:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (469) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.16 00:39:12:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( 'bbc73cf92656b27bd1280a5dceee4a98', '66.249.65.148'::inet, 'Chrome' );
--------------------------------
2020.01.16 00:40:28:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1686 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 00:40:28:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1686 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 00:40:28:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1686) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.16 00:40:28:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1686
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.16 00:40:28:
--------------------------------

                    -- Вчені створили живих роботів зі стовбурових клітин жаби
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('створили')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1686
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.16 00:40:28:
--------------------------------

                    -- Вчені створили живих роботів зі стовбурових клітин жаби
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('роботів')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1686
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.16 00:40:28:
--------------------------------

                    -- Вчені створили живих роботів зі стовбурових клітин жаби
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('стовбурових')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1686
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.16 00:40:28:
--------------------------------

                    -- Вчені створили живих роботів зі стовбурових клітин жаби
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('клітин')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1686
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.16 00:40:28:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 988 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 00:40:28:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 988 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 00:40:28:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (988) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.16 00:40:28:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1342 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 00:40:28:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1342 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 00:40:28:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1342) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.16 00:40:28:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 135 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 00:40:28:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 135 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 00:40:28:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (135) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.16 00:40:28:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1528 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 00:40:28:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1528 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 00:40:28:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1528) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.16 00:40:28:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 858 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 00:40:28:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 858 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 00:40:28:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (858) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.16 00:40:28:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '1a0d36373ed7a1d578ee56dab756da62', '66.249.65.146'::inet, 'Chrome' );
--------------------------------
2020.01.16 00:42:10:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1175 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 00:42:10:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1175 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 00:42:10:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1175) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.16 00:42:10:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1175
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.16 00:42:10:
--------------------------------

                    -- Amazon, Apple та Google створять новий мережевий стандарт для IoT
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Amazon,')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1175
                        AND posts.tag_id && ARRAY['8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.16 00:42:10:
--------------------------------

                    -- Amazon, Apple та Google створять новий мережевий стандарт для IoT
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Google')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1175
                        AND posts.tag_id && ARRAY['8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.16 00:42:10:
--------------------------------

                    -- Amazon, Apple та Google створять новий мережевий стандарт для IoT
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('створять')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1175
                        AND posts.tag_id && ARRAY['8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.16 00:42:10:
--------------------------------

                    -- Amazon, Apple та Google створять новий мережевий стандарт для IoT
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('мережевий')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1175
                        AND posts.tag_id && ARRAY['8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.16 00:42:10:
--------------------------------

                    -- Amazon, Apple та Google створять новий мережевий стандарт для IoT
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('стандарт')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1175
                        AND posts.tag_id && ARRAY['8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.16 00:42:10:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 861 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 00:42:10:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 861 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 00:42:10:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (861) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.16 00:42:10:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1700 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 00:42:10:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1700 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 00:42:10:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1700) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.16 00:42:10:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( 'b13dab9b7ba4a1232cc2e5f9d81fd5f0', '5.255.250.22'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.16 01:08:19:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	ARRAY['3'::int8] && posts.tag_id 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 01:08:20:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	ARRAY['3'::int8] && posts.tag_id 
-- ORDER
ORDER BY posts.created_time DESC, posts.fixed DESC, posts.posted ASC 
-- ORDER
-- OFFSET
OFFSET 380 LIMIT 10;
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 01:08:20:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (661,657,638,637,630,629,627,623,618,617) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.16 01:08:20:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( 'e44c5cd6614d9ed04c322ba8436e14ab', '5.255.250.165'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.16 01:08:21:
--------------------------------
SELECT count( DISTINCT ua_hash ) as count FROM visit_counter WHERE date_trunc('day', ts) = date_trunc('day', now());
--------------------------------
2020.01.16 01:08:37:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1411 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 01:08:37:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1411 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 01:08:37:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1411) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.16 01:08:37:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1411
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.16 01:08:37:
--------------------------------

                    -- Відома функція Apple Watch порушує чужий патент
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Відома')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1411
                        AND posts.tag_id && ARRAY['9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.16 01:08:37:
--------------------------------

                    -- Відома функція Apple Watch порушує чужий патент
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('функція')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1411
                        AND posts.tag_id && ARRAY['9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.16 01:08:38:
--------------------------------

                    -- Відома функція Apple Watch порушує чужий патент
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('порушує')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1411
                        AND posts.tag_id && ARRAY['9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.16 01:08:38:
--------------------------------

                    -- Відома функція Apple Watch порушує чужий патент
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('патент')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1411
                        AND posts.tag_id && ARRAY['9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.16 01:08:38:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1222 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 01:08:38:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1222 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 01:08:38:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1222) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.16 01:08:38:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1431 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 01:08:38:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1431 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 01:08:38:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1431) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.16 01:08:38:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1324 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 01:08:38:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1324 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 01:08:38:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1324) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.16 01:08:38:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 783 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 01:08:38:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 783 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 01:08:38:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (783) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.16 01:08:38:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 946 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 01:08:38:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 946 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 01:08:38:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (946) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.16 01:08:38:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( 'af0867a57bd84d5171ca60d9c5c5bc25', '141.8.143.193'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.16 01:30:53:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1636 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 01:30:53:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1636 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 01:30:53:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1636) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.16 01:30:53:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1636
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.16 01:30:53:
--------------------------------

                    -- Вчені з'ясували, що ті, хто п'ють чай, живуть довше, ніж ті, хто вживають його рідко
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('з''ясували,')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1636
                        AND posts.tag_id && ARRAY['7'::int8, '8'::int8, '12'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.16 01:30:53:
--------------------------------

                    -- Вчені з'ясували, що ті, хто п'ють чай, живуть довше, ніж ті, хто вживають його рідко
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('живуть')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1636
                        AND posts.tag_id && ARRAY['7'::int8, '8'::int8, '12'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.16 01:30:53:
--------------------------------

                    -- Вчені з'ясували, що ті, хто п'ють чай, живуть довше, ніж ті, хто вживають його рідко
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('довше,')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1636
                        AND posts.tag_id && ARRAY['7'::int8, '8'::int8, '12'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.16 01:30:54:
--------------------------------

                    -- Вчені з'ясували, що ті, хто п'ють чай, живуть довше, ніж ті, хто вживають його рідко
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('вживають')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1636
                        AND posts.tag_id && ARRAY['7'::int8, '8'::int8, '12'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.16 01:30:54:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 133 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 01:30:54:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 133 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 01:30:54:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (133) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.16 01:30:54:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 570 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 01:30:54:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 570 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 01:30:54:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (570) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.16 01:30:54:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 55 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 01:30:54:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 55 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 01:30:54:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (55) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.16 01:30:54:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1628 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 01:30:54:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1628 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 01:30:54:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1628) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.16 01:30:54:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 636 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 01:30:54:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 636 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 01:30:54:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (636) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.16 01:30:54:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( 'b5be84c0b4e6aab34531d298e89694b5', '100.43.85.169'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.16 01:31:19:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	ARRAY['3'::int8] && posts.tag_id 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 01:31:19:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	ARRAY['3'::int8] && posts.tag_id 
-- ORDER
ORDER BY posts.created_time DESC, posts.fixed DESC, posts.posted ASC 
-- ORDER
-- OFFSET
OFFSET 250 LIMIT 10;
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 01:31:19:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1012,1004,1002,1001,998,997,994,987,985,983) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.16 01:31:19:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '734f3643341f8e7ccfd91553a4493b8e', '100.43.85.183'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.16 01:31:21:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	ARRAY['7'::int8] && posts.tag_id 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 01:31:21:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	ARRAY['7'::int8] && posts.tag_id 
-- ORDER
ORDER BY posts.created_time DESC, posts.fixed DESC, posts.posted ASC 
-- ORDER
-- OFFSET
OFFSET 150 LIMIT 10;
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 01:31:21:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1301,1295,1289,1288,1285,1281,1279,1276,1271,1266) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.16 01:31:21:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '50027cc66ea01f9c2732ba30158ccdd1', '5.255.250.61'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.16 01:31:53:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1416
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.16 01:31:53:
--------------------------------

                    -- В мережі показали концепт Windows 10 в стилі macOS
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('мережі')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1416
                        AND posts.tag_id && ARRAY['4'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.16 01:31:53:
--------------------------------

                    -- В мережі показали концепт Windows 10 в стилі macOS
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('показали')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1416
                        AND posts.tag_id && ARRAY['4'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.16 01:31:53:
--------------------------------

                    -- В мережі показали концепт Windows 10 в стилі macOS
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('концепт')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1416
                        AND posts.tag_id && ARRAY['4'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.16 01:31:53:
--------------------------------

                    -- В мережі показали концепт Windows 10 в стилі macOS
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Windows')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1416
                        AND posts.tag_id && ARRAY['4'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.16 01:31:53:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1484 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 01:31:53:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1484 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 01:31:53:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1484) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.16 01:31:53:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '068c43cd532470f3d6f8806284dc8a6e', '93.158.161.34'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.16 01:43:30:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1329 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 01:43:30:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1329 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 01:43:30:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1329) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.16 01:43:30:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1329
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.16 01:43:30:
--------------------------------

                    -- Нова техніка збільшує швидкість 3D-друку в 1-10 тис. разів
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('техніка')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1329
                        AND posts.tag_id && ARRAY['7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.16 01:43:30:
--------------------------------

                    -- Нова техніка збільшує швидкість 3D-друку в 1-10 тис. разів
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('збільшує')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1329
                        AND posts.tag_id && ARRAY['7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.16 01:43:31:
--------------------------------

                    -- Нова техніка збільшує швидкість 3D-друку в 1-10 тис. разів
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('швидкість')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1329
                        AND posts.tag_id && ARRAY['7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.16 01:43:31:
--------------------------------

                    -- Нова техніка збільшує швидкість 3D-друку в 1-10 тис. разів
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('3D-друку')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1329
                        AND posts.tag_id && ARRAY['7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.16 01:43:31:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1045 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 01:43:31:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1045 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 01:43:31:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1045) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.16 01:43:31:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 131 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 01:43:31:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 131 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 01:43:31:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (131) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.16 01:43:31:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 431 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 01:43:31:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 431 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 01:43:31:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (431) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.16 01:43:31:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 332 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 01:43:31:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 332 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 01:43:31:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (332) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.16 01:43:31:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '2d2e8e6ab88742154eade31e44c21e75', '66.249.65.150'::inet, 'Chrome' );
--------------------------------
2020.01.16 01:53:52:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1506 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 01:53:52:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1506 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 01:53:52:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1506) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.16 01:53:52:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1506
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.16 01:53:52:
--------------------------------

                    -- Як позбутися від молі в кімнатах та на кухні: лише перевірені способи
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('позбутися')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1506
                        AND posts.tag_id && ARRAY['12'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.16 01:53:52:
--------------------------------

                    -- Як позбутися від молі в кімнатах та на кухні: лише перевірені способи
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('кімнатах')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1506
                        AND posts.tag_id && ARRAY['12'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.16 01:53:52:
--------------------------------

                    -- Як позбутися від молі в кімнатах та на кухні: лише перевірені способи
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('кухні:')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1506
                        AND posts.tag_id && ARRAY['12'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.16 01:53:52:
--------------------------------

                    -- Як позбутися від молі в кімнатах та на кухні: лише перевірені способи
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('перевірені')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1506
                        AND posts.tag_id && ARRAY['12'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.16 01:53:52:
--------------------------------

                    -- Як позбутися від молі в кімнатах та на кухні: лише перевірені способи
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('способи')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1506
                        AND posts.tag_id && ARRAY['12'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.16 01:53:52:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1587 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 01:53:52:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1587 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 01:53:52:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1587) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.16 01:53:52:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1081 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 01:53:52:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1081 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 01:53:52:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1081) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.16 01:53:52:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1452 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 01:53:52:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1452 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 01:53:52:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1452) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.16 01:53:52:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 473 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 01:53:52:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 473 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 01:53:52:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (473) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.16 01:53:52:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( 'a24b55240a84b35c0d72ba8fe0b7a883', '77.88.47.43'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.16 01:54:09:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	ARRAY['6'::int8] && posts.tag_id 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 01:54:09:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	ARRAY['6'::int8] && posts.tag_id 
-- ORDER
ORDER BY posts.created_time DESC, posts.fixed DESC, posts.posted ASC 
-- ORDER
-- OFFSET
OFFSET 60 LIMIT 10;
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 01:54:09:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1276,1271,1256,1239,1232,1229,1227,1218,1217,1203) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.16 01:54:09:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( 'd0f2bbdbdc75b33e961b54b4abff5c08', '100.43.90.164'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.16 02:12:28:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1654 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 02:12:28:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1654 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 02:12:28:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1654) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.16 02:12:28:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1654
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.16 02:12:28:
--------------------------------

                    -- Вчені довели здатність атлантичної птиці використовувати примітивні знаряддя
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('довели')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1654
                        AND posts.tag_id && ARRAY['7'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.16 02:12:28:
--------------------------------

                    -- Вчені довели здатність атлантичної птиці використовувати примітивні знаряддя
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('здатність')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1654
                        AND posts.tag_id && ARRAY['7'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.16 02:12:28:
--------------------------------

                    -- Вчені довели здатність атлантичної птиці використовувати примітивні знаряддя
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('атлантичної')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1654
                        AND posts.tag_id && ARRAY['7'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.16 02:12:28:
--------------------------------

                    -- Вчені довели здатність атлантичної птиці використовувати примітивні знаряддя
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('використовувати')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1654
                        AND posts.tag_id && ARRAY['7'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.16 02:12:28:
--------------------------------

                    -- Вчені довели здатність атлантичної птиці використовувати примітивні знаряддя
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('примітивні')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1654
                        AND posts.tag_id && ARRAY['7'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.16 02:12:28:
--------------------------------

                    -- Вчені довели здатність атлантичної птиці використовувати примітивні знаряддя
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('знаряддя')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1654
                        AND posts.tag_id && ARRAY['7'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.16 02:12:28:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1000 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 02:12:28:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1000 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 02:12:28:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1000) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.16 02:12:28:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 698 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 02:12:28:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 698 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 02:12:28:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (698) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.16 02:12:28:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 280 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 02:12:28:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 280 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 02:12:28:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (280) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.16 02:12:28:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 476 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 02:12:28:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 476 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 02:12:28:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (476) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.16 02:12:28:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( 'd0f2bbdbdc75b33e961b54b4abff5c08', '100.43.90.164'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.16 02:12:29:
--------------------------------
SELECT count( DISTINCT ua_hash ) as count FROM visit_counter WHERE date_trunc('day', ts) = date_trunc('day', now());
--------------------------------
2020.01.16 02:12:53:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1174 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 02:12:53:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1174 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 02:12:53:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1174) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.16 02:12:53:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1174
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.16 02:12:53:
--------------------------------

                    -- Орбітальний зонд «ESA» зробив детальні фотографії супутника Марса
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Орбітальний')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1174
                        AND posts.tag_id && ARRAY['6'::int8, '7'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.16 02:12:53:
--------------------------------

                    -- Орбітальний зонд «ESA» зробив детальні фотографії супутника Марса
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('зробив')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1174
                        AND posts.tag_id && ARRAY['6'::int8, '7'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.16 02:12:53:
--------------------------------

                    -- Орбітальний зонд «ESA» зробив детальні фотографії супутника Марса
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('детальні')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1174
                        AND posts.tag_id && ARRAY['6'::int8, '7'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.16 02:12:53:
--------------------------------

                    -- Орбітальний зонд «ESA» зробив детальні фотографії супутника Марса
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('фотографії')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1174
                        AND posts.tag_id && ARRAY['6'::int8, '7'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.16 02:12:53:
--------------------------------

                    -- Орбітальний зонд «ESA» зробив детальні фотографії супутника Марса
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('супутника')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1174
                        AND posts.tag_id && ARRAY['6'::int8, '7'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.16 02:12:53:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1455 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 02:12:53:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1455 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 02:12:53:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1455) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.16 02:12:53:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 764 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 02:12:53:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 764 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 02:12:53:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (764) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.16 02:12:53:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 83 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 02:12:53:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 83 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 02:12:53:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (83) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.16 02:12:53:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 85 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 02:12:53:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 85 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.16 02:12:53:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (85) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.16 02:12:53:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( 'fb818a1ce43c798ccff87db291e5beb0', '5.255.250.55'::inet, '[Bot] Yandex' );
--------------------------------
