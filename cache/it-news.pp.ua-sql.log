2020.01.12 20:54:44:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 118 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 20:54:44:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 118 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 20:54:44:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (118) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 20:54:44:
--------------------------------
SELECT * FROM categories ORDER BY level;  -- %QUERY_CACHABLE
--------------------------------
2020.01.12 20:54:44:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 118
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.12 20:54:44:
--------------------------------

                    -- Експерти з кібербезпеки попереджають про виявлені вразливості у пристроях інтернету речей
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Експерти')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 118
                        AND posts.tag_id && ARRAY['3'::int8, '5'::int8, '7'::int8, '8'::int8, '11'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 20:54:44:
--------------------------------

                    -- Експерти з кібербезпеки попереджають про виявлені вразливості у пристроях інтернету речей
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('кібербезпеки')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 118
                        AND posts.tag_id && ARRAY['3'::int8, '5'::int8, '7'::int8, '8'::int8, '11'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 20:54:44:
--------------------------------

                    -- Експерти з кібербезпеки попереджають про виявлені вразливості у пристроях інтернету речей
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('попереджають')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 118
                        AND posts.tag_id && ARRAY['3'::int8, '5'::int8, '7'::int8, '8'::int8, '11'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 20:54:44:
--------------------------------

                    -- Експерти з кібербезпеки попереджають про виявлені вразливості у пристроях інтернету речей
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('виявлені')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 118
                        AND posts.tag_id && ARRAY['3'::int8, '5'::int8, '7'::int8, '8'::int8, '11'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 20:54:45:
--------------------------------

                    -- Експерти з кібербезпеки попереджають про виявлені вразливості у пристроях інтернету речей
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('вразливості')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 118
                        AND posts.tag_id && ARRAY['3'::int8, '5'::int8, '7'::int8, '8'::int8, '11'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 20:54:45:
--------------------------------

                    -- Експерти з кібербезпеки попереджають про виявлені вразливості у пристроях інтернету речей
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('пристроях')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 118
                        AND posts.tag_id && ARRAY['3'::int8, '5'::int8, '7'::int8, '8'::int8, '11'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 20:54:45:
--------------------------------

                    -- Експерти з кібербезпеки попереджають про виявлені вразливості у пристроях інтернету речей
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('інтернету')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 118
                        AND posts.tag_id && ARRAY['3'::int8, '5'::int8, '7'::int8, '8'::int8, '11'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 20:54:45:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 658 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 20:54:45:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 658 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 20:54:45:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (658) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 20:54:45:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1536 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 20:54:45:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1536 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 20:54:45:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1536) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 20:54:45:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 255 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 20:54:45:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 255 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 20:54:45:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (255) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 20:54:45:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1277 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 20:54:45:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1277 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 20:54:45:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1277) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 20:54:45:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 199 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 20:54:45:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 199 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 20:54:45:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (199) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 20:54:45:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '10bcf4cd2fbe789bb74b0c7ebd867884', '37.9.87.162'::inet, 'Chrome' );
--------------------------------
2020.01.12 20:54:45:
--------------------------------

                SELECT
                    tags.id,
                    tags.name,
                    tags.altname,
                    (SELECT count(posts_tags.post_id) FROM posts_tags WHERE posts_tags.tag_id = tags.id ) as news_count
                FROM
                    tags WHERE id > 0 ORDER BY name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 20:54:45:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 20:54:45:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 
-- ORDER
ORDER BY posts.created_time DESC, posts.fixed DESC, posts.posted ASC 
-- ORDER
-- OFFSET
OFFSET 90 LIMIT 12;
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 20:54:45:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1550,1549,1548,1547,1546,1545,1544,1543,1542,1541,1540,1539) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 20:54:45:
--------------------------------
SELECT count( DISTINCT ua_hash ) as count FROM visit_counter WHERE date_trunc('day', ts) = date_trunc('day', now());
--------------------------------
2020.01.12 20:54:45:
--------------------------------

                SELECT
                    date_trunc('day', visit_counter.ts) as visit_day,
                    COUNT( DISTINCT visit_counter.ua_hash ) as count
                FROM
                    visit_counter
                WHERE
                    date_trunc('day', visit_counter.ts ) > date_trunc('day', NOW() - INTERVAL '1 week')
                GROUP BY visit_day
                ORDER BY visit_day;
            
--------------------------------
2020.01.12 20:54:46:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '31e5052d8386f7afe4c8c2ec3d2f157c', '5.255.250.13'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.12 20:54:49:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 474 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 20:54:49:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 474 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 20:54:49:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (474) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 20:54:49:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 474
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.12 20:54:49:
--------------------------------

                    -- Dead Island 2 все ще знаходиться в розробці
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Island')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 474
                        AND posts.tag_id && ARRAY['3'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 20:54:49:
--------------------------------

                    -- Dead Island 2 все ще знаходиться в розробці
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('знаходиться')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 474
                        AND posts.tag_id && ARRAY['3'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 20:54:49:
--------------------------------

                    -- Dead Island 2 все ще знаходиться в розробці
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('розробці')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 474
                        AND posts.tag_id && ARRAY['3'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 20:54:49:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1314 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 20:54:49:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1314 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 20:54:49:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1314) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 20:54:49:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1217 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 20:54:49:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1217 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 20:54:49:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1217) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 20:54:49:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1164 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 20:54:49:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1164 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 20:54:49:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1164) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 20:54:49:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 744 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 20:54:49:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 744 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 20:54:49:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (744) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 20:54:49:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 419 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 20:54:49:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 419 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 20:54:49:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (419) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 20:54:49:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( 'e39ab8884df1d6d01f8c9f231d105b4e', '77.88.47.43'::inet, 'Chrome' );
--------------------------------
2020.01.12 20:58:18:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 966 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 20:58:18:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 966 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 20:58:18:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (966) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 20:58:18:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 966
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.12 20:58:18:
--------------------------------

                    -- Redmi AC2100 став першим бюджетним роутером бренда
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('AC2100')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 966
                        AND posts.tag_id && ARRAY['9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 20:58:18:
--------------------------------

                    -- Redmi AC2100 став першим бюджетним роутером бренда
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('першим')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 966
                        AND posts.tag_id && ARRAY['9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 20:58:19:
--------------------------------

                    -- Redmi AC2100 став першим бюджетним роутером бренда
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('бюджетним')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 966
                        AND posts.tag_id && ARRAY['9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 20:58:19:
--------------------------------

                    -- Redmi AC2100 став першим бюджетним роутером бренда
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('роутером')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 966
                        AND posts.tag_id && ARRAY['9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 20:58:19:
--------------------------------

                    -- Redmi AC2100 став першим бюджетним роутером бренда
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('бренда')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 966
                        AND posts.tag_id && ARRAY['9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 20:58:19:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1300 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 20:58:19:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1300 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 20:58:19:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1300) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 20:58:19:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1591 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 20:58:19:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1591 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 20:58:19:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1591) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 20:58:19:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1505 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 20:58:19:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1505 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 20:58:19:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1505) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 20:58:19:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 937 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 20:58:19:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 937 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 20:58:19:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (937) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 20:58:19:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 909 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 20:58:19:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 909 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 20:58:19:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (909) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 20:58:19:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '1a0d36373ed7a1d578ee56dab756da62', '66.249.65.146'::inet, 'Chrome' );
--------------------------------
2020.01.12 21:00:51:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1517 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:00:51:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1517 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:00:51:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1517) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:00:51:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1517
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:00:52:
--------------------------------

                    -- В мережі з’явилися нові деталі про Xiaomi Mi 10
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('мережі')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1517
                        AND posts.tag_id && ARRAY['9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:00:52:
--------------------------------

                    -- В мережі з’явилися нові деталі про Xiaomi Mi 10
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('з’явилися')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1517
                        AND posts.tag_id && ARRAY['9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:00:52:
--------------------------------

                    -- В мережі з’явилися нові деталі про Xiaomi Mi 10
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('деталі')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1517
                        AND posts.tag_id && ARRAY['9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:00:52:
--------------------------------

                    -- В мережі з’явилися нові деталі про Xiaomi Mi 10
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Xiaomi')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1517
                        AND posts.tag_id && ARRAY['9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:00:52:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 274 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:00:52:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 274 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:00:52:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (274) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:00:52:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 848 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:00:52:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 848 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:00:52:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (848) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:00:52:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1402 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:00:52:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1402 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:00:52:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1402) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:00:52:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 950 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:00:52:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 950 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:00:52:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (950) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:00:52:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1142 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:00:52:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1142 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:00:52:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1142) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:00:52:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( 'd996268ac0880cd4bcfaf38c24512a28', '100.43.90.124'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.12 21:00:52:
--------------------------------
SELECT count( DISTINCT ua_hash ) as count FROM visit_counter WHERE date_trunc('day', ts) = date_trunc('day', now());
--------------------------------
2020.01.12 21:12:29:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1132 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:12:29:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1132 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:12:29:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1132) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:12:29:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1132
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:12:29:
--------------------------------

                    -- Microsoft примусово переведе користувачів на свій новий браузер
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Microsoft')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1132
                        AND posts.tag_id && ARRAY['3'::int8, '4'::int8, '7'::int8, '8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:12:29:
--------------------------------

                    -- Microsoft примусово переведе користувачів на свій новий браузер
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('примусово')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1132
                        AND posts.tag_id && ARRAY['3'::int8, '4'::int8, '7'::int8, '8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:12:30:
--------------------------------

                    -- Microsoft примусово переведе користувачів на свій новий браузер
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('переведе')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1132
                        AND posts.tag_id && ARRAY['3'::int8, '4'::int8, '7'::int8, '8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:12:30:
--------------------------------

                    -- Microsoft примусово переведе користувачів на свій новий браузер
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('користувачів')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1132
                        AND posts.tag_id && ARRAY['3'::int8, '4'::int8, '7'::int8, '8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:12:30:
--------------------------------

                    -- Microsoft примусово переведе користувачів на свій новий браузер
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('браузер')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1132
                        AND posts.tag_id && ARRAY['3'::int8, '4'::int8, '7'::int8, '8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:12:30:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1211 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:12:30:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1211 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:12:30:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1211) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:12:30:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1048 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:12:30:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1048 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:12:30:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1048) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:12:30:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 127 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:12:30:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 127 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:12:30:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (127) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:12:30:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 854 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:12:30:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 854 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:12:30:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (854) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:12:30:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 768 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:12:30:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 768 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:12:30:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (768) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:12:30:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( 'ae522c1c5d2bbabd6a9e3b15f84d12fa', '100.43.90.114'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.12 21:12:32:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 961 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:12:32:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 961 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:12:32:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (961) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:12:32:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 961
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:12:32:
--------------------------------

                    -- Спецслужби Британії розслідують роль Кремля у витоку секретних документів – ЗМІ
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Спецслужби')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 961
                        AND posts.tag_id && ARRAY['3'::int8, '5'::int8, '12'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:12:32:
--------------------------------

                    -- Спецслужби Британії розслідують роль Кремля у витоку секретних документів – ЗМІ
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Британії')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 961
                        AND posts.tag_id && ARRAY['3'::int8, '5'::int8, '12'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:12:32:
--------------------------------

                    -- Спецслужби Британії розслідують роль Кремля у витоку секретних документів – ЗМІ
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('розслідують')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 961
                        AND posts.tag_id && ARRAY['3'::int8, '5'::int8, '12'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:12:32:
--------------------------------

                    -- Спецслужби Британії розслідують роль Кремля у витоку секретних документів – ЗМІ
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Кремля')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 961
                        AND posts.tag_id && ARRAY['3'::int8, '5'::int8, '12'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:12:32:
--------------------------------

                    -- Спецслужби Британії розслідують роль Кремля у витоку секретних документів – ЗМІ
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('витоку')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 961
                        AND posts.tag_id && ARRAY['3'::int8, '5'::int8, '12'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:12:32:
--------------------------------

                    -- Спецслужби Британії розслідують роль Кремля у витоку секретних документів – ЗМІ
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('секретних')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 961
                        AND posts.tag_id && ARRAY['3'::int8, '5'::int8, '12'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:12:32:
--------------------------------

                    -- Спецслужби Британії розслідують роль Кремля у витоку секретних документів – ЗМІ
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('документів')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 961
                        AND posts.tag_id && ARRAY['3'::int8, '5'::int8, '12'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:12:32:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1476 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:12:32:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1476 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:12:32:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1476) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:12:32:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 78 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:12:32:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 78 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:12:32:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (78) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:12:32:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 353 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:12:32:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 353 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:12:32:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (353) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:12:32:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 372 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:12:32:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 372 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:12:32:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (372) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:12:32:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 44 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:12:32:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 44 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:12:33:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (44) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:12:33:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( 'c1d09fbc47901386c3b6b4df24a0c940', '77.88.47.53'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.12 21:12:37:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	ARRAY['8'::int8] && posts.tag_id 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:12:37:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	ARRAY['8'::int8] && posts.tag_id 
-- ORDER
ORDER BY posts.created_time DESC, posts.fixed DESC, posts.posted ASC 
-- ORDER
-- OFFSET
OFFSET 50 LIMIT 10;
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:12:37:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1544,1543,1540,1539,1538,1536,1534,1531,1530,1529) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:12:38:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( 'f9c726238c5a2fb831419f1d46e86361', '5.255.250.59'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.12 21:12:38:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	posts.tag_id && ARRAY[ '11'::int8 ] 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:12:38:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	posts.tag_id && ARRAY[ '11'::int8 ] 
-- ORDER
ORDER BY posts.created_time DESC, posts.fixed DESC, posts.posted ASC 
-- ORDER
-- OFFSET
OFFSET 10 LIMIT 2;
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:12:38:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1176,1094) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:12:38:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	posts.tag_id && ARRAY[ '8'::int8 ] 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:12:38:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	posts.tag_id && ARRAY[ '8'::int8 ] 
-- ORDER
ORDER BY posts.created_time DESC, posts.fixed DESC, posts.posted ASC 
-- ORDER
-- OFFSET
OFFSET 0 LIMIT 1;
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:12:38:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1640) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:12:38:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	posts.tag_id && ARRAY[ '8'::int8 ] 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:12:38:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	posts.tag_id && ARRAY[ '8'::int8 ] 
-- ORDER
ORDER BY posts.created_time DESC, posts.fixed DESC, posts.posted ASC 
-- ORDER
-- OFFSET
OFFSET 10 LIMIT 3;
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:12:38:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1628,1627,1626) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:12:38:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	posts.tag_id && ARRAY[ '5'::int8, '13'::int8 ] 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:12:38:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	posts.tag_id && ARRAY[ '5'::int8, '13'::int8 ] 
-- ORDER
ORDER BY posts.created_time DESC, posts.fixed DESC, posts.posted ASC 
-- ORDER
-- OFFSET
OFFSET 0 LIMIT 1;
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:12:38:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1605) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:12:38:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	posts.tag_id && ARRAY[ '5'::int8, '13'::int8 ] 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:12:38:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	posts.tag_id && ARRAY[ '5'::int8, '13'::int8 ] 
-- ORDER
ORDER BY posts.created_time DESC, posts.fixed DESC, posts.posted ASC 
-- ORDER
-- OFFSET
OFFSET 0 LIMIT 4;
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:12:38:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1605,1465,1422,1413) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:12:38:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	posts.tag_id && ARRAY[ '6'::int8, '7'::int8 ] 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:12:38:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	posts.tag_id && ARRAY[ '6'::int8, '7'::int8 ] 
-- ORDER
ORDER BY posts.created_time DESC, posts.fixed DESC, posts.posted ASC 
-- ORDER
-- OFFSET
OFFSET 0 LIMIT 10;
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:12:38:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1640,1639,1638,1637,1636,1635,1634,1633,1632,1629) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:12:40:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1226 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:12:40:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1226 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:12:40:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1226) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:12:40:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1226
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:12:40:
--------------------------------

                    -- Справжнє значення слів, які називають емоції, втрачається під час перекладу
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Справжнє')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1226
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:12:40:
--------------------------------

                    -- Справжнє значення слів, які називають емоції, втрачається під час перекладу
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('значення')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1226
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:12:40:
--------------------------------

                    -- Справжнє значення слів, які називають емоції, втрачається під час перекладу
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('називають')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1226
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:12:40:
--------------------------------

                    -- Справжнє значення слів, які називають емоції, втрачається під час перекладу
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('емоції,')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1226
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:12:40:
--------------------------------

                    -- Справжнє значення слів, які називають емоції, втрачається під час перекладу
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('втрачається')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1226
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:12:40:
--------------------------------

                    -- Справжнє значення слів, які називають емоції, втрачається під час перекладу
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('перекладу')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1226
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:12:40:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1599 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:12:40:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1599 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:12:40:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1599) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:12:40:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 849 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:12:40:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 849 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:12:40:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (849) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:12:40:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1102 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:12:40:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1102 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:12:40:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1102) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:12:40:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 172 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:12:40:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 172 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:12:40:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (172) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:12:40:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1635 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:12:40:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1635 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:12:40:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1635) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:12:40:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '1b7e08927982c14552442f32c0fa8fcd', '141.8.188.203'::inet, 'Chrome' );
--------------------------------
2020.01.12 21:12:42:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '49b7e15d5ffd2eadcfe046639908f1f7', '93.158.161.12'::inet, 'Chrome' );
--------------------------------
2020.01.12 21:12:46:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 902 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:12:46:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 902 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:12:46:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (902) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:12:46:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 902
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:12:46:
--------------------------------

                    -- Апарат NASA безпрецедентно наблизився до Сонця і надіслав дані
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Апарат')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 902
                        AND posts.tag_id && ARRAY['3'::int8, '6'::int8, '7'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:12:46:
--------------------------------

                    -- Апарат NASA безпрецедентно наблизився до Сонця і надіслав дані
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('безпрецедентно')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 902
                        AND posts.tag_id && ARRAY['3'::int8, '6'::int8, '7'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:12:46:
--------------------------------

                    -- Апарат NASA безпрецедентно наблизився до Сонця і надіслав дані
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('наблизився')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 902
                        AND posts.tag_id && ARRAY['3'::int8, '6'::int8, '7'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:12:46:
--------------------------------

                    -- Апарат NASA безпрецедентно наблизився до Сонця і надіслав дані
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('надіслав')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 902
                        AND posts.tag_id && ARRAY['3'::int8, '6'::int8, '7'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:12:46:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 524 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:12:46:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 524 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:12:46:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (524) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:12:46:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 257 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:12:46:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 257 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:12:46:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (257) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:12:46:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 778 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:12:46:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 778 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:12:46:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (778) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:12:46:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1527 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:12:46:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1527 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:12:46:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1527) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:12:46:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 83 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:12:46:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 83 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:12:46:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (83) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:12:46:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( 'd0f2bbdbdc75b33e961b54b4abff5c08', '100.43.90.164'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.12 21:15:37:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1399 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:15:37:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1399 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:15:37:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1399) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:15:37:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1399
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:15:37:
--------------------------------

                    -- Valve підбила підсумки року в Steam
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('підбила')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1399
                        AND posts.tag_id && ARRAY['3'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:15:37:
--------------------------------

                    -- Valve підбила підсумки року в Steam
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('підсумки')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1399
                        AND posts.tag_id && ARRAY['3'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:15:37:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 748 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:15:37:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 748 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:15:37:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (748) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:15:37:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1320 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:15:37:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1320 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:15:37:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1320) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:15:37:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1131 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:15:37:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1131 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:15:37:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1131) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:15:37:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 534 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:15:37:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 534 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:15:37:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (534) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:15:37:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 60 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:15:37:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 60 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:15:37:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (60) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:15:37:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 36 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:15:37:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 36 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:15:37:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (36) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:15:37:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 812 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:15:37:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 812 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:15:37:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (812) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:15:37:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 420 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:15:37:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 420 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:15:37:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (420) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:15:37:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1508 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:15:37:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1508 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:15:37:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1508) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:15:37:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '1a0d36373ed7a1d578ee56dab756da62', '66.249.65.146'::inet, 'Chrome' );
--------------------------------
2020.01.12 21:31:03:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 187 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:31:03:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 187 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:31:03:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (187) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:31:03:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 187
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:31:04:
--------------------------------

                    -- Українсько-американська ракета &quot;Антарес&quot; відправила на МКС експериментальну духовку (відео)
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Українсько-американська')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 187
                        AND posts.tag_id && ARRAY['3'::int8, '6'::int8, '7'::int8, '8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:31:04:
--------------------------------

                    -- Українсько-американська ракета &quot;Антарес&quot; відправила на МКС експериментальну духовку (відео)
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('ракета')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 187
                        AND posts.tag_id && ARRAY['3'::int8, '6'::int8, '7'::int8, '8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:31:04:
--------------------------------

                    -- Українсько-американська ракета &quot;Антарес&quot; відправила на МКС експериментальну духовку (відео)
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('&quot;Антарес&quot;')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 187
                        AND posts.tag_id && ARRAY['3'::int8, '6'::int8, '7'::int8, '8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:31:04:
--------------------------------

                    -- Українсько-американська ракета &quot;Антарес&quot; відправила на МКС експериментальну духовку (відео)
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('відправила')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 187
                        AND posts.tag_id && ARRAY['3'::int8, '6'::int8, '7'::int8, '8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:31:04:
--------------------------------

                    -- Українсько-американська ракета &quot;Антарес&quot; відправила на МКС експериментальну духовку (відео)
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('експериментальну')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 187
                        AND posts.tag_id && ARRAY['3'::int8, '6'::int8, '7'::int8, '8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:31:04:
--------------------------------

                    -- Українсько-американська ракета &quot;Антарес&quot; відправила на МКС експериментальну духовку (відео)
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('духовку')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 187
                        AND posts.tag_id && ARRAY['3'::int8, '6'::int8, '7'::int8, '8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:31:04:
--------------------------------

                    -- Українсько-американська ракета &quot;Антарес&quot; відправила на МКС експериментальну духовку (відео)
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('(відео)')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 187
                        AND posts.tag_id && ARRAY['3'::int8, '6'::int8, '7'::int8, '8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:31:04:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 646 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:31:04:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 646 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:31:04:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (646) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:31:04:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1230 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:31:04:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1230 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:31:04:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1230) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:31:04:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1381 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:31:04:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1381 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:31:04:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1381) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:31:04:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 145 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:31:04:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 145 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:31:04:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (145) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:31:04:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 362 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:31:04:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 362 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:31:04:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (362) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:31:04:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( 'b5be84c0b4e6aab34531d298e89694b5', '100.43.85.169'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.12 21:31:20:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 375 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:31:20:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 375 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:31:20:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (375) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:31:20:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 375
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:31:21:
--------------------------------

                    -- Біонічний прилад нового покоління повернув зір команді добровольців
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Біонічний')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 375
                        AND posts.tag_id && ARRAY['7'::int8, '8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:31:21:
--------------------------------

                    -- Біонічний прилад нового покоління повернув зір команді добровольців
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('прилад')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 375
                        AND posts.tag_id && ARRAY['7'::int8, '8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:31:21:
--------------------------------

                    -- Біонічний прилад нового покоління повернув зір команді добровольців
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('нового')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 375
                        AND posts.tag_id && ARRAY['7'::int8, '8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:31:21:
--------------------------------

                    -- Біонічний прилад нового покоління повернув зір команді добровольців
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('покоління')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 375
                        AND posts.tag_id && ARRAY['7'::int8, '8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:31:21:
--------------------------------

                    -- Біонічний прилад нового покоління повернув зір команді добровольців
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('повернув')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 375
                        AND posts.tag_id && ARRAY['7'::int8, '8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:31:21:
--------------------------------

                    -- Біонічний прилад нового покоління повернув зір команді добровольців
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('команді')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 375
                        AND posts.tag_id && ARRAY['7'::int8, '8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:31:21:
--------------------------------

                    -- Біонічний прилад нового покоління повернув зір команді добровольців
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('добровольців')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 375
                        AND posts.tag_id && ARRAY['7'::int8, '8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:31:21:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1555 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:31:21:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1555 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:31:21:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1555) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:31:21:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 959 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:31:21:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 959 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:31:21:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (959) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:31:21:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1295 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:31:21:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1295 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:31:21:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1295) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:31:21:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 112 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:31:21:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 112 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:31:21:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (112) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:31:21:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1637 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:31:21:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1637 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:31:21:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1637) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:31:21:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( 'ce0c1dbf9c4b69af328551726653b4f2', '77.88.47.80'::inet, 'Chrome' );
--------------------------------
2020.01.12 21:31:49:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 145
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:31:49:
--------------------------------

                    -- IT-фахівці попереджають про поширення підроблених відео, створених за допомогою штучного інтелекту
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('IT-фахівці')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 145
                        AND posts.tag_id && ARRAY['3'::int8, '5'::int8, '7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:31:49:
--------------------------------

                    -- IT-фахівці попереджають про поширення підроблених відео, створених за допомогою штучного інтелекту
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('попереджають')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 145
                        AND posts.tag_id && ARRAY['3'::int8, '5'::int8, '7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:31:49:
--------------------------------

                    -- IT-фахівці попереджають про поширення підроблених відео, створених за допомогою штучного інтелекту
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('поширення')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 145
                        AND posts.tag_id && ARRAY['3'::int8, '5'::int8, '7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:31:49:
--------------------------------

                    -- IT-фахівці попереджають про поширення підроблених відео, створених за допомогою штучного інтелекту
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('підроблених')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 145
                        AND posts.tag_id && ARRAY['3'::int8, '5'::int8, '7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:31:50:
--------------------------------

                    -- IT-фахівці попереджають про поширення підроблених відео, створених за допомогою штучного інтелекту
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('відео,')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 145
                        AND posts.tag_id && ARRAY['3'::int8, '5'::int8, '7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:31:50:
--------------------------------

                    -- IT-фахівці попереджають про поширення підроблених відео, створених за допомогою штучного інтелекту
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('створених')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 145
                        AND posts.tag_id && ARRAY['3'::int8, '5'::int8, '7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:31:50:
--------------------------------

                    -- IT-фахівці попереджають про поширення підроблених відео, створених за допомогою штучного інтелекту
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('допомогою')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 145
                        AND posts.tag_id && ARRAY['3'::int8, '5'::int8, '7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:31:50:
--------------------------------

                    -- IT-фахівці попереджають про поширення підроблених відео, створених за допомогою штучного інтелекту
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('штучного')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 145
                        AND posts.tag_id && ARRAY['3'::int8, '5'::int8, '7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:31:50:
--------------------------------

                    -- IT-фахівці попереджають про поширення підроблених відео, створених за допомогою штучного інтелекту
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('інтелекту')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 145
                        AND posts.tag_id && ARRAY['3'::int8, '5'::int8, '7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:31:50:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 774 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:31:50:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 774 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:31:50:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (774) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:31:50:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1522 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:31:50:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1522 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:31:50:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1522) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:31:50:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 478 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:31:50:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 478 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:31:50:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (478) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:31:50:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 283 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:31:50:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 283 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:31:50:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (283) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:31:50:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 933 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:31:50:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 933 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:31:50:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (933) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:31:50:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '6509610da390c04b5bf86a393955779e', '141.8.188.143'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.12 21:36:44:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1294 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:36:44:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1294 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:36:44:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1294) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:36:44:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1294
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:36:44:
--------------------------------

                    -- Легендарна «Каста Мета-Баронів» незабаром вийде українською від видавництва Vovkulaka
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Легендарна')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1294
                        AND posts.tag_id && ARRAY['3'::int8, '6'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:36:44:
--------------------------------

                    -- Легендарна «Каста Мета-Баронів» незабаром вийде українською від видавництва Vovkulaka
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('«Каста')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1294
                        AND posts.tag_id && ARRAY['3'::int8, '6'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:36:44:
--------------------------------

                    -- Легендарна «Каста Мета-Баронів» незабаром вийде українською від видавництва Vovkulaka
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Мета-Баронів»')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1294
                        AND posts.tag_id && ARRAY['3'::int8, '6'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:36:44:
--------------------------------

                    -- Легендарна «Каста Мета-Баронів» незабаром вийде українською від видавництва Vovkulaka
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('незабаром')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1294
                        AND posts.tag_id && ARRAY['3'::int8, '6'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:36:44:
--------------------------------

                    -- Легендарна «Каста Мета-Баронів» незабаром вийде українською від видавництва Vovkulaka
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('українською')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1294
                        AND posts.tag_id && ARRAY['3'::int8, '6'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:36:44:
--------------------------------

                    -- Легендарна «Каста Мета-Баронів» незабаром вийде українською від видавництва Vovkulaka
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('видавництва')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1294
                        AND posts.tag_id && ARRAY['3'::int8, '6'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:36:45:
--------------------------------

                    -- Легендарна «Каста Мета-Баронів» незабаром вийде українською від видавництва Vovkulaka
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Vovkulaka')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1294
                        AND posts.tag_id && ARRAY['3'::int8, '6'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:36:45:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 117 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:36:45:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 117 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:36:45:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (117) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:36:45:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 59 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:36:45:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 59 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:36:45:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (59) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:36:45:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 282 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:36:45:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 282 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:36:45:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (282) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:36:45:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 657 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:36:45:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 657 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:36:45:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (657) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:36:45:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '1a0d36373ed7a1d578ee56dab756da62', '66.249.65.146'::inet, 'Chrome' );
--------------------------------
2020.01.12 21:40:17:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1230
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:40:17:
--------------------------------

                    -- Льодовик Купол Вавілова з рекордною швидкістю витікає в океан
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Льодовик')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1230
                        AND posts.tag_id && ARRAY['7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:40:17:
--------------------------------

                    -- Льодовик Купол Вавілова з рекордною швидкістю витікає в океан
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Вавілова')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1230
                        AND posts.tag_id && ARRAY['7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:40:17:
--------------------------------

                    -- Льодовик Купол Вавілова з рекордною швидкістю витікає в океан
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('рекордною')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1230
                        AND posts.tag_id && ARRAY['7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:40:17:
--------------------------------

                    -- Льодовик Купол Вавілова з рекордною швидкістю витікає в океан
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('швидкістю')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1230
                        AND posts.tag_id && ARRAY['7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:40:17:
--------------------------------

                    -- Льодовик Купол Вавілова з рекордною швидкістю витікає в океан
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('витікає')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1230
                        AND posts.tag_id && ARRAY['7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:40:17:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1560 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:40:17:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1560 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:40:17:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1560) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:40:17:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1124 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:40:17:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1124 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:40:17:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1124) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:40:17:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 361 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:40:17:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 361 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:40:17:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (361) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:40:17:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1329 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:40:17:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1329 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:40:17:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1329) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:40:17:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1171 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:40:17:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1171 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:40:17:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1171) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:40:17:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '2d2e8e6ab88742154eade31e44c21e75', '66.249.65.150'::inet, 'Chrome' );
--------------------------------
2020.01.12 21:40:17:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:40:19:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 
-- ORDER
ORDER BY posts.created_time DESC, posts.fixed DESC, posts.posted ASC 
-- ORDER
-- OFFSET
OFFSET 0 LIMIT 10000;
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:40:19:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1640,1639,1638,1637,1636,1635,1634,1633,1632,1631,1630,1629,1628,1627,1626,1625,1624,1623,1622,1621,1620,1619,1618,1617,1616,1615,1614,1613,1612,1611,1610,1609,1608,1607,1606,1605,1604,1603,1602,1601,1600,1599,1598,1597,1596,1595,1594,1593,1592,1591,1590,1589,1588,1587,1586,1585,1584,1583,1582,1581,1580,1579,1578,1577,1576,1575,1574,1573,1572,1571,1570,1569,1568,1567,1566,1565,1564,1563,1562,1561,1560,1559,1558,1557,1556,1555,1554,1553,1552,1551,1550,1549,1548,1547,1546,1545,1544,1543,1542,1541,1540,1539,1538,1537,1536,1535,1534,1533,1532,1531,1530,1529,1528,1527,1526,1525,1524,1523,1522,1521,1520,1519,1518,1517,1516,1515,1514,1513,1512,1511,1510,1509,1508,1507,1506,1505,1504,1503,1502,1501,1500,1499,1498,1497,1496,1495,1494,1493,1492,1491,1490,1489,1488,1487,1486,1485,1484,1483,1482,1481,1480,1479,1478,1477,1476,1475,1474,1473,1472,1471,1470,1469,1468,1467,1466,1465,1464,1463,1462,1461,1460,1459,1458,1457,1456,1455,1454,1453,1452,1451,1450,1449,1448,1447,1446,1445,1444,1443,1442,1441,1440,1439,1438,1437,1436,1435,1434,1433,1432,1431,1430,1429,1428,1427,1426,1425,1424,1423,1422,1421,1420,1419,1418,1417,1416,1415,1414,1413,1412,1411,1410,1409,1408,1407,1406,1405,1404,1403,1402,1401,1400,1399,1398,1397,1396,1395,1394,1393,1392,1391,1390,1389,1388,1387,1386,1385,1384,1383,1382,1381,1380,1379,1378,1377,1376,1375,1374,1373,1372,1371,1370,1369,1368,1367,1366,1365,1364,1363,1362,1361,1360,1359,1358,1357,1356,1355,1354,1353,1352,1351,1350,1349,1348,1347,1346,1345,1344,1343,1342,1341,1340,1339,1338,1337,1336,1335,1334,1333,1332,1331,1330,1329,1328,1327,1326,1325,1324,1323,1322,1321,1320,1319,1318,1317,1316,1315,1314,1313,1312,1311,1310,1309,1308,1307,1306,1305,1304,1303,1302,1301,1300,1299,1298,1297,1296,1295,1294,1293,1292,1291,1290,1289,1288,1287,1286,1285,1284,1283,1282,1281,1280,1279,1278,1277,1276,1275,1274,1273,1272,1271,1270,1269,1268,1267,1266,1265,1264,1263,1262,1261,1260,1259,1258,1257,1256,1255,1254,1253,1252,1251,1250,1249,1248,1247,1246,1245,1244,1243,1242,1241,1240,1239,1238,1237,1236,1235,1234,1233,1232,1231,1230,1229,1228,1227,1226,1225,1224,1223,1222,1221,1220,1219,1218,1217,1216,1215,1214,1213,1212,1211,1210,1209,1208,1207,1206,1205,1204,1203,1202,1201,1200,1199,1198,1197,1196,1195,1194,1193,1192,1191,1190,1189,1188,1187,1186,1185,1184,1183,1182,1181,1180,1179,1178,1177,1176,1175,1174,1173,1172,1171,1170,1169,1168,1167,1166,1165,1164,1163,1162,1161,1160,1159,1158,1157,1156,1155,1154,1153,1152,1151,1150,1149,1148,1147,1146,1145,1144,1143,1142,1141,1140,1139,1138,1137,1136,1135,1134,1133,1132,1131,1130,1129,1128,1127,1126,1125,1124,1123,1122,1121,1120,1119,1118,1117,1116,1115,1114,1113,1112,1111,1110,1109,1108,1107,1106,1105,1104,1103,1102,1101,1100,1099,1098,1097,1096,1095,1094,1093,1092,1091,1090,1089,1088,1087,1086,1085,1084,1083,1082,1081,1080,1079,1078,1077,1076,1075,1074,1073,1072,1071,1070,1069,1068,1067,1066,1065,1064,1063,1062,1061,1060,1059,1058,1057,1056,1055,1054,1053,1052,1051,1050,1049,1048,1047,1046,1045,1044,1043,1042,1041,1040,1039,1038,1037,1036,1035,1034,1033,1032,1031,1030,1029,1028,1027,1026,1025,1024,1023,1022,1021,1020,1019,1018,1017,1016,1015,1014,1013,1012,1011,1010,1009,1008,1007,1006,1005,1004,1003,1002,1001,1000,999,998,997,996,995,994,993,992,991,990,989,988,987,986,985,984,983,982,981,980,979,978,977,976,975,974,973,972,971,970,969,968,967,966,965,964,963,962,961,960,959,958,957,956,955,954,953,952,951,950,949,948,947,946,945,944,943,942,941,940,939,938,937,936,935,934,933,932,931,930,929,928,927,926,925,924,923,922,921,920,919,918,917,916,915,914,913,912,911,910,909,908,907,906,905,904,903,902,901,900,899,898,897,896,895,894,893,892,891,890,889,888,887,886,885,884,883,882,881,880,879,878,877,876,875,874,873,872,871,870,869,868,867,866,865,864,863,862,861,860,859,858,857,856,855,854,853,852,851,850,849,848,847,846,845,844,843,842,841,840,839,838,837,836,835,834,833,832,831,830,829,828,827,826,825,824,823,822,821,820,819,818,817,816,815,814,813,812,811,810,809,808,807,806,805,804,803,802,801,800,799,798,797,796,795,794,793,792,791,790,789,788,787,786,785,784,783,782,781,780,779,778,777,776,775,774,773,772,771,770,769,768,767,766,765,764,763,762,761,760,759,758,757,756,755,754,753,752,751,750,749,748,747,746,745,744,743,742,741,740,739,738,737,736,735,734,733,732,731,730,729,728,727,726,725,724,723,722,721,719,718,716,715,714,712,708,703,702,701,700,699,698,697,696,695,694,693,692,691,690,689,688,687,686,685,678,677,675,674,673,672,671,670,669,667,666,665,664,663,661,658,657,656,653,647,646,645,644,639,638,637,636,635,632,630,629,627,626,623,620,619,618,617,616,615,614,611,610,609,607,606,605,604,603,602,601,598,597,595,593,591,590,589,588,587,586,585,584,583,582,581,580,579,578,577,576,574,572,571,570,569,567,562,559,558,557,556,555,554,553,551,550,548,546,545,542,537,535,534,533,532,531,529,528,526,525,524,523,522,521,520,519,513,511,510,509,508,507,506,505,504,503,500,497,495,493,489,487,485,484,483,482,481,480,479,478,477,476,475,474,473,472,471,470,469,468,467,466,465,464,463,460,457,455,452,451,441,440,439,438,437,436,435,434,433,432,431,428,427,425,423,422,421,420,419,418,417,414,411,410,408,407,405,404,400,399,398,396,395,394,393,390,389,388,386,385,379,378,375,374,372,370,369,368,367,366,364,362,361,359,356,355,354,353,348,347,346,345,344,343,342,341,340,339,338,337,336,334,333,332,329,327,326,324,319,318,317,316,314,310,307,304,302,300,299,298,297,296,295,294,293,292,291,290,286,285,283,282,280,274,273,272,271,270,269,268,267,266,265,264,261,257,255,249,248,245,241,240,239,238,237,236,235,234,233,231,230,227,226,225,224,223,222,221,220,219,218,214,213,211,210,207,203,201,199,198,197,196,195,194,193,192,191,190,189,188,187,186,185,184,183,182,181,180,179,178,177,176,175,174,173,172,171,170,169,168,167,166,165,164,163,162,161,160,159,158,157,156,155,154,153,152,151,150,149,148,147,145,139,138,137,136,135,134,133,132,131,130,129,128,127,126,125,124,123,122,121,120,119,118,117,116,115,114,113,112,111,110,109,108,107,106,105,104,103,102,101,100,99,98,97,96,95,94,93,92,91,90,89,88,87,86,85,84,83,82,81,80,79,78,77,76,75,74,73,72,71,70,69,68,67,66,65,64,63,62,61,60,59,56,55,54,53,52,51,50,49,48,47,46,45,44,43,42,41,40,39,38,37,36,35,34,33,24,23,22,21,20,19,18,17,16) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:44:08:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1381
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:44:08:
--------------------------------

                    -- Блогер-інженер навчив пилосос літати, і це крутий лайфхак для тих, хто хоче робити прибирання не встаючи з ліжка
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Блогер-інженер')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1381
                        AND posts.tag_id && ARRAY['3'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:44:09:
--------------------------------

                    -- Блогер-інженер навчив пилосос літати, і це крутий лайфхак для тих, хто хоче робити прибирання не встаючи з ліжка
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('навчив')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1381
                        AND posts.tag_id && ARRAY['3'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:44:09:
--------------------------------

                    -- Блогер-інженер навчив пилосос літати, і це крутий лайфхак для тих, хто хоче робити прибирання не встаючи з ліжка
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('пилосос')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1381
                        AND posts.tag_id && ARRAY['3'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:44:09:
--------------------------------

                    -- Блогер-інженер навчив пилосос літати, і це крутий лайфхак для тих, хто хоче робити прибирання не встаючи з ліжка
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('літати,')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1381
                        AND posts.tag_id && ARRAY['3'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:44:09:
--------------------------------

                    -- Блогер-інженер навчив пилосос літати, і це крутий лайфхак для тих, хто хоче робити прибирання не встаючи з ліжка
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('крутий')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1381
                        AND posts.tag_id && ARRAY['3'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:44:09:
--------------------------------

                    -- Блогер-інженер навчив пилосос літати, і це крутий лайфхак для тих, хто хоче робити прибирання не встаючи з ліжка
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('лайфхак')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1381
                        AND posts.tag_id && ARRAY['3'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:44:09:
--------------------------------

                    -- Блогер-інженер навчив пилосос літати, і це крутий лайфхак для тих, хто хоче робити прибирання не встаючи з ліжка
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('робити')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1381
                        AND posts.tag_id && ARRAY['3'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:44:09:
--------------------------------

                    -- Блогер-інженер навчив пилосос літати, і це крутий лайфхак для тих, хто хоче робити прибирання не встаючи з ліжка
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('прибирання')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1381
                        AND posts.tag_id && ARRAY['3'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:44:09:
--------------------------------

                    -- Блогер-інженер навчив пилосос літати, і це крутий лайфхак для тих, хто хоче робити прибирання не встаючи з ліжка
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('встаючи')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1381
                        AND posts.tag_id && ARRAY['3'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:44:09:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 48 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:44:09:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 48 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:44:09:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (48) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:44:09:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 213 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:44:09:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 213 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:44:09:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (213) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:44:09:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 211 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:44:09:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 211 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:44:09:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (211) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:44:09:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1308 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:44:09:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1308 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:44:09:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1308) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:44:09:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 463 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:44:09:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 463 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:44:09:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (463) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:44:09:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( 'bbc73cf92656b27bd1280a5dceee4a98', '66.249.65.148'::inet, 'Chrome' );
--------------------------------
2020.01.12 21:50:54:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	ARRAY['7'::int8] && posts.tag_id 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:50:54:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	ARRAY['7'::int8] && posts.tag_id 
-- ORDER
ORDER BY posts.created_time DESC, posts.fixed DESC, posts.posted ASC 
-- ORDER
-- OFFSET
OFFSET 290 LIMIT 10;
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:50:54:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (806,805,801,800,797,795,793,792,786,781) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:50:54:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( 'f88abc3acbf5ba68791a843ba75151ee', '100.43.85.116'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.12 21:52:38:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1436 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:52:38:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1436 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:52:38:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1436) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:52:38:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1436
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:52:38:
--------------------------------

                    -- Альтернативні джерела енергії: типи, переваги, застосування
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Альтернативні')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1436
                        AND posts.tag_id && ARRAY['8'::int8, '12'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:52:38:
--------------------------------

                    -- Альтернативні джерела енергії: типи, переваги, застосування
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('джерела')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1436
                        AND posts.tag_id && ARRAY['8'::int8, '12'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:52:38:
--------------------------------

                    -- Альтернативні джерела енергії: типи, переваги, застосування
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('енергії:')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1436
                        AND posts.tag_id && ARRAY['8'::int8, '12'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:52:38:
--------------------------------

                    -- Альтернативні джерела енергії: типи, переваги, застосування
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('переваги,')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1436
                        AND posts.tag_id && ARRAY['8'::int8, '12'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:52:38:
--------------------------------

                    -- Альтернативні джерела енергії: типи, переваги, застосування
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('застосування')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1436
                        AND posts.tag_id && ARRAY['8'::int8, '12'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:52:38:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1432 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:52:38:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1432 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:52:38:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1432) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:52:38:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 408 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:52:38:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 408 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:52:38:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (408) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:52:38:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 542 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:52:38:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 542 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:52:38:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (542) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:52:38:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 136 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:52:38:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 136 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:52:38:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (136) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:52:38:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 166 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:52:38:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 166 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:52:38:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (166) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:52:38:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( 'bbc73cf92656b27bd1280a5dceee4a98', '66.249.65.148'::inet, 'Chrome' );
--------------------------------
2020.01.12 21:52:56:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1061 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:52:56:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1061 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:52:56:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1061) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:52:56:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1061
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:52:56:
--------------------------------

                    -- В Ефіопії знайдено сліди найбільшої імперії Східної Африки
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Ефіопії')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1061
                        AND posts.tag_id && ARRAY['8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:52:56:
--------------------------------

                    -- В Ефіопії знайдено сліди найбільшої імперії Східної Африки
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('знайдено')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1061
                        AND posts.tag_id && ARRAY['8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:52:56:
--------------------------------

                    -- В Ефіопії знайдено сліди найбільшої імперії Східної Африки
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('найбільшої')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1061
                        AND posts.tag_id && ARRAY['8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:52:56:
--------------------------------

                    -- В Ефіопії знайдено сліди найбільшої імперії Східної Африки
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('імперії')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1061
                        AND posts.tag_id && ARRAY['8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:52:56:
--------------------------------

                    -- В Ефіопії знайдено сліди найбільшої імперії Східної Африки
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Східної')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1061
                        AND posts.tag_id && ARRAY['8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:52:57:
--------------------------------

                    -- В Ефіопії знайдено сліди найбільшої імперії Східної Африки
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Африки')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1061
                        AND posts.tag_id && ARRAY['8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:52:57:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 108 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:52:57:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 108 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:52:57:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (108) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:52:57:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1481 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:52:57:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1481 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:52:57:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1481) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:52:57:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1229 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:52:57:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1229 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:52:57:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1229) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:52:57:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 485 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:52:57:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 485 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:52:57:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (485) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:52:57:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '31e5052d8386f7afe4c8c2ec3d2f157c', '5.255.250.13'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.12 21:53:20:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 135 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:53:20:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 135 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:53:20:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (135) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:53:20:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 135
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:53:20:
--------------------------------

                    -- Клітини людського мозку розвиваються повільніше, ніж в інших приматів
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Клітини')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 135
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:53:20:
--------------------------------

                    -- Клітини людського мозку розвиваються повільніше, ніж в інших приматів
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('людського')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 135
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:53:20:
--------------------------------

                    -- Клітини людського мозку розвиваються повільніше, ніж в інших приматів
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('розвиваються')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 135
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:53:20:
--------------------------------

                    -- Клітини людського мозку розвиваються повільніше, ніж в інших приматів
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('повільніше,')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 135
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:53:20:
--------------------------------

                    -- Клітини людського мозку розвиваються повільніше, ніж в інших приматів
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('приматів')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 135
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:53:20:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 988 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:53:20:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 988 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:53:20:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (988) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:53:20:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1342 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:53:20:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1342 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:53:20:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1342) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:53:20:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 71 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:53:20:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 71 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:53:20:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (71) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:53:20:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 731 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:53:20:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 731 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:53:20:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (731) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:53:20:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 903 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:53:20:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 903 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:53:20:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (903) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:53:20:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( 'a24b55240a84b35c0d72ba8fe0b7a883', '77.88.47.43'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.12 21:53:22:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '56e0714d2e94a37018eabe575566ec77', '5.255.250.118'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.12 21:57:04:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1182 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:57:04:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1182 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:57:04:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1182) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:57:04:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1182
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:57:04:
--------------------------------

                    -- OPPO інвестує $ 7 млрд у розбудову екосистеми смарт-пристроїв
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('інвестує')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1182
                        AND posts.tag_id && ARRAY['8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:57:04:
--------------------------------

                    -- OPPO інвестує $ 7 млрд у розбудову екосистеми смарт-пристроїв
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('розбудову')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1182
                        AND posts.tag_id && ARRAY['8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:57:04:
--------------------------------

                    -- OPPO інвестує $ 7 млрд у розбудову екосистеми смарт-пристроїв
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('екосистеми')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1182
                        AND posts.tag_id && ARRAY['8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:57:04:
--------------------------------

                    -- OPPO інвестує $ 7 млрд у розбудову екосистеми смарт-пристроїв
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('смарт-пристроїв')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1182
                        AND posts.tag_id && ARRAY['8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:57:04:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1183 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:57:04:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1183 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:57:04:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1183) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:57:04:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1350 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:57:04:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1350 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:57:04:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1350) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:57:04:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1133 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:57:04:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1133 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:57:04:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1133) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:57:04:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1068 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:57:04:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1068 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:57:04:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1068) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:57:04:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1101 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:57:04:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1101 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 21:57:04:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1101) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 21:57:04:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( 'e44c5cd6614d9ed04c322ba8436e14ab', '5.255.250.165'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.12 22:10:06:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1310 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:10:06:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1310 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:10:06:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1310) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:10:06:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1310
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:10:06:
--------------------------------

                    -- В Китаї вирішили перенести запуск "штучного сонця" на 2020 рік
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('вирішили')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1310
                        AND posts.tag_id && ARRAY['7'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:10:06:
--------------------------------

                    -- В Китаї вирішили перенести запуск "штучного сонця" на 2020 рік
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('перенести')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1310
                        AND posts.tag_id && ARRAY['7'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:10:06:
--------------------------------

                    -- В Китаї вирішили перенести запуск "штучного сонця" на 2020 рік
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('запуск')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1310
                        AND posts.tag_id && ARRAY['7'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:10:06:
--------------------------------

                    -- В Китаї вирішили перенести запуск "штучного сонця" на 2020 рік
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('"штучного')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1310
                        AND posts.tag_id && ARRAY['7'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:10:06:
--------------------------------

                    -- В Китаї вирішили перенести запуск "штучного сонця" на 2020 рік
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('сонця"')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1310
                        AND posts.tag_id && ARRAY['7'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:10:06:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1405 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:10:06:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1405 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:10:06:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1405) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:10:06:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 265 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:10:06:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 265 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:10:06:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (265) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:10:06:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1515 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:10:06:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1515 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:10:06:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1515) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:10:06:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( 'a24b55240a84b35c0d72ba8fe0b7a883', '77.88.47.43'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.12 22:10:06:
--------------------------------
SELECT count( DISTINCT ua_hash ) as count FROM visit_counter WHERE date_trunc('day', ts) = date_trunc('day', now());
--------------------------------
2020.01.12 22:10:12:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	ARRAY['3'::int8] && posts.tag_id 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:10:12:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	ARRAY['3'::int8] && posts.tag_id 
-- ORDER
ORDER BY posts.created_time DESC, posts.fixed DESC, posts.posted ASC 
-- ORDER
-- OFFSET
OFFSET 30 LIMIT 10;
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:10:12:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1565,1561,1556,1547,1546,1544,1542,1540,1539,1536) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:10:12:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '169baed0a03081f453aca5daea591304', '141.8.188.167'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.12 22:13:44:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1172 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:13:44:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1172 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:13:44:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1172) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:13:44:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1172
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:13:44:
--------------------------------

                    -- Подробиці Resident Evil 3 Remake від Famitsu
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Подробиці')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1172
                        AND posts.tag_id && ARRAY['3'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:13:44:
--------------------------------

                    -- Подробиці Resident Evil 3 Remake від Famitsu
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Resident')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1172
                        AND posts.tag_id && ARRAY['3'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:13:44:
--------------------------------

                    -- Подробиці Resident Evil 3 Remake від Famitsu
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Remake')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1172
                        AND posts.tag_id && ARRAY['3'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:13:44:
--------------------------------

                    -- Подробиці Resident Evil 3 Remake від Famitsu
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Famitsu')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1172
                        AND posts.tag_id && ARRAY['3'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:13:44:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 855 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:13:44:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 855 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:13:44:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (855) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:13:44:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 617 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:13:44:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 617 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:13:44:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (617) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:13:44:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 843 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:13:44:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 843 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:13:44:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (843) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:13:44:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1586 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:13:44:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1586 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:13:44:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1586) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:13:44:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1039 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:13:44:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1039 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:13:44:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1039) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:13:44:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '1a0d36373ed7a1d578ee56dab756da62', '66.249.65.146'::inet, 'Chrome' );
--------------------------------
2020.01.12 22:25:24:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1073 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:25:24:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1073 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:25:24:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1073) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:25:24:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1073
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:25:24:
--------------------------------

                    -- Google Maps: компанія розказала про особливості створення карт
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Google')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1073
                        AND posts.tag_id && ARRAY['0'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:25:24:
--------------------------------

                    -- Google Maps: компанія розказала про особливості створення карт
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('компанія')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1073
                        AND posts.tag_id && ARRAY['0'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:25:24:
--------------------------------

                    -- Google Maps: компанія розказала про особливості створення карт
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('розказала')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1073
                        AND posts.tag_id && ARRAY['0'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:25:24:
--------------------------------

                    -- Google Maps: компанія розказала про особливості створення карт
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('особливості')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1073
                        AND posts.tag_id && ARRAY['0'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:25:24:
--------------------------------

                    -- Google Maps: компанія розказала про особливості створення карт
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('створення')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1073
                        AND posts.tag_id && ARRAY['0'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:25:24:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 834 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:25:24:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 834 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:25:24:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (834) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:25:24:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1042 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:25:24:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1042 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:25:24:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1042) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:25:24:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1306 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:25:24:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1306 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:25:24:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1306) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:25:24:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1462 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:25:24:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1462 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:25:24:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1462) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:25:24:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1181 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:25:24:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1181 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:25:24:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1181) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:25:24:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '49b7e15d5ffd2eadcfe046639908f1f7', '93.158.161.12'::inet, 'Chrome' );
--------------------------------
2020.01.12 22:25:45:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	ARRAY['8'::int8] && posts.tag_id 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:25:45:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	ARRAY['8'::int8] && posts.tag_id 
-- ORDER
ORDER BY posts.created_time DESC, posts.fixed DESC, posts.posted ASC 
-- ORDER
-- OFFSET
OFFSET 20 LIMIT 10;
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:25:45:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1607,1602,1599,1595,1594,1593,1590,1588,1583,1582) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:25:45:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '22ec8ebad132cf36c895750b4485e502', '100.43.85.116'::inet, 'Chrome' );
--------------------------------
2020.01.12 22:26:13:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 87 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:26:13:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 87 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:26:13:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (87) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:26:13:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 87
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:26:13:
--------------------------------

                    -- Інженер NASA вигадав двигун для космічних подорожей без пального
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Інженер')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 87
                        AND posts.tag_id && ARRAY['3'::int8, '6'::int8, '7'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:26:13:
--------------------------------

                    -- Інженер NASA вигадав двигун для космічних подорожей без пального
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('вигадав')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 87
                        AND posts.tag_id && ARRAY['3'::int8, '6'::int8, '7'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:26:13:
--------------------------------

                    -- Інженер NASA вигадав двигун для космічних подорожей без пального
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('двигун')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 87
                        AND posts.tag_id && ARRAY['3'::int8, '6'::int8, '7'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:26:13:
--------------------------------

                    -- Інженер NASA вигадав двигун для космічних подорожей без пального
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('космічних')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 87
                        AND posts.tag_id && ARRAY['3'::int8, '6'::int8, '7'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:26:14:
--------------------------------

                    -- Інженер NASA вигадав двигун для космічних подорожей без пального
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('подорожей')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 87
                        AND posts.tag_id && ARRAY['3'::int8, '6'::int8, '7'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:26:14:
--------------------------------

                    -- Інженер NASA вигадав двигун для космічних подорожей без пального
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('пального')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 87
                        AND posts.tag_id && ARRAY['3'::int8, '6'::int8, '7'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:26:14:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 718 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:26:14:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 718 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:26:14:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (718) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:26:14:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 404 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:26:14:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 404 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:26:14:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (404) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:26:14:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 39 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:26:14:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 39 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:26:14:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (39) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:26:14:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1140 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:26:14:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1140 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:26:14:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1140) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:26:14:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 167 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:26:14:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 167 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:26:14:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (167) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:26:14:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '9aa1a269534ea11c9fda025da7abb5fc', '141.8.188.141'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.12 22:44:10:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 471 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:44:10:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 471 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:44:10:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (471) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:44:10:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 471
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:44:10:
--------------------------------

                    -- Вчені встановили, чому гикавка важлива для новонароджених
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('встановили,')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 471
                        AND posts.tag_id && ARRAY['7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:44:11:
--------------------------------

                    -- Вчені встановили, чому гикавка важлива для новонароджених
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('гикавка')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 471
                        AND posts.tag_id && ARRAY['7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:44:11:
--------------------------------

                    -- Вчені встановили, чому гикавка важлива для новонароджених
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('важлива')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 471
                        AND posts.tag_id && ARRAY['7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:44:11:
--------------------------------

                    -- Вчені встановили, чому гикавка важлива для новонароджених
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('новонароджених')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 471
                        AND posts.tag_id && ARRAY['7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:44:11:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 72 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:44:11:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 72 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:44:11:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (72) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:44:11:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1611 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:44:11:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1611 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:44:11:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1611) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:44:11:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 691 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:44:11:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 691 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:44:11:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (691) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:44:11:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1322 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:44:11:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1322 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:44:11:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1322) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:44:11:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 423 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:44:11:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 423 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:44:11:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (423) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:44:11:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( 'f2c875667d3069be72561f912183c2e9', '100.43.91.104'::inet, 'Chrome' );
--------------------------------
2020.01.12 22:50:52:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1176 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:50:53:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1176 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:50:53:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1176) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:50:53:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1176
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:50:53:
--------------------------------

                    -- Експерти з кібербезпеки назвали найгірші паролі 2019 року
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Експерти')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1176
                        AND posts.tag_id && ARRAY['3'::int8, '5'::int8, '7'::int8, '8'::int8, '11'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:50:53:
--------------------------------

                    -- Експерти з кібербезпеки назвали найгірші паролі 2019 року
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('кібербезпеки')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1176
                        AND posts.tag_id && ARRAY['3'::int8, '5'::int8, '7'::int8, '8'::int8, '11'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:50:53:
--------------------------------

                    -- Експерти з кібербезпеки назвали найгірші паролі 2019 року
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('назвали')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1176
                        AND posts.tag_id && ARRAY['3'::int8, '5'::int8, '7'::int8, '8'::int8, '11'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:50:53:
--------------------------------

                    -- Експерти з кібербезпеки назвали найгірші паролі 2019 року
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('найгірші')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1176
                        AND posts.tag_id && ARRAY['3'::int8, '5'::int8, '7'::int8, '8'::int8, '11'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:50:53:
--------------------------------

                    -- Експерти з кібербезпеки назвали найгірші паролі 2019 року
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('паролі')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1176
                        AND posts.tag_id && ARRAY['3'::int8, '5'::int8, '7'::int8, '8'::int8, '11'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:50:53:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1046 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:50:53:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1046 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:50:53:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1046) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:50:53:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1511 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:50:53:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1511 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:50:53:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1511) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:50:53:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1221 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:50:53:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1221 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:50:53:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1221) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:50:53:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1099 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:50:53:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1099 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:50:53:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1099) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:50:53:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '6509610da390c04b5bf86a393955779e', '141.8.188.143'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.12 22:51:24:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 513 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:51:24:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 513 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:51:24:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (513) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:51:24:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 513
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:51:24:
--------------------------------

                    -- Прагнення вижити виведе штучний інтелект на новий рівень
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Прагнення')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 513
                        AND posts.tag_id && ARRAY['6'::int8, '7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:51:24:
--------------------------------

                    -- Прагнення вижити виведе штучний інтелект на новий рівень
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('вижити')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 513
                        AND posts.tag_id && ARRAY['6'::int8, '7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:51:24:
--------------------------------

                    -- Прагнення вижити виведе штучний інтелект на новий рівень
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('виведе')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 513
                        AND posts.tag_id && ARRAY['6'::int8, '7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:51:24:
--------------------------------

                    -- Прагнення вижити виведе штучний інтелект на новий рівень
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('штучний')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 513
                        AND posts.tag_id && ARRAY['6'::int8, '7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:51:24:
--------------------------------

                    -- Прагнення вижити виведе штучний інтелект на новий рівень
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('інтелект')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 513
                        AND posts.tag_id && ARRAY['6'::int8, '7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:51:24:
--------------------------------

                    -- Прагнення вижити виведе штучний інтелект на новий рівень
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('рівень')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 513
                        AND posts.tag_id && ARRAY['6'::int8, '7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:51:24:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 197 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:51:24:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 197 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:51:24:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (197) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:51:24:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 696 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:51:24:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 696 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:51:24:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (696) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:51:24:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '7d9425316777519dc461fed427d38a73', '93.158.166.132'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.12 22:59:25:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 843
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:59:25:
--------------------------------

                    -- А ось і постер рімейку Resident Evil 3. Залишилося дочекатися анонсу
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('постер')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 843
                        AND posts.tag_id && ARRAY['3'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:59:25:
--------------------------------

                    -- А ось і постер рімейку Resident Evil 3. Залишилося дочекатися анонсу
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('рімейку')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 843
                        AND posts.tag_id && ARRAY['3'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:59:25:
--------------------------------

                    -- А ось і постер рімейку Resident Evil 3. Залишилося дочекатися анонсу
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Resident')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 843
                        AND posts.tag_id && ARRAY['3'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:59:25:
--------------------------------

                    -- А ось і постер рімейку Resident Evil 3. Залишилося дочекатися анонсу
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Залишилося')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 843
                        AND posts.tag_id && ARRAY['3'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:59:25:
--------------------------------

                    -- А ось і постер рімейку Resident Evil 3. Залишилося дочекатися анонсу
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('дочекатися')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 843
                        AND posts.tag_id && ARRAY['3'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:59:25:
--------------------------------

                    -- А ось і постер рімейку Resident Evil 3. Залишилося дочекатися анонсу
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('анонсу')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 843
                        AND posts.tag_id && ARRAY['3'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:59:25:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 978 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:59:25:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 978 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:59:25:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (978) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:59:25:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1064 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:59:25:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1064 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:59:25:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1064) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:59:25:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( 'f2c875667d3069be72561f912183c2e9', '100.43.91.104'::inet, 'Chrome' );
--------------------------------
2020.01.12 22:59:50:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1386 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:59:50:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1386 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:59:50:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1386) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:59:50:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1386
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:59:50:
--------------------------------

                    -- У Китаї випробували дрон на спирту. Він провів у повітрі 12 годин
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('випробували')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1386
                        AND posts.tag_id && ARRAY['8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:59:50:
--------------------------------

                    -- У Китаї випробували дрон на спирту. Він провів у повітрі 12 годин
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('спирту.')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1386
                        AND posts.tag_id && ARRAY['8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:59:50:
--------------------------------

                    -- У Китаї випробували дрон на спирту. Він провів у повітрі 12 годин
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('провів')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1386
                        AND posts.tag_id && ARRAY['8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:59:50:
--------------------------------

                    -- У Китаї випробували дрон на спирту. Він провів у повітрі 12 годин
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('повітрі')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1386
                        AND posts.tag_id && ARRAY['8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:59:50:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 221 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:59:50:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 221 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:59:50:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (221) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:59:50:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1103 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:59:50:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1103 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:59:50:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1103) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:59:50:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1384 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:59:50:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1384 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:59:50:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1384) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:59:50:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 432 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:59:50:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 432 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:59:50:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (432) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:59:50:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 675 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:59:50:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 675 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:59:50:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (675) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:59:50:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '4f2dd8ec4462d982bafef2c8cb5cc4b6', '5.255.250.22'::inet, 'Chrome' );
--------------------------------
2020.01.12 22:59:53:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 572 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:59:54:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 572 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:59:54:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (572) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:59:54:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 572
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:59:54:
--------------------------------

                    -- Звички, які завдають шкоди навколишньому середовищу
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Звички,')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 572
                        AND posts.tag_id && ARRAY['6'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:59:54:
--------------------------------

                    -- Звички, які завдають шкоди навколишньому середовищу
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('завдають')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 572
                        AND posts.tag_id && ARRAY['6'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:59:54:
--------------------------------

                    -- Звички, які завдають шкоди навколишньому середовищу
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('навколишньому')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 572
                        AND posts.tag_id && ARRAY['6'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:59:54:
--------------------------------

                    -- Звички, які завдають шкоди навколишньому середовищу
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('середовищу')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 572
                        AND posts.tag_id && ARRAY['6'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:59:54:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1383 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:59:54:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1383 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:59:54:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1383) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:59:54:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1452 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:59:54:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1452 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:59:54:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1452) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:59:54:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1240 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:59:54:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1240 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:59:54:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1240) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:59:54:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 185 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:59:54:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 185 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:59:54:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (185) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:59:54:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1134 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:59:54:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1134 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 22:59:54:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1134) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 22:59:55:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '2eb20d8991e46c39ae2c53c0405becce', '93.158.166.136'::inet, 'Chrome' );
--------------------------------
2020.01.12 23:00:52:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 840 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 23:00:52:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 840 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 23:00:52:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (840) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 23:00:52:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 840
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.12 23:00:52:
--------------------------------

                    -- Універсальний 4K монітор – Огляд Philips 326M6VJRMB
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Універсальний')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 840
                        AND posts.tag_id && ARRAY['0'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 23:00:52:
--------------------------------

                    -- Універсальний 4K монітор – Огляд Philips 326M6VJRMB
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('монітор')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 840
                        AND posts.tag_id && ARRAY['0'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 23:00:52:
--------------------------------

                    -- Універсальний 4K монітор – Огляд Philips 326M6VJRMB
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Philips')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 840
                        AND posts.tag_id && ARRAY['0'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 23:00:52:
--------------------------------

                    -- Універсальний 4K монітор – Огляд Philips 326M6VJRMB
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('326M6VJRMB')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 840
                        AND posts.tag_id && ARRAY['0'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 23:00:52:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 465 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 23:00:52:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 465 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 23:00:52:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (465) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 23:00:52:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( 'f95d434096c48717bb894e301e9b4f49', '77.88.47.80'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.12 23:00:52:
--------------------------------
SELECT count( DISTINCT ua_hash ) as count FROM visit_counter WHERE date_trunc('day', ts) = date_trunc('day', now());
--------------------------------
2020.01.12 23:02:02:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1183
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.12 23:02:02:
--------------------------------

                    -- Apple, Google і Amazon займуться розробкою єдиного стандарту для «розумного» дому
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Apple,')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1183
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 23:02:02:
--------------------------------

                    -- Apple, Google і Amazon займуться розробкою єдиного стандарту для «розумного» дому
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Google')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1183
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 23:02:02:
--------------------------------

                    -- Apple, Google і Amazon займуться розробкою єдиного стандарту для «розумного» дому
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Amazon')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1183
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 23:02:02:
--------------------------------

                    -- Apple, Google і Amazon займуться розробкою єдиного стандарту для «розумного» дому
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('займуться')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1183
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 23:02:02:
--------------------------------

                    -- Apple, Google і Amazon займуться розробкою єдиного стандарту для «розумного» дому
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('розробкою')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1183
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 23:02:02:
--------------------------------

                    -- Apple, Google і Amazon займуться розробкою єдиного стандарту для «розумного» дому
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('єдиного')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1183
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 23:02:03:
--------------------------------

                    -- Apple, Google і Amazon займуться розробкою єдиного стандарту для «розумного» дому
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('стандарту')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1183
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 23:02:03:
--------------------------------

                    -- Apple, Google і Amazon займуться розробкою єдиного стандарту для «розумного» дому
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('«розумного»')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1183
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 23:02:03:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 953 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 23:02:03:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 953 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 23:02:03:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (953) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 23:02:03:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 875 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 23:02:03:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 875 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 23:02:03:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (875) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 23:02:03:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1607 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 23:02:03:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1607 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 23:02:03:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1607) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 23:02:03:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 369 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 23:02:03:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 369 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 23:02:03:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (369) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 23:02:03:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 616 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 23:02:03:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 616 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 23:02:03:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (616) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 23:02:03:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( 'e44c5cd6614d9ed04c322ba8436e14ab', '5.255.250.165'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.12 23:18:28:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 778
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.12 23:18:28:
--------------------------------

                    -- У Дніпрі показали, де випробовуватимуть космічні апарати (фото)
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Дніпрі')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 778
                        AND posts.tag_id && ARRAY['3'::int8, '6'::int8, '7'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 23:18:28:
--------------------------------

                    -- У Дніпрі показали, де випробовуватимуть космічні апарати (фото)
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('показали,')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 778
                        AND posts.tag_id && ARRAY['3'::int8, '6'::int8, '7'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 23:18:29:
--------------------------------

                    -- У Дніпрі показали, де випробовуватимуть космічні апарати (фото)
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('випробовуватимуть')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 778
                        AND posts.tag_id && ARRAY['3'::int8, '6'::int8, '7'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 23:18:29:
--------------------------------

                    -- У Дніпрі показали, де випробовуватимуть космічні апарати (фото)
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('космічні')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 778
                        AND posts.tag_id && ARRAY['3'::int8, '6'::int8, '7'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 23:18:29:
--------------------------------

                    -- У Дніпрі показали, де випробовуватимуть космічні апарати (фото)
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('апарати')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 778
                        AND posts.tag_id && ARRAY['3'::int8, '6'::int8, '7'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 23:18:29:
--------------------------------

                    -- У Дніпрі показали, де випробовуватимуть космічні апарати (фото)
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('(фото)')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 778
                        AND posts.tag_id && ARRAY['3'::int8, '6'::int8, '7'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 23:18:29:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 219 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 23:18:29:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 219 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 23:18:29:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (219) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 23:18:29:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 70 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 23:18:29:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 70 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 23:18:29:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (70) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 23:18:29:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 785 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 23:18:29:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 785 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 23:18:29:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (785) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 23:18:29:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 749 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 23:18:29:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 749 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 23:18:29:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (749) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 23:18:29:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '8befa76e7b3f100a2bc0917e3fcd2ea2', '100.43.91.104'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.12 23:18:38:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 635 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 23:18:38:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 635 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 23:18:38:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (635) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 23:18:38:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 635
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.12 23:18:38:
--------------------------------

                    -- Неймовірні проекти Ілона Маска, які змінять наше життя назавжди
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Неймовірні')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 635
                        AND posts.tag_id && ARRAY['6'::int8, '7'::int8, '8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 23:18:38:
--------------------------------

                    -- Неймовірні проекти Ілона Маска, які змінять наше життя назавжди
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('проекти')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 635
                        AND posts.tag_id && ARRAY['6'::int8, '7'::int8, '8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 23:18:39:
--------------------------------

                    -- Неймовірні проекти Ілона Маска, які змінять наше життя назавжди
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Маска,')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 635
                        AND posts.tag_id && ARRAY['6'::int8, '7'::int8, '8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 23:18:39:
--------------------------------

                    -- Неймовірні проекти Ілона Маска, які змінять наше життя назавжди
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('змінять')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 635
                        AND posts.tag_id && ARRAY['6'::int8, '7'::int8, '8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 23:18:39:
--------------------------------

                    -- Неймовірні проекти Ілона Маска, які змінять наше життя назавжди
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('назавжди')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 635
                        AND posts.tag_id && ARRAY['6'::int8, '7'::int8, '8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 23:18:39:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 329 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 23:18:39:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 329 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 23:18:39:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (329) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 23:18:39:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1047 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 23:18:39:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1047 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 23:18:39:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1047) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 23:18:39:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 689 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 23:18:39:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 689 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 23:18:39:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (689) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 23:18:39:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 987 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 23:18:39:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 987 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 23:18:39:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (987) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 23:18:39:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '119d34a03da9eca9832f4cd5878d5603', '5.255.250.61'::inet, 'Chrome' );
--------------------------------
2020.01.12 23:21:34:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 421 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 23:21:34:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 421 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 23:21:34:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (421) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 23:21:34:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 421
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.12 23:21:34:
--------------------------------

                    -- Вчені створили найменшу сніжинку у світі
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('створили')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 421
                        AND posts.tag_id && ARRAY['7'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 23:21:35:
--------------------------------

                    -- Вчені створили найменшу сніжинку у світі
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('найменшу')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 421
                        AND posts.tag_id && ARRAY['7'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 23:21:35:
--------------------------------

                    -- Вчені створили найменшу сніжинку у світі
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('сніжинку')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 421
                        AND posts.tag_id && ARRAY['7'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 23:21:35:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1633 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 23:21:35:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1633 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 23:21:35:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1633) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 23:21:35:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 818 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 23:21:35:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 818 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 23:21:35:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (818) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 23:21:35:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 396 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 23:21:35:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 396 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 23:21:35:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (396) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 23:21:35:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 620 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 23:21:35:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 620 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 23:21:35:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (620) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 23:21:35:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 569 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 23:21:35:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 569 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 23:21:35:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (569) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 23:21:35:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '50027cc66ea01f9c2732ba30158ccdd1', '5.255.250.61'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.12 23:23:45:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1281 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 23:23:45:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1281 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 23:23:45:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1281) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 23:23:45:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1281
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.12 23:23:45:
--------------------------------

                    -- YouTube вперше видав нагороду за коментар з мільйоном лайків (відео)
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('YouTube')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1281
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 23:23:45:
--------------------------------

                    -- YouTube вперше видав нагороду за коментар з мільйоном лайків (відео)
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('вперше')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1281
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 23:23:45:
--------------------------------

                    -- YouTube вперше видав нагороду за коментар з мільйоном лайків (відео)
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('нагороду')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1281
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 23:23:45:
--------------------------------

                    -- YouTube вперше видав нагороду за коментар з мільйоном лайків (відео)
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('коментар')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1281
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 23:23:46:
--------------------------------

                    -- YouTube вперше видав нагороду за коментар з мільйоном лайків (відео)
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('мільйоном')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1281
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 23:23:46:
--------------------------------

                    -- YouTube вперше видав нагороду за коментар з мільйоном лайків (відео)
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('лайків')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1281
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 23:23:46:
--------------------------------

                    -- YouTube вперше видав нагороду за коментар з мільйоном лайків (відео)
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('(відео)')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1281
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 23:23:46:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 356 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 23:23:46:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 356 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 23:23:46:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (356) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 23:23:46:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '1a0d36373ed7a1d578ee56dab756da62', '66.249.65.146'::inet, 'Chrome' );
--------------------------------
2020.01.12 23:39:36:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 714 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 23:39:36:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 714 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 23:39:36:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (714) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 23:39:36:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 714
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.12 23:39:36:
--------------------------------

                    -- Подробиці нового доповнення No Man’s Sky
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Подробиці')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 714
                        AND posts.tag_id && ARRAY['3'::int8, '6'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 23:39:36:
--------------------------------

                    -- Подробиці нового доповнення No Man’s Sky
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('нового')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 714
                        AND posts.tag_id && ARRAY['3'::int8, '6'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 23:39:36:
--------------------------------

                    -- Подробиці нового доповнення No Man’s Sky
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('доповнення')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 714
                        AND posts.tag_id && ARRAY['3'::int8, '6'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 23:39:36:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 824 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 23:39:36:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 824 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 23:39:36:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (824) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 23:39:36:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 385 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 23:39:36:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 385 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 23:39:36:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (385) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 23:39:36:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '50027cc66ea01f9c2732ba30158ccdd1', '5.255.250.61'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.12 23:39:39:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 792 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 23:39:39:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 792 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 23:39:39:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (792) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 23:39:39:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 792
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.12 23:39:39:
--------------------------------

                    -- Нічні кошмари насправді допомагають людям
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('кошмари')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 792
                        AND posts.tag_id && ARRAY['7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 23:39:39:
--------------------------------

                    -- Нічні кошмари насправді допомагають людям
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('насправді')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 792
                        AND posts.tag_id && ARRAY['7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 23:39:39:
--------------------------------

                    -- Нічні кошмари насправді допомагають людям
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('допомагають')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 792
                        AND posts.tag_id && ARRAY['7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.12 23:39:39:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1341 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 23:39:39:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1341 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 23:39:39:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1341) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 23:39:39:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 269 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 23:39:39:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 269 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 23:39:39:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (269) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 23:39:39:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 347 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 23:39:39:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 347 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.12 23:39:39:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (347) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.12 23:39:39:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '50027cc66ea01f9c2732ba30158ccdd1', '5.255.250.61'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.13 00:00:15:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	ARRAY['7'::int8] && posts.tag_id 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 00:00:15:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	ARRAY['7'::int8] && posts.tag_id 
-- ORDER
ORDER BY posts.created_time DESC, posts.fixed DESC, posts.posted ASC 
-- ORDER
-- OFFSET
OFFSET 360 LIMIT 10;
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 00:00:15:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (605,602,601,593,583,580,579,578,577,576) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.13 00:00:15:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '50027cc66ea01f9c2732ba30158ccdd1', '5.255.250.61'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.13 00:00:16:
--------------------------------
SELECT count( DISTINCT ua_hash ) as count FROM visit_counter WHERE date_trunc('day', ts) = date_trunc('day', now());
--------------------------------
2020.01.13 00:00:37:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 982 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 00:00:37:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 982 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 00:00:37:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (982) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.13 00:00:37:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 982
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.13 00:00:38:
--------------------------------

                    -- Косатки-бабусі няньчать своїх онуків
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Косатки-бабусі')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 982
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.13 00:00:38:
--------------------------------

                    -- Косатки-бабусі няньчать своїх онуків
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('няньчать')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 982
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.13 00:00:38:
--------------------------------

                    -- Косатки-бабусі няньчать своїх онуків
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('онуків')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 982
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.13 00:00:38:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1636 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 00:00:38:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1636 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 00:00:38:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1636) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.13 00:00:38:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 693 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 00:00:38:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 693 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 00:00:38:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (693) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.13 00:00:38:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1640 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 00:00:38:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1640 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 00:00:38:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1640) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.13 00:00:38:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1619 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 00:00:38:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1619 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 00:00:38:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1619) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.13 00:00:38:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 797 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 00:00:38:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 797 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 00:00:38:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (797) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.13 00:00:38:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1639 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 00:00:38:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1639 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 00:00:38:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1639) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.13 00:00:38:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 794 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 00:00:38:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 794 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 00:00:38:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (794) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.13 00:00:38:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1631 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 00:00:38:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1631 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 00:00:38:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1631) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.13 00:00:38:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '50027cc66ea01f9c2732ba30158ccdd1', '5.255.250.61'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.13 00:22:17:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1079 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 00:22:17:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1079 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 00:22:17:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1079) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.13 00:22:17:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1079
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.13 00:22:17:
--------------------------------

                    -- Facebook запустить програму проти дезінформації в Україні
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Facebook')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1079
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8, '14'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.13 00:22:17:
--------------------------------

                    -- Facebook запустить програму проти дезінформації в Україні
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('запустить')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1079
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8, '14'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.13 00:22:17:
--------------------------------

                    -- Facebook запустить програму проти дезінформації в Україні
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('програму')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1079
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8, '14'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.13 00:22:17:
--------------------------------

                    -- Facebook запустить програму проти дезінформації в Україні
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('дезінформації')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1079
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8, '14'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.13 00:22:17:
--------------------------------

                    -- Facebook запустить програму проти дезінформації в Україні
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Україні')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1079
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8, '14'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.13 00:22:17:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 833 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 00:22:17:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 833 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 00:22:17:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (833) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.13 00:22:17:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 230 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 00:22:17:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 230 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 00:22:17:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (230) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.13 00:22:17:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 91 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 00:22:17:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 91 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 00:22:17:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (91) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.13 00:22:17:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 54 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 00:22:17:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 54 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 00:22:17:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (54) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.13 00:22:17:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '50027cc66ea01f9c2732ba30158ccdd1', '5.255.250.61'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.13 00:30:54:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1047
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.13 00:30:54:
--------------------------------

                    -- Маск придумав, як відправити пікап Tesla Cybertruck в космос
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('придумав,')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1047
                        AND posts.tag_id && ARRAY['3'::int8, '6'::int8, '7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.13 00:30:54:
--------------------------------

                    -- Маск придумав, як відправити пікап Tesla Cybertruck в космос
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('відправити')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1047
                        AND posts.tag_id && ARRAY['3'::int8, '6'::int8, '7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.13 00:30:54:
--------------------------------

                    -- Маск придумав, як відправити пікап Tesla Cybertruck в космос
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Cybertruck')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1047
                        AND posts.tag_id && ARRAY['3'::int8, '6'::int8, '7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.13 00:30:54:
--------------------------------

                    -- Маск придумав, як відправити пікап Tesla Cybertruck в космос
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('космос')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1047
                        AND posts.tag_id && ARRAY['3'::int8, '6'::int8, '7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.13 00:30:54:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 558 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 00:30:54:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 558 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 00:30:54:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (558) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.13 00:30:54:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 869 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 00:30:54:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 869 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 00:30:54:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (869) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.13 00:30:54:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 533 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 00:30:54:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 533 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 00:30:54:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (533) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.13 00:30:54:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 583 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 00:30:54:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 583 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 00:30:54:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (583) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.13 00:30:54:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '50027cc66ea01f9c2732ba30158ccdd1', '5.255.250.61'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.13 00:44:10:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1519 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 00:44:10:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1519 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 00:44:10:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1519) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.13 00:44:10:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1519
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.13 00:44:10:
--------------------------------

                    -- Wi-Fi Alliance сертифікував нову назву Wi-Fi 6E
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Alliance')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1519
                        AND posts.tag_id && ARRAY['9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.13 00:44:10:
--------------------------------

                    -- Wi-Fi Alliance сертифікував нову назву Wi-Fi 6E
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('сертифікував')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1519
                        AND posts.tag_id && ARRAY['9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.13 00:44:10:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1474 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 00:44:10:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1474 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 00:44:10:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1474) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.13 00:44:10:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1175 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 00:44:10:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1175 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 00:44:10:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1175) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.13 00:44:10:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1123 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 00:44:10:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1123 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 00:44:10:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1123) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.13 00:44:10:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '50027cc66ea01f9c2732ba30158ccdd1', '5.255.250.61'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.13 00:48:29:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1324 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 00:48:29:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1324 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 00:48:29:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1324) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.13 00:48:29:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1324
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.13 00:48:29:
--------------------------------

                    -- Google Photos отримав функцію збільшення відео
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Google')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1324
                        AND posts.tag_id && ARRAY['9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.13 00:48:29:
--------------------------------

                    -- Google Photos отримав функцію збільшення відео
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Photos')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1324
                        AND posts.tag_id && ARRAY['9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.13 00:48:29:
--------------------------------

                    -- Google Photos отримав функцію збільшення відео
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('отримав')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1324
                        AND posts.tag_id && ARRAY['9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.13 00:48:29:
--------------------------------

                    -- Google Photos отримав функцію збільшення відео
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('функцію')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1324
                        AND posts.tag_id && ARRAY['9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.13 00:48:29:
--------------------------------

                    -- Google Photos отримав функцію збільшення відео
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('збільшення')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1324
                        AND posts.tag_id && ARRAY['9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.13 00:48:29:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 831 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 00:48:29:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 831 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 00:48:29:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (831) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.13 00:48:29:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1302 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 00:48:29:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1302 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 00:48:29:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1302) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.13 00:48:29:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 737 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 00:48:29:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 737 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 00:48:29:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (737) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.13 00:48:29:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 776 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 00:48:29:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 776 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 00:48:29:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (776) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.13 00:48:29:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1431 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 00:48:29:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1431 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 00:48:29:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1431) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.13 00:48:29:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '1a0d36373ed7a1d578ee56dab756da62', '66.249.65.146'::inet, 'Chrome' );
--------------------------------
2020.01.13 01:20:45:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 544 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 01:20:45:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 544 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 01:20:45:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '1a0d36373ed7a1d578ee56dab756da62', '66.249.65.146'::inet, 'Chrome' );
--------------------------------
2020.01.13 01:20:46:
--------------------------------
SELECT count( DISTINCT ua_hash ) as count FROM visit_counter WHERE date_trunc('day', ts) = date_trunc('day', now());
--------------------------------
2020.01.13 01:24:38:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1443 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 01:24:38:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1443 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 01:24:38:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1443) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.13 01:24:38:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1443
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.13 01:24:38:
--------------------------------

                    -- Повернення ЛЕГЕНДИ? Огляд мишки SteelSeries Sensei Ten
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Повернення')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1443
                        AND posts.tag_id && ARRAY['9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.13 01:24:38:
--------------------------------

                    -- Повернення ЛЕГЕНДИ? Огляд мишки SteelSeries Sensei Ten
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('ЛЕГЕНДИ?')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1443
                        AND posts.tag_id && ARRAY['9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.13 01:24:38:
--------------------------------

                    -- Повернення ЛЕГЕНДИ? Огляд мишки SteelSeries Sensei Ten
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('SteelSeries')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1443
                        AND posts.tag_id && ARRAY['9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.13 01:24:39:
--------------------------------

                    -- Повернення ЛЕГЕНДИ? Огляд мишки SteelSeries Sensei Ten
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Sensei')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1443
                        AND posts.tag_id && ARRAY['9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.13 01:24:39:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 125 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 01:24:39:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 125 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 01:24:39:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (125) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.13 01:24:39:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 751 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 01:24:39:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 751 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 01:24:39:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (751) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.13 01:24:39:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 757 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 01:24:39:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 757 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 01:24:39:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (757) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.13 01:24:39:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 856 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 01:24:39:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 856 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 01:24:39:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (856) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.13 01:24:39:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 728 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 01:24:39:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 728 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 01:24:39:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (728) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.13 01:24:39:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1330 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 01:24:39:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1330 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 01:24:39:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1330) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.13 01:24:39:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1614 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 01:24:39:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1614 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 01:24:39:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1614) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.13 01:24:39:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '50027cc66ea01f9c2732ba30158ccdd1', '5.255.250.61'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.13 01:24:45:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1448 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 01:24:46:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1448 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 01:24:46:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1448) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.13 01:24:46:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1448
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.13 01:24:46:
--------------------------------

                    -- Джон Уік покращить ваш настрій у Fortnite
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('покращить')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1448
                        AND posts.tag_id && ARRAY['3'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.13 01:24:46:
--------------------------------

                    -- Джон Уік покращить ваш настрій у Fortnite
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('настрій')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1448
                        AND posts.tag_id && ARRAY['3'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.13 01:24:46:
--------------------------------

                    -- Джон Уік покращить ваш настрій у Fortnite
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Fortnite')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1448
                        AND posts.tag_id && ARRAY['3'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.13 01:24:46:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1290 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 01:24:46:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1290 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 01:24:46:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1290) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.13 01:24:46:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1539 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 01:24:46:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1539 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 01:24:46:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1539) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.13 01:24:46:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 233 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 01:24:46:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 233 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 01:24:46:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (233) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.13 01:24:46:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1606 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 01:24:46:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1606 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 01:24:46:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1606) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.13 01:24:46:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 151 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 01:24:46:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 151 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 01:24:46:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (151) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.13 01:24:46:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '50027cc66ea01f9c2732ba30158ccdd1', '5.255.250.61'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.13 01:45:10:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1002 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 01:45:10:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1002 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 01:45:10:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1002) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.13 01:45:10:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1002
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.13 01:45:10:
--------------------------------

                    -- Українські школярі завоювали три &quot;бронзи&quot; на міжнародній олімпіаді в Катарі
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Українські')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1002
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.13 01:45:10:
--------------------------------

                    -- Українські школярі завоювали три &quot;бронзи&quot; на міжнародній олімпіаді в Катарі
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('школярі')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1002
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.13 01:45:10:
--------------------------------

                    -- Українські школярі завоювали три &quot;бронзи&quot; на міжнародній олімпіаді в Катарі
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('завоювали')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1002
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.13 01:45:10:
--------------------------------

                    -- Українські школярі завоювали три &quot;бронзи&quot; на міжнародній олімпіаді в Катарі
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('&quot;бронзи&quot;')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1002
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.13 01:45:11:
--------------------------------

                    -- Українські школярі завоювали три &quot;бронзи&quot; на міжнародній олімпіаді в Катарі
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('міжнародній')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1002
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.13 01:45:11:
--------------------------------

                    -- Українські школярі завоювали три &quot;бронзи&quot; на міжнародній олімпіаді в Катарі
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('олімпіаді')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1002
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.13 01:45:11:
--------------------------------

                    -- Українські школярі завоювали три &quot;бронзи&quot; на міжнародній олімпіаді в Катарі
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Катарі')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1002
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.13 01:45:11:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 63 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 01:45:11:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 63 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 01:45:11:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (63) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.13 01:45:11:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 483 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 01:45:11:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 483 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 01:45:11:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (483) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.13 01:45:11:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 428 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 01:45:11:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 428 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 01:45:11:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (428) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.13 01:45:11:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 33 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 01:45:11:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 33 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 01:45:11:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (33) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.13 01:45:11:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1321 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 01:45:11:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1321 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 01:45:11:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1321) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.13 01:45:11:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '50027cc66ea01f9c2732ba30158ccdd1', '5.255.250.61'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.13 01:55:15:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1161 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 01:55:15:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1161 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 01:55:15:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1161) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.13 01:55:15:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1161
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.13 01:55:15:
--------------------------------

                    -- Redmi 9 отримає MediaTek Helio G70
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('отримає')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1161
                        AND posts.tag_id && ARRAY['4'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.13 01:55:15:
--------------------------------

                    -- Redmi 9 отримає MediaTek Helio G70
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('MediaTek')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1161
                        AND posts.tag_id && ARRAY['4'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.13 01:55:15:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1055 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 01:55:15:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1055 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 01:55:15:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1055) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.13 01:55:15:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1574 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 01:55:15:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1574 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 01:55:15:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1574) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.13 01:55:15:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1355 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 01:55:15:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1355 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 01:55:15:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1355) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.13 01:55:15:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( 'f95d434096c48717bb894e301e9b4f49', '77.88.47.80'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.13 01:58:35:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 01:58:35:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 
-- ORDER
ORDER BY posts.created_time DESC, posts.fixed DESC, posts.posted ASC 
-- ORDER
-- OFFSET
OFFSET 0 LIMIT 10;
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 01:58:35:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1640,1639,1638,1637,1636,1635,1634,1633,1632,1631) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.13 01:58:37:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( 'bbc73cf92656b27bd1280a5dceee4a98', '66.249.65.148'::inet, 'Chrome' );
--------------------------------
2020.01.13 01:58:37:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	posts.tag_id && ARRAY[ '25'::int8, '26'::int8, '27'::int8, '28'::int8, '29'::int8, '30'::int8, '31'::int8, '32'::int8, '33'::int8, '34'::int8, '35'::int8 ] 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 01:58:37:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	posts.tag_id && ARRAY[ '25'::int8, '26'::int8, '27'::int8, '28'::int8, '29'::int8, '30'::int8, '31'::int8, '32'::int8, '33'::int8, '34'::int8, '35'::int8 ] 
-- ORDER
ORDER BY posts.created_time DESC, posts.fixed DESC, posts.posted ASC 
-- ORDER
-- OFFSET
OFFSET 0 LIMIT 1;
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 01:58:39:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1130 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 01:58:39:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1130 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 01:58:39:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1130) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.13 01:58:39:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1130
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.13 01:58:39:
--------------------------------

                    -- JBL представила концепт навушників з &quot;практично необмеженим часом роботи&quot; (відео)
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('представила')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1130
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.13 01:58:39:
--------------------------------

                    -- JBL представила концепт навушників з &quot;практично необмеженим часом роботи&quot; (відео)
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('концепт')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1130
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.13 01:58:39:
--------------------------------

                    -- JBL представила концепт навушників з &quot;практично необмеженим часом роботи&quot; (відео)
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('навушників')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1130
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.13 01:58:39:
--------------------------------

                    -- JBL представила концепт навушників з &quot;практично необмеженим часом роботи&quot; (відео)
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('&quot;практично')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1130
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.13 01:58:39:
--------------------------------

                    -- JBL представила концепт навушників з &quot;практично необмеженим часом роботи&quot; (відео)
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('необмеженим')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1130
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.13 01:58:39:
--------------------------------

                    -- JBL представила концепт навушників з &quot;практично необмеженим часом роботи&quot; (відео)
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('роботи&quot;')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1130
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.13 01:58:40:
--------------------------------

                    -- JBL представила концепт навушників з &quot;практично необмеженим часом роботи&quot; (відео)
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('(відео)')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1130
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.13 01:58:40:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 162 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 01:58:40:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 162 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 01:58:40:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (162) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.13 01:58:40:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '2d2e8e6ab88742154eade31e44c21e75', '66.249.65.150'::inet, 'Chrome' );
--------------------------------
2020.01.13 02:01:56:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	ARRAY['3'::int8] && posts.tag_id 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 02:01:56:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	ARRAY['3'::int8] && posts.tag_id 
-- ORDER
ORDER BY posts.created_time DESC, posts.fixed DESC, posts.posted ASC 
-- ORDER
-- OFFSET
OFFSET 280 LIMIT 10;
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 02:01:56:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (846,844,843,842,841,838,835,833,830,827) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.13 02:01:56:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '50027cc66ea01f9c2732ba30158ccdd1', '5.255.250.61'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.13 02:01:57:
--------------------------------
SELECT count( DISTINCT ua_hash ) as count FROM visit_counter WHERE date_trunc('day', ts) = date_trunc('day', now());
--------------------------------
2020.01.13 02:01:59:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	ARRAY['14'::int8] && posts.tag_id 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 02:01:59:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	ARRAY['14'::int8] && posts.tag_id 
-- ORDER
ORDER BY posts.created_time DESC, posts.fixed DESC, posts.posted ASC 
-- ORDER
-- OFFSET
OFFSET 80 LIMIT 10;
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 02:01:59:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (427,411,372,286,282,264,261,241,230,158) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.13 02:01:59:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '50027cc66ea01f9c2732ba30158ccdd1', '5.255.250.61'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.13 02:02:54:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 236 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 02:02:54:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 236 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 02:02:54:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (236) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.13 02:02:54:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 236
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.13 02:02:54:
--------------------------------

                    -- Вчені: зайва мотивація шкодить успішності дітей
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Вчені:')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 236
                        AND posts.tag_id && ARRAY['7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.13 02:02:54:
--------------------------------

                    -- Вчені: зайва мотивація шкодить успішності дітей
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('мотивація')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 236
                        AND posts.tag_id && ARRAY['7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.13 02:02:54:
--------------------------------

                    -- Вчені: зайва мотивація шкодить успішності дітей
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('шкодить')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 236
                        AND posts.tag_id && ARRAY['7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.13 02:02:54:
--------------------------------

                    -- Вчені: зайва мотивація шкодить успішності дітей
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('успішності')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 236
                        AND posts.tag_id && ARRAY['7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.13 02:02:54:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 473 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 02:02:54:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 473 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 02:02:54:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (473) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.13 02:02:54:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1166 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 02:02:54:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1166 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 02:02:54:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1166) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.13 02:02:54:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '50027cc66ea01f9c2732ba30158ccdd1', '5.255.250.61'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.13 02:04:36:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1147 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 02:04:36:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1147 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 02:04:36:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1147) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.13 02:04:36:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1147
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.13 02:04:36:
--------------------------------

                    -- Новий матеріал перетворює вуглекислий газ нешкідливий карбонат кальцію
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('матеріал')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1147
                        AND posts.tag_id && ARRAY['7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.13 02:04:36:
--------------------------------

                    -- Новий матеріал перетворює вуглекислий газ нешкідливий карбонат кальцію
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('перетворює')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1147
                        AND posts.tag_id && ARRAY['7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.13 02:04:36:
--------------------------------

                    -- Новий матеріал перетворює вуглекислий газ нешкідливий карбонат кальцію
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('вуглекислий')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1147
                        AND posts.tag_id && ARRAY['7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.13 02:04:36:
--------------------------------

                    -- Новий матеріал перетворює вуглекислий газ нешкідливий карбонат кальцію
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('нешкідливий')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1147
                        AND posts.tag_id && ARRAY['7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.13 02:04:36:
--------------------------------

                    -- Новий матеріал перетворює вуглекислий газ нешкідливий карбонат кальцію
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('карбонат')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1147
                        AND posts.tag_id && ARRAY['7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.13 02:04:36:
--------------------------------

                    -- Новий матеріал перетворює вуглекислий газ нешкідливий карбонат кальцію
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('кальцію')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1147
                        AND posts.tag_id && ARRAY['7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.13 02:04:36:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 803 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 02:04:36:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 803 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 02:04:36:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (803) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.13 02:04:36:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 741 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 02:04:36:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 741 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 02:04:36:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (741) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.13 02:04:36:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1334 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 02:04:36:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1334 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 02:04:36:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1334) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.13 02:04:36:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 398 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 02:04:36:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 398 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 02:04:36:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (398) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.13 02:04:36:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1538 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 02:04:36:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1538 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 02:04:36:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1538) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.13 02:04:36:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '50027cc66ea01f9c2732ba30158ccdd1', '5.255.250.61'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.13 02:20:30:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1471 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 02:20:30:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1471 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 02:20:30:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1471) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.13 02:20:30:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1471
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.13 02:20:30:
--------------------------------

                    -- Відпустка на Місяці, роботи й мавпи-слуги: як люди уявляли 2020 рік
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Відпустка')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1471
                        AND posts.tag_id && ARRAY['3'::int8, '6'::int8, '7'::int8, '8'::int8, '9'::int8, '12'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.13 02:20:30:
--------------------------------

                    -- Відпустка на Місяці, роботи й мавпи-слуги: як люди уявляли 2020 рік
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Місяці,')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1471
                        AND posts.tag_id && ARRAY['3'::int8, '6'::int8, '7'::int8, '8'::int8, '9'::int8, '12'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.13 02:20:30:
--------------------------------

                    -- Відпустка на Місяці, роботи й мавпи-слуги: як люди уявляли 2020 рік
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('роботи')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1471
                        AND posts.tag_id && ARRAY['3'::int8, '6'::int8, '7'::int8, '8'::int8, '9'::int8, '12'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.13 02:20:30:
--------------------------------

                    -- Відпустка на Місяці, роботи й мавпи-слуги: як люди уявляли 2020 рік
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('мавпи-слуги:')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1471
                        AND posts.tag_id && ARRAY['3'::int8, '6'::int8, '7'::int8, '8'::int8, '9'::int8, '12'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.13 02:20:30:
--------------------------------

                    -- Відпустка на Місяці, роботи й мавпи-слуги: як люди уявляли 2020 рік
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('уявляли')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1471
                        AND posts.tag_id && ARRAY['3'::int8, '6'::int8, '7'::int8, '8'::int8, '9'::int8, '12'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.13 02:20:30:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 231 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 02:20:30:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 231 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 02:20:30:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (231) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.13 02:20:30:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1369 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 02:20:30:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1369 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 02:20:30:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1369) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.13 02:20:30:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1398 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 02:20:30:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1398 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 02:20:30:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1398) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.13 02:20:30:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1532 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 02:20:30:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1532 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 02:20:30:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1532) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.13 02:20:30:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '50027cc66ea01f9c2732ba30158ccdd1', '5.255.250.61'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.13 02:20:51:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	ARRAY['8'::int8] && posts.tag_id 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 02:20:51:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	ARRAY['8'::int8] && posts.tag_id 
-- ORDER
ORDER BY posts.created_time DESC, posts.fixed DESC, posts.posted ASC 
-- ORDER
-- OFFSET
OFFSET 320 LIMIT 10;
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 02:20:51:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (782,780,777,776,775,774,772,769,766,764) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.13 02:20:51:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '50027cc66ea01f9c2732ba30158ccdd1', '5.255.250.61'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.13 02:21:29:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1190 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 02:21:29:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1190 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 02:21:29:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1190) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.13 02:21:29:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1190
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.13 02:21:29:
--------------------------------

                    -- Біля берегів Мексики знайшли якорі з кораблів конкістадора Кортеса (фото)
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('берегів')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1190
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.13 02:21:29:
--------------------------------

                    -- Біля берегів Мексики знайшли якорі з кораблів конкістадора Кортеса (фото)
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Мексики')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1190
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.13 02:21:29:
--------------------------------

                    -- Біля берегів Мексики знайшли якорі з кораблів конкістадора Кортеса (фото)
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('знайшли')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1190
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.13 02:21:29:
--------------------------------

                    -- Біля берегів Мексики знайшли якорі з кораблів конкістадора Кортеса (фото)
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('кораблів')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1190
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.13 02:21:29:
--------------------------------

                    -- Біля берегів Мексики знайшли якорі з кораблів конкістадора Кортеса (фото)
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('конкістадора')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1190
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.13 02:21:29:
--------------------------------

                    -- Біля берегів Мексики знайшли якорі з кораблів конкістадора Кортеса (фото)
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Кортеса')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1190
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.13 02:21:29:
--------------------------------

                    -- Біля берегів Мексики знайшли якорі з кораблів конкістадора Кортеса (фото)
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('(фото)')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1190
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.13 02:21:29:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 601 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 02:21:29:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 601 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 02:21:29:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (601) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.13 02:21:29:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1041 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 02:21:29:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1041 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.13 02:21:29:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1041) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.13 02:21:29:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '50027cc66ea01f9c2732ba30158ccdd1', '5.255.250.61'::inet, '[Bot] Yandex' );
--------------------------------
