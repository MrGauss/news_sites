2020.01.21 20:55:26:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1345 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 20:55:26:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1345 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 20:55:26:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1345) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 20:55:26:
--------------------------------
SELECT * FROM categories ORDER BY level;  -- %QUERY_CACHABLE
--------------------------------
2020.01.21 20:55:26:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1345
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.21 20:55:26:
--------------------------------

                    -- Народилися перші свині, чиї органи можна пересаджувати людям (фото)
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Народилися')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1345
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8, '13'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 20:55:26:
--------------------------------

                    -- Народилися перші свині, чиї органи можна пересаджувати людям (фото)
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('свині,')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1345
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8, '13'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 20:55:26:
--------------------------------

                    -- Народилися перші свині, чиї органи можна пересаджувати людям (фото)
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('органи')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1345
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8, '13'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 20:55:26:
--------------------------------

                    -- Народилися перші свині, чиї органи можна пересаджувати людям (фото)
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('пересаджувати')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1345
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8, '13'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 20:55:26:
--------------------------------

                    -- Народилися перші свині, чиї органи можна пересаджувати людям (фото)
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('(фото)')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1345
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8, '13'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 20:55:26:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 92 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 20:55:26:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 92 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 20:55:26:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (92) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 20:55:26:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1740 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 20:55:26:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1740 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 20:55:26:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1740) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 20:55:26:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 50 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 20:55:26:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 50 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 20:55:26:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (50) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 20:55:26:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 749 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 20:55:26:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 749 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 20:55:26:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (749) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 20:55:26:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 785 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 20:55:26:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 785 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 20:55:26:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (785) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 20:55:26:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '468cb6cbe8d6eac7bdc533307745a04f', '93.158.161.27'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.21 20:55:26:
--------------------------------

                SELECT
                    tags.id,
                    tags.name,
                    tags.altname,
                    (SELECT count(posts_tags.post_id) FROM posts_tags WHERE posts_tags.tag_id = tags.id ) as news_count
                FROM
                    tags WHERE id > 0 ORDER BY name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 20:55:26:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 20:55:26:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 
-- ORDER
ORDER BY posts.created_time DESC, posts.fixed DESC, posts.posted ASC 
-- ORDER
-- OFFSET
OFFSET 90 LIMIT 12;
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 20:55:26:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1751,1750,1749,1748,1747,1746,1745,1744,1743,1742,1741,1740) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 20:55:26:
--------------------------------
SELECT count( DISTINCT ua_hash ) as count FROM visit_counter WHERE date_trunc('day', ts) = date_trunc('day', now());
--------------------------------
2020.01.21 20:55:26:
--------------------------------

                SELECT
                    date_trunc('day', visit_counter.ts) as visit_day,
                    COUNT( DISTINCT visit_counter.ua_hash ) as count
                FROM
                    visit_counter
                WHERE
                    date_trunc('day', visit_counter.ts ) > date_trunc('day', NOW() - INTERVAL '1 week')
                GROUP BY visit_day
                ORDER BY visit_day;
            
--------------------------------
2020.01.21 21:04:00:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1328 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:04:00:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1328 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:04:00:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1328) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 21:04:00:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1328
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.21 21:04:00:
--------------------------------

                    -- Windows 10 отримає полегшений процес встановлення драйверів
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Windows')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1328
                        AND posts.tag_id && ARRAY['4'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 21:04:00:
--------------------------------

                    -- Windows 10 отримає полегшений процес встановлення драйверів
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('отримає')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1328
                        AND posts.tag_id && ARRAY['4'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 21:04:00:
--------------------------------

                    -- Windows 10 отримає полегшений процес встановлення драйверів
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('полегшений')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1328
                        AND posts.tag_id && ARRAY['4'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 21:04:00:
--------------------------------

                    -- Windows 10 отримає полегшений процес встановлення драйверів
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('процес')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1328
                        AND posts.tag_id && ARRAY['4'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 21:04:00:
--------------------------------

                    -- Windows 10 отримає полегшений процес встановлення драйверів
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('встановлення')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1328
                        AND posts.tag_id && ARRAY['4'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 21:04:00:
--------------------------------

                    -- Windows 10 отримає полегшений процес встановлення драйверів
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('драйверів')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1328
                        AND posts.tag_id && ARRAY['4'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 21:04:00:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1658 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:04:00:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1658 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:04:00:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1658) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 21:04:00:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1014 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:04:00:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1014 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:04:00:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1014) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 21:04:00:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1484 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:04:00:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1484 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:04:00:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1484) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 21:04:00:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1193 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:04:00:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1193 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:04:00:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1193) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 21:04:00:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1404 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:04:00:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1404 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:04:00:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1404) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 21:04:00:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( 'fcfdda7ada2968d29d9ba2c78838c866', '37.9.87.181'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.21 21:04:00:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:04:01:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 
-- ORDER
ORDER BY posts.created_time DESC, posts.fixed DESC, posts.posted ASC 
-- ORDER
-- OFFSET
OFFSET 0 LIMIT 10000;
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:04:01:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1841,1840,1839,1838,1837,1836,1835,1834,1833,1832,1831,1830,1829,1828,1827,1826,1825,1824,1823,1822,1821,1820,1819,1818,1817,1816,1815,1814,1813,1812,1811,1810,1809,1808,1807,1806,1805,1804,1803,1802,1801,1800,1799,1798,1797,1796,1795,1794,1793,1792,1791,1790,1789,1788,1787,1786,1785,1784,1783,1782,1781,1780,1779,1778,1777,1776,1775,1774,1773,1772,1771,1770,1769,1768,1767,1766,1765,1764,1763,1762,1761,1760,1759,1758,1757,1756,1755,1754,1753,1752,1751,1750,1749,1748,1747,1746,1745,1744,1743,1742,1741,1740,1739,1738,1737,1736,1735,1734,1733,1732,1731,1730,1729,1728,1727,1726,1725,1724,1723,1722,1721,1720,1719,1718,1717,1716,1715,1714,1713,1712,1711,1710,1709,1708,1707,1706,1705,1704,1703,1702,1701,1700,1699,1698,1697,1696,1695,1694,1693,1692,1691,1690,1689,1688,1687,1686,1685,1684,1683,1682,1681,1680,1679,1678,1677,1676,1675,1674,1673,1672,1671,1670,1669,1668,1667,1666,1665,1664,1663,1662,1661,1660,1659,1658,1657,1656,1655,1654,1653,1652,1651,1650,1649,1648,1647,1646,1645,1644,1643,1642,1641,1640,1639,1638,1637,1636,1635,1634,1633,1632,1631,1630,1629,1628,1627,1626,1625,1624,1623,1622,1621,1620,1619,1618,1617,1616,1615,1614,1613,1612,1611,1610,1609,1608,1607,1606,1605,1604,1603,1602,1601,1600,1599,1598,1597,1596,1595,1594,1593,1592,1591,1590,1589,1588,1587,1586,1585,1584,1583,1582,1581,1580,1579,1578,1577,1576,1575,1574,1573,1572,1571,1570,1569,1568,1567,1566,1565,1564,1563,1562,1561,1560,1559,1558,1557,1556,1555,1554,1553,1552,1551,1550,1549,1548,1547,1546,1545,1544,1543,1542,1541,1540,1539,1538,1537,1536,1535,1534,1533,1532,1531,1530,1529,1528,1527,1526,1525,1524,1523,1522,1521,1520,1519,1518,1517,1516,1515,1514,1513,1512,1511,1510,1509,1508,1507,1506,1505,1504,1503,1502,1501,1500,1499,1498,1497,1496,1495,1494,1493,1492,1491,1490,1489,1488,1487,1486,1485,1484,1483,1482,1481,1480,1479,1478,1477,1476,1475,1474,1473,1472,1471,1470,1469,1468,1467,1466,1465,1464,1463,1462,1461,1460,1459,1458,1457,1456,1455,1454,1453,1452,1451,1450,1449,1448,1447,1446,1445,1444,1443,1442,1441,1440,1439,1438,1437,1436,1435,1434,1433,1432,1431,1430,1429,1428,1427,1426,1425,1424,1423,1422,1421,1420,1419,1418,1417,1416,1415,1414,1413,1412,1411,1410,1409,1408,1407,1406,1405,1404,1403,1402,1401,1400,1399,1398,1397,1396,1395,1394,1393,1392,1391,1390,1389,1388,1387,1386,1385,1384,1383,1382,1381,1380,1379,1378,1377,1376,1375,1374,1373,1372,1371,1370,1369,1368,1367,1366,1365,1364,1363,1362,1361,1360,1359,1358,1357,1356,1355,1354,1353,1352,1351,1350,1349,1348,1347,1346,1345,1344,1343,1342,1341,1340,1339,1338,1337,1336,1335,1334,1333,1332,1331,1330,1329,1328,1327,1326,1325,1324,1323,1322,1321,1320,1319,1318,1317,1316,1315,1314,1313,1312,1311,1310,1309,1308,1307,1306,1305,1304,1303,1302,1301,1300,1299,1298,1297,1296,1295,1294,1293,1292,1291,1290,1289,1288,1287,1286,1285,1284,1283,1282,1281,1280,1279,1278,1277,1276,1275,1274,1273,1272,1271,1270,1269,1268,1267,1266,1265,1264,1263,1262,1261,1260,1259,1258,1257,1256,1255,1254,1253,1252,1251,1250,1249,1248,1247,1246,1245,1244,1243,1242,1241,1240,1239,1238,1237,1236,1235,1234,1233,1232,1231,1230,1229,1228,1227,1226,1225,1224,1223,1222,1221,1220,1219,1218,1217,1216,1215,1214,1213,1212,1211,1210,1209,1208,1207,1206,1205,1204,1203,1202,1201,1200,1199,1198,1197,1196,1195,1194,1193,1192,1191,1190,1189,1188,1187,1186,1185,1184,1183,1182,1181,1180,1179,1178,1177,1176,1175,1174,1173,1172,1171,1170,1169,1168,1167,1166,1165,1164,1163,1162,1161,1160,1159,1158,1157,1156,1155,1154,1153,1152,1151,1150,1149,1148,1147,1146,1145,1144,1143,1142,1141,1140,1139,1138,1137,1136,1135,1134,1133,1132,1131,1130,1129,1128,1127,1126,1125,1124,1123,1122,1121,1120,1119,1118,1117,1116,1115,1114,1113,1112,1111,1110,1109,1108,1107,1106,1105,1104,1103,1102,1101,1100,1099,1098,1097,1096,1095,1094,1093,1092,1091,1090,1089,1088,1087,1086,1085,1084,1083,1082,1081,1080,1079,1078,1077,1076,1075,1074,1073,1072,1071,1070,1069,1068,1067,1066,1065,1064,1063,1062,1061,1060,1059,1058,1057,1056,1055,1054,1053,1052,1051,1050,1049,1048,1047,1046,1045,1044,1043,1042,1041,1040,1039,1038,1037,1036,1035,1034,1033,1032,1031,1030,1029,1028,1027,1026,1025,1024,1023,1022,1021,1020,1019,1018,1017,1016,1015,1014,1013,1012,1011,1010,1009,1008,1007,1006,1005,1004,1003,1002,1001,1000,999,998,997,996,995,994,993,992,991,990,989,988,987,986,985,984,983,982,981,980,979,978,977,976,975,974,973,972,971,970,969,968,967,966,965,964,963,962,961,960,959,958,957,956,955,954,953,952,951,950,949,948,947,946,945,944,943,942,941,940,939,938,937,936,935,934,933,932,931,930,929,928,927,926,925,924,923,922,921,920,919,918,917,916,915,914,913,912,911,910,909,908,907,906,905,904,903,902,901,900,899,898,897,896,895,894,893,892,891,890,889,888,887,886,885,884,883,882,881,880,879,878,877,876,875,874,873,872,871,870,869,868,867,866,865,864,863,862,861,860,859,858,857,856,855,854,853,852,851,850,849,848,847,846,845,844,843,842,841,840,839,838,837,836,835,834,833,832,831,830,829,828,827,826,825,824,823,822,821,820,819,818,817,816,815,814,813,812,811,810,809,808,807,806,805,804,803,802,801,800,799,798,797,796,795,794,793,792,791,790,789,788,787,786,785,784,783,782,781,780,779,778,777,776,775,774,773,772,771,770,769,768,767,766,765,764,763,762,761,760,759,758,757,756,755,754,753,752,751,750,749,748,747,746,745,744,743,742,741,740,739,738,737,736,735,734,733,732,731,730,729,728,727,726,725,724,723,722,721,719,718,716,715,714,712,708,703,702,701,700,699,698,697,696,695,694,693,692,691,690,689,688,687,686,685,678,677,675,674,673,672,671,670,669,667,666,665,664,663,661,658,657,656,653,647,646,645,644,639,638,637,636,635,632,630,629,627,626,623,620,619,618,617,616,615,614,611,610,609,607,606,605,604,603,602,601,598,597,595,593,591,590,589,588,587,586,585,584,583,582,581,580,579,578,577,576,574,572,571,570,569,567,562,559,558,557,556,555,554,553,551,550,548,546,545,542,537,535,534,533,532,531,529,528,526,525,524,523,522,521,520,519,513,511,510,509,508,507,506,505,504,503,500,497,495,493,489,487,485,484,483,482,481,480,479,478,477,476,475,474,473,472,471,470,469,468,467,466,465,464,463,460,457,455,452,451,441,440,439,438,437,436,435,434,433,432,431,428,427,425,423,422,421,420,419,418,417,414,411,410,408,407,405,404,400,399,398,396,395,394,393,390,389,388,386,385,379,378,375,374,372,370,369,368,367,366,364,362,361,359,356,355,354,353,348,347,346,345,344,343,342,341,340,339,338,337,336,334,333,332,329,327,326,324,319,318,317,316,314,310,307,304,302,300,299,298,297,296,295,294,293,292,291,290,286,285,283,282,280,274,273,272,271,270,269,268,267,266,265,264,261,257,255,249,248,245,241,240,239,238,237,236,235,234,233,231,230,227,226,225,224,223,222,221,220,219,218,214,213,211,210,207,203,201,199,198,197,196,195,194,193,192,191,190,189,188,187,186,185,184,183,182,181,180,179,178,177,176,175,174,173,172,171,170,169,168,167,166,165,164,163,162,161,160,159,158,157,156,155,154,153,152,151,150,149,148,147,145,139,138,137,136,135,134,133,132,131,130,129,128,127,126,125,124,123,122,121,120,119,118,117,116,115,114,113,112,111,110,109,108,107,106,105,104,103,102,101,100,99,98,97,96,95,94,93,92,91,90,89,88,87,86,85,84,83,82,81,80,79,78,77,76,75,74,73,72,71,70,69,68,67,66,65,64,63,62,61,60,59,56,55,54,53,52,51,50,49,48,47,46,45,44,43,42,41,40,39,38,37,36,35,34,33,24,23,22,21,20,19,18,17,16) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 21:04:01:
--------------------------------
SELECT count( DISTINCT ua_hash ) as count FROM visit_counter WHERE date_trunc('day', ts) = date_trunc('day', now());
--------------------------------
2020.01.21 21:06:04:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 197 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:06:04:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 197 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:06:04:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (197) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 21:06:04:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 197
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.21 21:06:04:
--------------------------------

                    -- Когнітивні здібності у восьмирічному віці дозволяють прогнозувати ризик деменції в старості
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Когнітивні')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 197
                        AND posts.tag_id && ARRAY['7'::int8, '12'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 21:06:04:
--------------------------------

                    -- Когнітивні здібності у восьмирічному віці дозволяють прогнозувати ризик деменції в старості
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('здібності')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 197
                        AND posts.tag_id && ARRAY['7'::int8, '12'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 21:06:04:
--------------------------------

                    -- Когнітивні здібності у восьмирічному віці дозволяють прогнозувати ризик деменції в старості
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('восьмирічному')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 197
                        AND posts.tag_id && ARRAY['7'::int8, '12'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 21:06:04:
--------------------------------

                    -- Когнітивні здібності у восьмирічному віці дозволяють прогнозувати ризик деменції в старості
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('дозволяють')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 197
                        AND posts.tag_id && ARRAY['7'::int8, '12'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 21:06:04:
--------------------------------

                    -- Когнітивні здібності у восьмирічному віці дозволяють прогнозувати ризик деменції в старості
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('прогнозувати')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 197
                        AND posts.tag_id && ARRAY['7'::int8, '12'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 21:06:04:
--------------------------------

                    -- Когнітивні здібності у восьмирічному віці дозволяють прогнозувати ризик деменції в старості
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('деменції')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 197
                        AND posts.tag_id && ARRAY['7'::int8, '12'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 21:06:04:
--------------------------------

                    -- Когнітивні здібності у восьмирічному віці дозволяють прогнозувати ризик деменції в старості
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('старості')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 197
                        AND posts.tag_id && ARRAY['7'::int8, '12'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 21:06:04:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1654 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:06:04:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1654 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:06:04:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1654) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 21:06:04:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 240 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:06:04:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 240 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:06:04:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (240) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 21:06:04:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 523 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:06:04:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 523 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:06:04:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (523) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 21:06:04:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 476 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:06:04:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 476 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:06:04:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (476) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 21:06:04:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1383 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:06:04:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1383 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:06:04:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1383) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 21:06:04:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '5c02f3550b96b5b38c8b301955aedf3b', '77.88.47.7'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.21 21:15:03:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1294 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:15:03:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1294 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:15:03:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1294) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 21:15:03:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1294
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.21 21:15:03:
--------------------------------

                    -- Легендарна «Каста Мета-Баронів» незабаром вийде українською від видавництва Vovkulaka
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Легендарна')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1294
                        AND posts.tag_id && ARRAY['3'::int8, '6'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 21:15:03:
--------------------------------

                    -- Легендарна «Каста Мета-Баронів» незабаром вийде українською від видавництва Vovkulaka
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('«Каста')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1294
                        AND posts.tag_id && ARRAY['3'::int8, '6'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 21:15:03:
--------------------------------

                    -- Легендарна «Каста Мета-Баронів» незабаром вийде українською від видавництва Vovkulaka
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Мета-Баронів»')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1294
                        AND posts.tag_id && ARRAY['3'::int8, '6'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 21:15:03:
--------------------------------

                    -- Легендарна «Каста Мета-Баронів» незабаром вийде українською від видавництва Vovkulaka
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('незабаром')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1294
                        AND posts.tag_id && ARRAY['3'::int8, '6'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 21:15:03:
--------------------------------

                    -- Легендарна «Каста Мета-Баронів» незабаром вийде українською від видавництва Vovkulaka
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('українською')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1294
                        AND posts.tag_id && ARRAY['3'::int8, '6'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 21:15:03:
--------------------------------

                    -- Легендарна «Каста Мета-Баронів» незабаром вийде українською від видавництва Vovkulaka
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('видавництва')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1294
                        AND posts.tag_id && ARRAY['3'::int8, '6'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 21:15:03:
--------------------------------

                    -- Легендарна «Каста Мета-Баронів» незабаром вийде українською від видавництва Vovkulaka
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Vovkulaka')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1294
                        AND posts.tag_id && ARRAY['3'::int8, '6'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 21:15:03:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 117 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:15:03:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 117 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:15:03:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (117) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 21:15:03:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 59 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:15:03:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 59 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:15:03:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (59) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 21:15:03:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 282 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:15:03:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 282 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:15:03:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (282) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 21:15:03:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 187 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:15:03:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 187 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:15:03:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (187) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 21:15:03:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 657 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:15:03:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 657 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:15:03:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (657) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 21:15:03:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( 'a0ccd15a1aaf5e79e04089f4596357ba', '141.8.188.191'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.21 21:21:43:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1098 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:21:43:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1098 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:21:43:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1098) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 21:21:43:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1098
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.21 21:21:43:
--------------------------------

                    -- Samsung Galaxy Note10 Lite підтримуватиме нову функцію S Pen
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Samsung')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1098
                        AND posts.tag_id && ARRAY['4'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 21:21:43:
--------------------------------

                    -- Samsung Galaxy Note10 Lite підтримуватиме нову функцію S Pen
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Galaxy')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1098
                        AND posts.tag_id && ARRAY['4'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 21:21:43:
--------------------------------

                    -- Samsung Galaxy Note10 Lite підтримуватиме нову функцію S Pen
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Note10')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1098
                        AND posts.tag_id && ARRAY['4'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 21:21:43:
--------------------------------

                    -- Samsung Galaxy Note10 Lite підтримуватиме нову функцію S Pen
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('підтримуватиме')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1098
                        AND posts.tag_id && ARRAY['4'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 21:21:43:
--------------------------------

                    -- Samsung Galaxy Note10 Lite підтримуватиме нову функцію S Pen
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('функцію')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1098
                        AND posts.tag_id && ARRAY['4'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 21:21:43:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1479 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:21:43:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1479 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:21:43:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1479) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 21:21:43:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1617 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:21:43:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1617 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:21:43:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1617) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 21:21:43:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1023 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:21:43:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1023 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:21:43:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1023) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 21:21:43:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1832 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:21:43:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1832 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:21:43:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1832) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 21:21:43:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1468 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:21:43:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1468 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:21:43:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1468) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 21:21:43:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '183bf786ff606b16c9e64430cf5cb754', '141.8.143.188'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.21 21:34:03:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	ARRAY['9'::int8] && posts.tag_id 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:34:03:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	ARRAY['9'::int8] && posts.tag_id 
-- ORDER
ORDER BY posts.created_time DESC, posts.fixed DESC, posts.posted ASC 
-- ORDER
-- OFFSET
OFFSET 150 LIMIT 10;
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:34:03:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1410,1407,1404,1403,1402,1396,1395,1393,1392,1389) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 21:34:03:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '8befa76e7b3f100a2bc0917e3fcd2ea2', '100.43.91.104'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.21 21:34:03:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	posts.tag_id && ARRAY[ '11'::int8 ] 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:34:03:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	posts.tag_id && ARRAY[ '11'::int8 ] 
-- ORDER
ORDER BY posts.created_time DESC, posts.fixed DESC, posts.posted ASC 
-- ORDER
-- OFFSET
OFFSET 10 LIMIT 2;
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:34:03:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1299,1283) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 21:34:03:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	posts.tag_id && ARRAY[ '8'::int8 ] 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:34:03:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	posts.tag_id && ARRAY[ '8'::int8 ] 
-- ORDER
ORDER BY posts.created_time DESC, posts.fixed DESC, posts.posted ASC 
-- ORDER
-- OFFSET
OFFSET 0 LIMIT 1;
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:34:03:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1841) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 21:34:03:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	posts.tag_id && ARRAY[ '8'::int8 ] 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:34:03:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	posts.tag_id && ARRAY[ '8'::int8 ] 
-- ORDER
ORDER BY posts.created_time DESC, posts.fixed DESC, posts.posted ASC 
-- ORDER
-- OFFSET
OFFSET 10 LIMIT 3;
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:34:03:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1811,1809,1808) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 21:34:03:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	posts.tag_id && ARRAY[ '5'::int8, '13'::int8 ] 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:34:03:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	posts.tag_id && ARRAY[ '5'::int8, '13'::int8 ] 
-- ORDER
ORDER BY posts.created_time DESC, posts.fixed DESC, posts.posted ASC 
-- ORDER
-- OFFSET
OFFSET 0 LIMIT 1;
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:34:03:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1830) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 21:34:03:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	posts.tag_id && ARRAY[ '5'::int8, '13'::int8 ] 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:34:03:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	posts.tag_id && ARRAY[ '5'::int8, '13'::int8 ] 
-- ORDER
ORDER BY posts.created_time DESC, posts.fixed DESC, posts.posted ASC 
-- ORDER
-- OFFSET
OFFSET 0 LIMIT 4;
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:34:03:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1830,1821,1819,1799) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 21:34:03:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	posts.tag_id && ARRAY[ '6'::int8, '7'::int8 ] 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:34:03:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	posts.tag_id && ARRAY[ '6'::int8, '7'::int8 ] 
-- ORDER
ORDER BY posts.created_time DESC, posts.fixed DESC, posts.posted ASC 
-- ORDER
-- OFFSET
OFFSET 0 LIMIT 10;
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:34:03:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1841,1839,1838,1837,1828,1827,1826,1820,1818,1817) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 21:35:02:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1629 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:35:02:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1629 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:35:02:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1629) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 21:35:02:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1629
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.21 21:35:02:
--------------------------------

                    -- Нова батарея дозволить не заряджати телефон 5 днів
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('батарея')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1629
                        AND posts.tag_id && ARRAY['7'::int8, '8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 21:35:02:
--------------------------------

                    -- Нова батарея дозволить не заряджати телефон 5 днів
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('дозволить')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1629
                        AND posts.tag_id && ARRAY['7'::int8, '8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 21:35:02:
--------------------------------

                    -- Нова батарея дозволить не заряджати телефон 5 днів
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('заряджати')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1629
                        AND posts.tag_id && ARRAY['7'::int8, '8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 21:35:02:
--------------------------------

                    -- Нова батарея дозволить не заряджати телефон 5 днів
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('телефон')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1629
                        AND posts.tag_id && ARRAY['7'::int8, '8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 21:35:02:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 194 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:35:02:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 194 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:35:02:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (194) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 21:35:02:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 63 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:35:02:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 63 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:35:02:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (63) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 21:35:02:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1180 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:35:02:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1180 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:35:02:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1180) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 21:35:02:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 51 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:35:02:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 51 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:35:02:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (51) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 21:35:02:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 163 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:35:02:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 163 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:35:02:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (163) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 21:35:02:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( 'b13dab9b7ba4a1232cc2e5f9d81fd5f0', '5.255.250.22'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.21 21:41:29:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1011 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:41:29:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1011 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:41:30:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1011) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 21:41:30:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1011
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.21 21:41:30:
--------------------------------

                    -- Huawei та Honor випередили Xiaomi та Apple на китайському ринку
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Huawei')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1011
                        AND posts.tag_id && ARRAY['4'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 21:41:30:
--------------------------------

                    -- Huawei та Honor випередили Xiaomi та Apple на китайському ринку
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('випередили')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1011
                        AND posts.tag_id && ARRAY['4'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 21:41:30:
--------------------------------

                    -- Huawei та Honor випередили Xiaomi та Apple на китайському ринку
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Xiaomi')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1011
                        AND posts.tag_id && ARRAY['4'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 21:41:30:
--------------------------------

                    -- Huawei та Honor випередили Xiaomi та Apple на китайському ринку
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('китайському')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1011
                        AND posts.tag_id && ARRAY['4'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 21:41:30:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 274 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:41:30:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 274 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:41:30:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (274) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 21:41:30:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1604 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:41:30:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1604 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:41:30:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1604) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 21:41:30:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 979 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:41:30:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 979 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:41:30:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (979) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 21:41:30:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 895 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:41:30:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 895 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:41:30:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (895) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 21:41:30:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1575 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:41:30:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1575 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:41:30:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1575) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 21:41:30:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( 'f95d434096c48717bb894e301e9b4f49', '77.88.47.80'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.21 21:45:19:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1001 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:45:19:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1001 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:45:19:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1001) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 21:45:19:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1001
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.21 21:45:19:
--------------------------------

                    -- Зеленський потрапив у топ-5 запитів Google в Білорусі
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Зеленський')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1001
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 21:45:19:
--------------------------------

                    -- Зеленський потрапив у топ-5 запитів Google в Білорусі
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('потрапив')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1001
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 21:45:19:
--------------------------------

                    -- Зеленський потрапив у топ-5 запитів Google в Білорусі
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('запитів')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1001
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 21:45:19:
--------------------------------

                    -- Зеленський потрапив у топ-5 запитів Google в Білорусі
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Google')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1001
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 21:45:20:
--------------------------------

                    -- Зеленський потрапив у топ-5 запитів Google в Білорусі
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Білорусі')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1001
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 21:45:20:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 831 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:45:20:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 831 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:45:20:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (831) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 21:45:20:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 972 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:45:20:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 972 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:45:20:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (972) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 21:45:20:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1651 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:45:20:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1651 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:45:20:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1651) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 21:45:20:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 997 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:45:20:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 997 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:45:20:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (997) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 21:45:20:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1828 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:45:20:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1828 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:45:20:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1828) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 21:45:20:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '1a0d36373ed7a1d578ee56dab756da62', '66.249.65.146'::inet, 'Chrome' );
--------------------------------
2020.01.21 21:54:15:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	ARRAY['7'::int8] && posts.tag_id 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:54:15:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	ARRAY['7'::int8] && posts.tag_id 
-- ORDER
ORDER BY posts.created_time DESC, posts.fixed DESC, posts.posted ASC 
-- ORDER
-- OFFSET
OFFSET 340 LIMIT 10;
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 21:54:15:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (837,835,832,831,830,820,819,818,816,815) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 21:54:15:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '08ee39910b1f536432b80acf18389f6b', '5.255.250.169'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.21 22:07:53:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 616 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:07:53:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 616 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:07:53:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (616) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:07:53:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 616
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:07:53:
--------------------------------

                    -- Вчені придумали гідрокостюм, який захищає від акулячих зубів
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('придумали')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 616
                        AND posts.tag_id && ARRAY['7'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:07:53:
--------------------------------

                    -- Вчені придумали гідрокостюм, який захищає від акулячих зубів
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('гідрокостюм,')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 616
                        AND posts.tag_id && ARRAY['7'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:07:53:
--------------------------------

                    -- Вчені придумали гідрокостюм, який захищає від акулячих зубів
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('захищає')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 616
                        AND posts.tag_id && ARRAY['7'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:07:53:
--------------------------------

                    -- Вчені придумали гідрокостюм, який захищає від акулячих зубів
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('акулячих')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 616
                        AND posts.tag_id && ARRAY['7'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:07:53:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 741 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:07:53:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 741 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:07:53:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (741) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:07:53:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 542 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:07:53:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 542 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:07:53:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (542) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:07:53:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1047 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:07:53:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1047 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:07:53:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1047) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:07:53:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 136 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:07:53:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 136 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:07:53:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (136) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:07:53:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1579 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:07:53:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1579 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:07:53:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1579) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:07:53:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( 'e87b63c0e972115c731c4743b8768407', '37.9.87.162'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.21 22:07:53:
--------------------------------
SELECT count( DISTINCT ua_hash ) as count FROM visit_counter WHERE date_trunc('day', ts) = date_trunc('day', now());
--------------------------------
2020.01.21 22:14:16:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:14:16:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 
-- ORDER
ORDER BY posts.created_time DESC, posts.fixed DESC, posts.posted ASC 
-- ORDER
-- OFFSET
OFFSET 360 LIMIT 10;
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:14:16:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1481,1480,1479,1478,1477,1476,1475,1474,1473,1472) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:14:16:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '50027cc66ea01f9c2732ba30158ccdd1', '5.255.250.61'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.21 22:20:38:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 969 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:20:38:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 969 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:20:38:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (969) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:20:38:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 969
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:20:38:
--------------------------------

                    -- Компанія Intel розробила процесор для квантових комп’ютерів
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Компанія')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 969
                        AND posts.tag_id && ARRAY['3'::int8, '4'::int8, '7'::int8, '8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:20:38:
--------------------------------

                    -- Компанія Intel розробила процесор для квантових комп’ютерів
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('розробила')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 969
                        AND posts.tag_id && ARRAY['3'::int8, '4'::int8, '7'::int8, '8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:20:38:
--------------------------------

                    -- Компанія Intel розробила процесор для квантових комп’ютерів
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('процесор')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 969
                        AND posts.tag_id && ARRAY['3'::int8, '4'::int8, '7'::int8, '8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:20:38:
--------------------------------

                    -- Компанія Intel розробила процесор для квантових комп’ютерів
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('квантових')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 969
                        AND posts.tag_id && ARRAY['3'::int8, '4'::int8, '7'::int8, '8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:20:38:
--------------------------------

                    -- Компанія Intel розробила процесор для квантових комп’ютерів
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('комп’ютерів')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 969
                        AND posts.tag_id && ARRAY['3'::int8, '4'::int8, '7'::int8, '8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:20:38:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 45 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:20:38:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 45 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:20:38:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (45) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:20:38:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 469 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:20:38:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 469 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:20:38:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (469) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:20:38:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1094 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:20:38:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1094 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:20:38:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1094) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:20:38:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1340 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:20:38:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1340 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:20:38:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1340) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:20:38:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 860 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:20:38:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 860 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:20:38:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (860) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:20:38:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( 'f88abc3acbf5ba68791a843ba75151ee', '100.43.85.116'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.21 22:21:51:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1207 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:21:51:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1207 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:21:51:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1207) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:21:51:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1207
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:21:51:
--------------------------------

                    -- Вчені розробили новий метод підрахунку концентрації мікропластику в океані
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('розробили')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1207
                        AND posts.tag_id && ARRAY['7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:21:51:
--------------------------------

                    -- Вчені розробили новий метод підрахунку концентрації мікропластику в океані
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('підрахунку')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1207
                        AND posts.tag_id && ARRAY['7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:21:51:
--------------------------------

                    -- Вчені розробили новий метод підрахунку концентрації мікропластику в океані
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('концентрації')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1207
                        AND posts.tag_id && ARRAY['7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:21:51:
--------------------------------

                    -- Вчені розробили новий метод підрахунку концентрації мікропластику в океані
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('мікропластику')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1207
                        AND posts.tag_id && ARRAY['7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:21:51:
--------------------------------

                    -- Вчені розробили новий метод підрахунку концентрації мікропластику в океані
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('океані')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1207
                        AND posts.tag_id && ARRAY['7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:21:51:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1582 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:21:51:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1582 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:21:51:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1582) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:21:51:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 524 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:21:51:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 524 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:21:51:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (524) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:21:51:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 73 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:21:51:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 73 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:21:51:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (73) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:21:51:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 780 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:21:51:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 780 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:21:51:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (780) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:21:51:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '9aa1a269534ea11c9fda025da7abb5fc', '141.8.188.141'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.21 22:24:00:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1395 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:24:00:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1395 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:24:00:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1395) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:24:00:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1395
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:24:00:
--------------------------------

                    -- Японський супутник потрапив у Книгу рекордів Гіннесса за найнижчу орбіту польоту
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Японський')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1395
                        AND posts.tag_id && ARRAY['8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:24:00:
--------------------------------

                    -- Японський супутник потрапив у Книгу рекордів Гіннесса за найнижчу орбіту польоту
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('супутник')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1395
                        AND posts.tag_id && ARRAY['8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:24:00:
--------------------------------

                    -- Японський супутник потрапив у Книгу рекордів Гіннесса за найнижчу орбіту польоту
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('потрапив')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1395
                        AND posts.tag_id && ARRAY['8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:24:00:
--------------------------------

                    -- Японський супутник потрапив у Книгу рекордів Гіннесса за найнижчу орбіту польоту
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('рекордів')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1395
                        AND posts.tag_id && ARRAY['8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:24:00:
--------------------------------

                    -- Японський супутник потрапив у Книгу рекордів Гіннесса за найнижчу орбіту польоту
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Гіннесса')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1395
                        AND posts.tag_id && ARRAY['8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:24:00:
--------------------------------

                    -- Японський супутник потрапив у Книгу рекордів Гіннесса за найнижчу орбіту польоту
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('найнижчу')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1395
                        AND posts.tag_id && ARRAY['8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:24:00:
--------------------------------

                    -- Японський супутник потрапив у Книгу рекордів Гіннесса за найнижчу орбіту польоту
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('орбіту')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1395
                        AND posts.tag_id && ARRAY['8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:24:00:
--------------------------------

                    -- Японський супутник потрапив у Книгу рекордів Гіннесса за найнижчу орбіту польоту
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('польоту')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1395
                        AND posts.tag_id && ARRAY['8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:24:00:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 583 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:24:00:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 583 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:24:00:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (583) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:24:00:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1796 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:24:00:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1796 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:24:00:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1796) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:24:00:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 764 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:24:00:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 764 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:24:00:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (764) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:24:00:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1536 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:24:00:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1536 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:24:00:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1536) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:24:00:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 83 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:24:00:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 83 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:24:00:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (83) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:24:00:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( 'dc2524bde968e5bf79a82da3d3f283f5', '141.8.188.203'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.21 22:24:08:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 888 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:24:08:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 888 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:24:08:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (888) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:24:08:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 888
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:24:08:
--------------------------------

                    -- Принципово нові, магнітні транзистори працюють без електрики
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Принципово')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 888
                        AND posts.tag_id && ARRAY['7'::int8, '8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:24:08:
--------------------------------

                    -- Принципово нові, магнітні транзистори працюють без електрики
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('магнітні')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 888
                        AND posts.tag_id && ARRAY['7'::int8, '8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:24:09:
--------------------------------

                    -- Принципово нові, магнітні транзистори працюють без електрики
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('транзистори')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 888
                        AND posts.tag_id && ARRAY['7'::int8, '8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:24:09:
--------------------------------

                    -- Принципово нові, магнітні транзистори працюють без електрики
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('працюють')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 888
                        AND posts.tag_id && ARRAY['7'::int8, '8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:24:09:
--------------------------------

                    -- Принципово нові, магнітні транзистори працюють без електрики
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('електрики')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 888
                        AND posts.tag_id && ARRAY['7'::int8, '8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:24:09:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1405 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:24:09:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1405 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:24:09:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1405) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:24:09:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1449 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:24:09:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1449 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:24:09:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1449) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:24:09:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1639 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:24:09:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1639 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:24:09:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1639) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:24:09:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1166 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:24:09:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1166 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:24:09:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1166) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:24:09:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1822 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:24:09:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1822 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:24:09:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1822) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:24:09:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( 'e87b63c0e972115c731c4743b8768407', '37.9.87.162'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.21 22:25:51:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1461 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:25:51:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1461 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:25:51:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1461) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:25:51:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1461
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:25:51:
--------------------------------

                    -- Археологи знайшли древній палац майя, якому понад тисячу років
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Археологи')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1461
                        AND posts.tag_id && ARRAY['0'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:25:51:
--------------------------------

                    -- Археологи знайшли древній палац майя, якому понад тисячу років
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('знайшли')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1461
                        AND posts.tag_id && ARRAY['0'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:25:51:
--------------------------------

                    -- Археологи знайшли древній палац майя, якому понад тисячу років
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('древній')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1461
                        AND posts.tag_id && ARRAY['0'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:25:51:
--------------------------------

                    -- Археологи знайшли древній палац майя, якому понад тисячу років
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('тисячу')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1461
                        AND posts.tag_id && ARRAY['0'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:25:51:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1054 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:25:51:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1054 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:25:51:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1054) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:25:51:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 186 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:25:51:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 186 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:25:51:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (186) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:25:51:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 784 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:25:51:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 784 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:25:51:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (784) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:25:51:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 945 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:25:51:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 945 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:25:51:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (945) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:25:51:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 686 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:25:51:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 686 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:25:51:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (686) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:25:51:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( 'fb818a1ce43c798ccff87db291e5beb0', '5.255.250.55'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.21 22:26:11:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1751 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:26:11:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1751 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:26:11:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1751) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:26:11:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1751
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:26:11:
--------------------------------

                    -- Google припиняє підтримку додатків Chrome
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Google')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1751
                        AND posts.tag_id && ARRAY['4'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:26:11:
--------------------------------

                    -- Google припиняє підтримку додатків Chrome
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('припиняє')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1751
                        AND posts.tag_id && ARRAY['4'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:26:11:
--------------------------------

                    -- Google припиняє підтримку додатків Chrome
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('підтримку')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1751
                        AND posts.tag_id && ARRAY['4'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:26:11:
--------------------------------

                    -- Google припиняє підтримку додатків Chrome
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('додатків')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1751
                        AND posts.tag_id && ARRAY['4'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:26:11:
--------------------------------

                    -- Google припиняє підтримку додатків Chrome
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Chrome')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1751
                        AND posts.tag_id && ARRAY['4'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:26:11:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1087 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:26:11:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1087 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:26:11:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1087) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:26:11:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1700 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:26:11:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1700 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:26:11:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1700) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:26:11:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 737 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:26:11:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 737 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:26:11:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (737) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:26:11:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1056 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:26:11:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1056 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:26:11:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1056) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:26:11:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( 'af0867a57bd84d5171ca60d9c5c5bc25', '141.8.143.193'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.21 22:35:25:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1210 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:35:25:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1210 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:35:25:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1210) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:35:25:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1210
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:35:25:
--------------------------------

                    -- Понад 30 веб-сайтів використовуються для фішингу кредитних карт
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('веб-сайтів')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1210
                        AND posts.tag_id && ARRAY['5'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:35:25:
--------------------------------

                    -- Понад 30 веб-сайтів використовуються для фішингу кредитних карт
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('використовуються')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1210
                        AND posts.tag_id && ARRAY['5'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:35:25:
--------------------------------

                    -- Понад 30 веб-сайтів використовуються для фішингу кредитних карт
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('фішингу')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1210
                        AND posts.tag_id && ARRAY['5'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:35:25:
--------------------------------

                    -- Понад 30 веб-сайтів використовуються для фішингу кредитних карт
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('кредитних')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1210
                        AND posts.tag_id && ARRAY['5'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:35:25:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1691 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:35:25:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1691 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:35:25:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1691) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:35:25:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1221 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:35:25:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1221 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:35:25:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1221) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:35:25:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1799 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:35:25:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1799 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:35:25:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1799) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:35:25:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1521 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:35:25:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1521 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:35:25:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1521) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:35:25:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '08ee39910b1f536432b80acf18389f6b', '5.255.250.169'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.21 22:36:12:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1297 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:36:12:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1297 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:36:12:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1297) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:36:12:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1297
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:36:12:
--------------------------------

                    -- YouTube для Android спрощує пошук нового контенту
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('YouTube')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1297
                        AND posts.tag_id && ARRAY['4'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:36:12:
--------------------------------

                    -- YouTube для Android спрощує пошук нового контенту
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Android')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1297
                        AND posts.tag_id && ARRAY['4'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:36:12:
--------------------------------

                    -- YouTube для Android спрощує пошук нового контенту
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('спрощує')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1297
                        AND posts.tag_id && ARRAY['4'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:36:12:
--------------------------------

                    -- YouTube для Android спрощує пошук нового контенту
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('нового')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1297
                        AND posts.tag_id && ARRAY['4'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:36:12:
--------------------------------

                    -- YouTube для Android спрощує пошук нового контенту
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('контенту')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1297
                        AND posts.tag_id && ARRAY['4'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:36:12:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 170 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:36:12:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 170 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:36:12:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (170) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:36:12:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1549 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:36:12:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1549 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:36:12:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1549) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:36:12:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1483 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:36:12:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1483 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:36:12:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1483) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:36:12:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1805 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:36:12:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1805 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:36:12:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1805) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:36:12:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1496 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:36:12:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1496 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:36:12:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1496) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:36:12:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( 'f9c726238c5a2fb831419f1d46e86361', '5.255.250.59'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.21 22:38:38:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 996 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:38:38:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 996 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:38:38:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (996) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:38:38:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 996
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:38:38:
--------------------------------

                    -- Стала відома дата анонсу смартфонів Galaxy S11
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('відома')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 996
                        AND posts.tag_id && ARRAY['9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:38:38:
--------------------------------

                    -- Стала відома дата анонсу смартфонів Galaxy S11
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('анонсу')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 996
                        AND posts.tag_id && ARRAY['9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:38:38:
--------------------------------

                    -- Стала відома дата анонсу смартфонів Galaxy S11
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('смартфонів')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 996
                        AND posts.tag_id && ARRAY['9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:38:38:
--------------------------------

                    -- Стала відома дата анонсу смартфонів Galaxy S11
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Galaxy')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 996
                        AND posts.tag_id && ARRAY['9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:38:38:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1514 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:38:38:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1514 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:38:38:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1514) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:38:38:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1772 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:38:38:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1772 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:38:38:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1772) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:38:38:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1085 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:38:38:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1085 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:38:38:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1085) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:38:38:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( 'e87b63c0e972115c731c4743b8768407', '37.9.87.162'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.21 22:53:35:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1228 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:53:35:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1228 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:53:35:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1228) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:53:35:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1228
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:53:35:
--------------------------------

                    -- Археологи знайшли в Греції дві царські гробниці набиті золотом
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Археологи')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1228
                        AND posts.tag_id && ARRAY['7'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:53:35:
--------------------------------

                    -- Археологи знайшли в Греції дві царські гробниці набиті золотом
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('знайшли')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1228
                        AND posts.tag_id && ARRAY['7'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:53:35:
--------------------------------

                    -- Археологи знайшли в Греції дві царські гробниці набиті золотом
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Греції')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1228
                        AND posts.tag_id && ARRAY['7'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:53:35:
--------------------------------

                    -- Археологи знайшли в Греції дві царські гробниці набиті золотом
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('царські')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1228
                        AND posts.tag_id && ARRAY['7'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:53:35:
--------------------------------

                    -- Археологи знайшли в Греції дві царські гробниці набиті золотом
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('гробниці')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1228
                        AND posts.tag_id && ARRAY['7'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:53:35:
--------------------------------

                    -- Археологи знайшли в Греції дві царські гробниці набиті золотом
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('набиті')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1228
                        AND posts.tag_id && ARRAY['7'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:53:35:
--------------------------------

                    -- Археологи знайшли в Греції дві царські гробниці набиті золотом
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('золотом')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1228
                        AND posts.tag_id && ARRAY['7'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:53:35:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1642 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:53:35:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1642 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:53:35:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1642) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:53:35:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1543 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:53:35:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1543 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:53:35:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1543) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:53:35:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1782 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:53:35:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1782 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:53:35:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1782) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:53:35:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 495 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:53:35:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 495 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:53:35:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (495) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:53:35:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 480 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:53:35:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 480 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:53:35:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (480) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:53:35:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '1a0d36373ed7a1d578ee56dab756da62', '66.249.65.146'::inet, 'Chrome' );
--------------------------------
2020.01.21 22:54:59:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1605 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:54:59:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1605 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:54:59:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1605) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:54:59:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1605
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:54:59:
--------------------------------

                    -- В СБУ заявили про викриття групи хакерів, які крали кошти держпідприємств
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('заявили')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1605
                        AND posts.tag_id && ARRAY['3'::int8, '5'::int8, '9'::int8, '11'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:54:59:
--------------------------------

                    -- В СБУ заявили про викриття групи хакерів, які крали кошти держпідприємств
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('викриття')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1605
                        AND posts.tag_id && ARRAY['3'::int8, '5'::int8, '9'::int8, '11'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:55:00:
--------------------------------

                    -- В СБУ заявили про викриття групи хакерів, які крали кошти держпідприємств
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('хакерів,')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1605
                        AND posts.tag_id && ARRAY['3'::int8, '5'::int8, '9'::int8, '11'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:55:00:
--------------------------------

                    -- В СБУ заявили про викриття групи хакерів, які крали кошти держпідприємств
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('держпідприємств')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1605
                        AND posts.tag_id && ARRAY['3'::int8, '5'::int8, '9'::int8, '11'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:55:00:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 245 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:55:00:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 245 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:55:00:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (245) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:55:00:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 708 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:55:00:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 708 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:55:00:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (708) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:55:00:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 78 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:55:00:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 78 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:55:00:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (78) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:55:00:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1526 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:55:00:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1526 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:55:00:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1526) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:55:00:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( 'ae522c1c5d2bbabd6a9e3b15f84d12fa', '100.43.90.114'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.21 22:57:18:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1792 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:57:18:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1792 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:57:18:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1792) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:57:18:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1792
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:57:19:
--------------------------------

                    -- Вчені розповіли, як молоко впливає на тривалість життя
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('розповіли,')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1792
                        AND posts.tag_id && ARRAY['7'::int8, '8'::int8, '12'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:57:19:
--------------------------------

                    -- Вчені розповіли, як молоко впливає на тривалість життя
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('молоко')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1792
                        AND posts.tag_id && ARRAY['7'::int8, '8'::int8, '12'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:57:19:
--------------------------------

                    -- Вчені розповіли, як молоко впливає на тривалість життя
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('впливає')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1792
                        AND posts.tag_id && ARRAY['7'::int8, '8'::int8, '12'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:57:19:
--------------------------------

                    -- Вчені розповіли, як молоко впливає на тривалість життя
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('тривалість')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1792
                        AND posts.tag_id && ARRAY['7'::int8, '8'::int8, '12'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:57:19:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1353 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:57:19:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1353 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:57:19:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1353) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:57:19:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 748 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:57:19:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 748 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:57:19:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (748) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:57:19:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1322 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:57:19:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1322 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:57:19:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1322) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:57:19:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 658 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:57:19:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 658 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 22:57:19:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (658) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 22:57:19:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( 'e87b63c0e972115c731c4743b8768407', '37.9.87.162'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.21 23:14:22:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1151 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 23:14:22:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1151 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 23:14:22:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1151) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 23:14:22:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1151
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.21 23:14:22:
--------------------------------

                    -- YouTube Music для iOS та Android отримав нові персоналізовані плейлисти
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('YouTube')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1151
                        AND posts.tag_id && ARRAY['4'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 23:14:22:
--------------------------------

                    -- YouTube Music для iOS та Android отримав нові персоналізовані плейлисти
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Android')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1151
                        AND posts.tag_id && ARRAY['4'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 23:14:22:
--------------------------------

                    -- YouTube Music для iOS та Android отримав нові персоналізовані плейлисти
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('отримав')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1151
                        AND posts.tag_id && ARRAY['4'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 23:14:22:
--------------------------------

                    -- YouTube Music для iOS та Android отримав нові персоналізовані плейлисти
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('персоналізовані')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1151
                        AND posts.tag_id && ARRAY['4'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 23:14:22:
--------------------------------

                    -- YouTube Music для iOS та Android отримав нові персоналізовані плейлисти
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('плейлисти')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1151
                        AND posts.tag_id && ARRAY['4'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 23:14:22:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1363 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 23:14:22:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1363 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 23:14:22:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1363) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 23:14:22:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1433 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 23:14:22:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1433 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 23:14:22:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1433) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 23:14:22:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '08ee39910b1f536432b80acf18389f6b', '5.255.250.169'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.21 23:14:23:
--------------------------------
SELECT count( DISTINCT ua_hash ) as count FROM visit_counter WHERE date_trunc('day', ts) = date_trunc('day', now());
--------------------------------
2020.01.21 23:16:00:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 601 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 23:16:00:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 601 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 23:16:00:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (601) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 23:16:00:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 601
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.21 23:16:00:
--------------------------------

                    -- У Франції знайшли підземний склеп з останками віком 3,5 тисячі років
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Франції')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 601
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 23:16:00:
--------------------------------

                    -- У Франції знайшли підземний склеп з останками віком 3,5 тисячі років
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('знайшли')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 601
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 23:16:00:
--------------------------------

                    -- У Франції знайшли підземний склеп з останками віком 3,5 тисячі років
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('підземний')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 601
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 23:16:00:
--------------------------------

                    -- У Франції знайшли підземний склеп з останками віком 3,5 тисячі років
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('останками')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 601
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 23:16:00:
--------------------------------

                    -- У Франції знайшли підземний склеп з останками віком 3,5 тисячі років
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('тисячі')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 601
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 23:16:00:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 738 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 23:16:00:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 738 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 23:16:00:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (738) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 23:16:00:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1190 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 23:16:00:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1190 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 23:16:00:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1190) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 23:16:00:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1041 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 23:16:00:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1041 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 23:16:00:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1041) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 23:16:00:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1012 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 23:16:00:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1012 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 23:16:00:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1012) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 23:16:00:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1608 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 23:16:00:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1608 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 23:16:00:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1608) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 23:16:00:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( 'f9c726238c5a2fb831419f1d46e86361', '5.255.250.59'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.21 23:37:01:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1147 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 23:37:01:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1147 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 23:37:01:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1147) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 23:37:01:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1147
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.21 23:37:01:
--------------------------------

                    -- Новий матеріал перетворює вуглекислий газ нешкідливий карбонат кальцію
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('матеріал')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1147
                        AND posts.tag_id && ARRAY['7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 23:37:01:
--------------------------------

                    -- Новий матеріал перетворює вуглекислий газ нешкідливий карбонат кальцію
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('перетворює')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1147
                        AND posts.tag_id && ARRAY['7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 23:37:01:
--------------------------------

                    -- Новий матеріал перетворює вуглекислий газ нешкідливий карбонат кальцію
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('вуглекислий')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1147
                        AND posts.tag_id && ARRAY['7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 23:37:01:
--------------------------------

                    -- Новий матеріал перетворює вуглекислий газ нешкідливий карбонат кальцію
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('нешкідливий')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1147
                        AND posts.tag_id && ARRAY['7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 23:37:01:
--------------------------------

                    -- Новий матеріал перетворює вуглекислий газ нешкідливий карбонат кальцію
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('карбонат')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1147
                        AND posts.tag_id && ARRAY['7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 23:37:01:
--------------------------------

                    -- Новий матеріал перетворює вуглекислий газ нешкідливий карбонат кальцію
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('кальцію')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1147
                        AND posts.tag_id && ARRAY['7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 23:37:01:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1808 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 23:37:01:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1808 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 23:37:01:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1808) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 23:37:01:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 803 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 23:37:01:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 803 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 23:37:01:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (803) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 23:37:01:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1334 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 23:37:01:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1334 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 23:37:01:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1334) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 23:37:01:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 398 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 23:37:01:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 398 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 23:37:01:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (398) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 23:37:02:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( 'dc2524bde968e5bf79a82da3d3f283f5', '141.8.188.203'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.21 23:37:03:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 946 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 23:37:03:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 946 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 23:37:03:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (946) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 23:37:03:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 946
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.21 23:37:03:
--------------------------------

                    -- Google Chrome для ПК отримав нову функцію для роботи зі смартфоном
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Google')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 946
                        AND posts.tag_id && ARRAY['4'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 23:37:03:
--------------------------------

                    -- Google Chrome для ПК отримав нову функцію для роботи зі смартфоном
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Chrome')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 946
                        AND posts.tag_id && ARRAY['4'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 23:37:03:
--------------------------------

                    -- Google Chrome для ПК отримав нову функцію для роботи зі смартфоном
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('отримав')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 946
                        AND posts.tag_id && ARRAY['4'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 23:37:03:
--------------------------------

                    -- Google Chrome для ПК отримав нову функцію для роботи зі смартфоном
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('функцію')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 946
                        AND posts.tag_id && ARRAY['4'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 23:37:03:
--------------------------------

                    -- Google Chrome для ПК отримав нову функцію для роботи зі смартфоном
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('роботи')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 946
                        AND posts.tag_id && ARRAY['4'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 23:37:03:
--------------------------------

                    -- Google Chrome для ПК отримав нову функцію для роботи зі смартфоном
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('смартфоном')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 946
                        AND posts.tag_id && ARRAY['4'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 23:37:03:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 231 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 23:37:03:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 231 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 23:37:03:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (231) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 23:37:03:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 369 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 23:37:03:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 369 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 23:37:03:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (369) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 23:37:03:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1369 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 23:37:03:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1369 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 23:37:03:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1369) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 23:37:03:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1532 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 23:37:03:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1532 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 23:37:03:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1532) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 23:37:03:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1453 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 23:37:03:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1453 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 23:37:03:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1453) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 23:37:03:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( 'e87b63c0e972115c731c4743b8768407', '37.9.87.162'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.21 23:37:04:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1309 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 23:37:04:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1309 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 23:37:04:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1309) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 23:37:04:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1309
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.21 23:37:04:
--------------------------------

                    -- У Google Chrome знайшли серйозну уразливість, пов&#039;язану з витіками паролів
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Google')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1309
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8, '9'::int8, '11'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 23:37:05:
--------------------------------

                    -- У Google Chrome знайшли серйозну уразливість, пов&#039;язану з витіками паролів
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Chrome')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1309
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8, '9'::int8, '11'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 23:37:05:
--------------------------------

                    -- У Google Chrome знайшли серйозну уразливість, пов&#039;язану з витіками паролів
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('знайшли')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1309
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8, '9'::int8, '11'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 23:37:05:
--------------------------------

                    -- У Google Chrome знайшли серйозну уразливість, пов&#039;язану з витіками паролів
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('серйозну')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1309
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8, '9'::int8, '11'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 23:37:05:
--------------------------------

                    -- У Google Chrome знайшли серйозну уразливість, пов&#039;язану з витіками паролів
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('уразливість,')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1309
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8, '9'::int8, '11'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 23:37:05:
--------------------------------

                    -- У Google Chrome знайшли серйозну уразливість, пов&#039;язану з витіками паролів
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('пов&#039;язану')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1309
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8, '9'::int8, '11'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 23:37:05:
--------------------------------

                    -- У Google Chrome знайшли серйозну уразливість, пов&#039;язану з витіками паролів
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('витіками')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1309
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8, '9'::int8, '11'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 23:37:05:
--------------------------------

                    -- У Google Chrome знайшли серйозну уразливість, пов&#039;язану з витіками паролів
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('паролів')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1309
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8, '9'::int8, '11'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 23:37:05:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 399 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 23:37:05:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 399 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 23:37:05:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (399) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 23:37:05:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '31e5052d8386f7afe4c8c2ec3d2f157c', '5.255.250.13'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.21 23:58:38:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 665 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 23:58:38:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 665 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 23:58:38:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (665) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 23:58:38:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 665
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.21 23:58:38:
--------------------------------

                    -- State of Decay 2 з’явиться в Steam
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('з’явиться')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 665
                        AND posts.tag_id && ARRAY['3'::int8, '4'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.21 23:58:38:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1734 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 23:58:38:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1734 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 23:58:38:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1734) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 23:58:38:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 951 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 23:58:38:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 951 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 23:58:38:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (951) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 23:58:38:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1702 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 23:58:38:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1702 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 23:58:38:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1702) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 23:58:38:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 848 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 23:58:38:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 848 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 23:58:38:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (848) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 23:58:38:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1708 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 23:58:38:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1708 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 23:58:38:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1708) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 23:58:38:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1191 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 23:58:38:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1191 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 23:58:38:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1191) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 23:58:38:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 410 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 23:58:38:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 410 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 23:58:38:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (410) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 23:58:38:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1780 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 23:58:38:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1780 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 23:58:38:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1780) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 23:58:38:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1158 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 23:58:38:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1158 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 23:58:38:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1158) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 23:58:38:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1457 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 23:58:38:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1457 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.21 23:58:38:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1457) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.21 23:58:38:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( 'fb818a1ce43c798ccff87db291e5beb0', '5.255.250.55'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.21 23:58:39:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( 'fb818a1ce43c798ccff87db291e5beb0', '5.255.250.55'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.22 00:17:46:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 644 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 00:17:46:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 644 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 00:17:46:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (644) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.22 00:17:46:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 644
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.22 00:17:46:
--------------------------------

                    -- Встановлена можлива причина смерті Тутанхамона
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Встановлена')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 644
                        AND posts.tag_id && ARRAY['7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.22 00:17:46:
--------------------------------

                    -- Встановлена можлива причина смерті Тутанхамона
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('можлива')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 644
                        AND posts.tag_id && ARRAY['7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.22 00:17:46:
--------------------------------

                    -- Встановлена можлива причина смерті Тутанхамона
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('причина')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 644
                        AND posts.tag_id && ARRAY['7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.22 00:17:46:
--------------------------------

                    -- Встановлена можлива причина смерті Тутанхамона
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('смерті')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 644
                        AND posts.tag_id && ARRAY['7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.22 00:17:46:
--------------------------------

                    -- Встановлена можлива причина смерті Тутанхамона
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Тутанхамона')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 644
                        AND posts.tag_id && ARRAY['7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.22 00:17:46:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 507 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 00:17:46:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 507 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 00:17:46:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (507) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.22 00:17:46:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1192 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 00:17:46:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1192 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 00:17:46:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1192) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.22 00:17:46:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 570 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 00:17:46:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 570 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 00:17:46:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (570) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.22 00:17:46:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 938 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 00:17:46:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 938 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 00:17:46:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (938) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.22 00:17:46:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( 'e497e463b34e717235341f3a7fe72409', '100.43.85.122'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.22 00:17:46:
--------------------------------
SELECT count( DISTINCT ua_hash ) as count FROM visit_counter WHERE date_trunc('day', ts) = date_trunc('day', now());
--------------------------------
2020.01.22 00:19:12:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1674 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 00:19:12:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1674 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 00:19:12:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1674) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.22 00:19:12:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1674
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.22 00:19:12:
--------------------------------

                    -- Philips 243B9 став новим бюджетним монітором із USB-C хабом
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Philips')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1674
                        AND posts.tag_id && ARRAY['9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.22 00:19:12:
--------------------------------

                    -- Philips 243B9 став новим бюджетним монітором із USB-C хабом
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('бюджетним')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1674
                        AND posts.tag_id && ARRAY['9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.22 00:19:12:
--------------------------------

                    -- Philips 243B9 став новим бюджетним монітором із USB-C хабом
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('монітором')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1674
                        AND posts.tag_id && ARRAY['9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.22 00:19:12:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1107 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 00:19:12:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1107 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 00:19:12:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1107) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.22 00:19:12:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1701 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 00:19:12:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1701 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 00:19:12:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1701) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.22 00:19:12:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1619 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 00:19:12:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1619 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 00:19:12:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1619) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.22 00:19:12:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 828 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 00:19:12:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 828 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 00:19:12:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (828) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.22 00:19:12:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1725 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 00:19:12:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1725 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 00:19:12:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1725) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.22 00:19:12:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '1a0d36373ed7a1d578ee56dab756da62', '66.249.65.146'::inet, 'Chrome' );
--------------------------------
2020.01.22 00:22:42:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1590 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 00:22:42:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1590 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 00:22:42:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1590) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.22 00:22:42:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1590
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.22 00:22:42:
--------------------------------

                    -- У Facebook та Instagram можна буде регулювати кількість політичної реклами
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Facebook')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1590
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8, '14'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.22 00:22:42:
--------------------------------

                    -- У Facebook та Instagram можна буде регулювати кількість політичної реклами
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Instagram')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1590
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8, '14'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.22 00:22:42:
--------------------------------

                    -- У Facebook та Instagram можна буде регулювати кількість політичної реклами
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('регулювати')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1590
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8, '14'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.22 00:22:42:
--------------------------------

                    -- У Facebook та Instagram можна буде регулювати кількість політичної реклами
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('кількість')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1590
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8, '14'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.22 00:22:42:
--------------------------------

                    -- У Facebook та Instagram можна буде регулювати кількість політичної реклами
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('політичної')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1590
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8, '14'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.22 00:22:42:
--------------------------------

                    -- У Facebook та Instagram можна буде регулювати кількість політичної реклами
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('реклами')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1590
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8, '14'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.22 00:22:42:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1816 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 00:22:42:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1816 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 00:22:42:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1816) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.22 00:22:42:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 230 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 00:22:42:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 230 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 00:22:42:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (230) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.22 00:22:42:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 833 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 00:22:42:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 833 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 00:22:42:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (833) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.22 00:22:42:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1125 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 00:22:42:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1125 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 00:22:42:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1125) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.22 00:22:42:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 108 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 00:22:42:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 108 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 00:22:42:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (108) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.22 00:22:42:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( 'd52cbdfa93f492bd09d5278b076a5b9f', '141.8.143.133'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.22 00:23:15:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 725 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 00:23:15:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 725 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 00:23:15:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (725) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.22 00:23:15:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 725
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.22 00:23:15:
--------------------------------

                    -- Колонізація Марса, поки що, може бути катастрофічною
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Колонізація')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 725
                        AND posts.tag_id && ARRAY['6'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.22 00:23:15:
--------------------------------

                    -- Колонізація Марса, поки що, може бути катастрофічною
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Марса,')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 725
                        AND posts.tag_id && ARRAY['6'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.22 00:23:15:
--------------------------------

                    -- Колонізація Марса, поки що, може бути катастрофічною
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('катастрофічною')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 725
                        AND posts.tag_id && ARRAY['6'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.22 00:23:15:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1090 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 00:23:15:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1090 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 00:23:15:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1090) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.22 00:23:15:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 336 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 00:23:15:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 336 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 00:23:15:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (336) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.22 00:23:15:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1455 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 00:23:15:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1455 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 00:23:15:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1455) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.22 00:23:15:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 171 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 00:23:15:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 171 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 00:23:15:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (171) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.22 00:23:15:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1174 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 00:23:15:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1174 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 00:23:15:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1174) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.22 00:23:15:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( 'f8ef41e54041fc9c40c1b29903da2fc7', '100.43.90.119'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.22 00:23:26:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	ARRAY['7'::int8] && posts.tag_id 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 00:23:26:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	ARRAY['7'::int8] && posts.tag_id 
-- ORDER
ORDER BY posts.created_time DESC, posts.fixed DESC, posts.posted ASC 
-- ORDER
-- OFFSET
OFFSET 80 LIMIT 10;
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 00:23:26:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1599,1595,1594,1593,1590,1588,1585,1583,1582,1580) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.22 00:23:26:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '83ad5d5c82593d4dbe95905f20978455', '141.8.188.146'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.22 00:42:06:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1291 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 00:42:06:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1291 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 00:42:06:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1291) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.22 00:42:06:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1291
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.22 00:42:06:
--------------------------------

                    -- Отримайте Ape Out безкоштовно!
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Отримайте')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1291
                        AND posts.tag_id && ARRAY['3'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.22 00:42:06:
--------------------------------

                    -- Отримайте Ape Out безкоштовно!
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('безкоштовно!')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1291
                        AND posts.tag_id && ARRAY['3'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.22 00:42:06:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1162 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 00:42:06:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1162 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 00:42:06:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1162) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.22 00:42:06:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1441 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 00:42:06:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1441 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 00:42:06:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1441) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.22 00:42:06:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1338 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 00:42:06:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1338 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 00:42:06:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1338) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.22 00:42:06:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1397 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 00:42:06:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1397 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 00:42:06:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1397) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.22 00:42:06:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1622 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 00:42:06:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1622 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 00:42:06:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1622) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.22 00:42:06:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( 'a059f30432ebe63f96a3f1bf7805d22c', '141.8.143.135'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.22 00:58:32:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	ARRAY['9'::int8] && posts.tag_id 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 00:58:32:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	ARRAY['9'::int8] && posts.tag_id 
-- ORDER
ORDER BY posts.created_time DESC, posts.fixed DESC, posts.posted ASC 
-- ORDER
-- OFFSET
OFFSET 200 LIMIT 10;
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 00:58:32:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1281,1280,1278,1277,1274,1273,1272,1265,1264,1260) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.22 00:58:32:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '7f77e2aeafb6f6ad4f96e98e6e31869a', '77.88.47.26'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.22 01:00:01:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1308 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 01:00:01:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1308 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 01:00:01:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1308) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:00:01:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1308
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:00:01:
--------------------------------

                    -- Роботи Digit навчилися співпраці задля досягнення спільної мети (відео)
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Роботи')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1308
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:00:01:
--------------------------------

                    -- Роботи Digit навчилися співпраці задля досягнення спільної мети (відео)
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('навчилися')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1308
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:00:01:
--------------------------------

                    -- Роботи Digit навчилися співпраці задля досягнення спільної мети (відео)
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('співпраці')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1308
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:00:01:
--------------------------------

                    -- Роботи Digit навчилися співпраці задля досягнення спільної мети (відео)
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('досягнення')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1308
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:00:01:
--------------------------------

                    -- Роботи Digit навчилися співпраці задля досягнення спільної мети (відео)
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('спільної')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1308
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:00:01:
--------------------------------

                    -- Роботи Digit навчилися співпраці задля досягнення спільної мети (відео)
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('(відео)')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1308
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:00:01:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1139 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 01:00:01:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1139 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 01:00:01:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1139) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:00:01:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '34283216a703738d5ba551c7a9f2e203', '93.158.161.105'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.22 01:00:01:
--------------------------------
SELECT count( DISTINCT ua_hash ) as count FROM visit_counter WHERE date_trunc('day', ts) = date_trunc('day', now());
--------------------------------
2020.01.22 01:00:14:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 01:00:14:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 
-- ORDER
ORDER BY posts.created_time DESC, posts.fixed DESC, posts.posted ASC 
-- ORDER
-- OFFSET
OFFSET 250 LIMIT 10;
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 01:00:14:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1591,1590,1589,1588,1587,1586,1585,1584,1583,1582) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:00:14:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '041b71d0e5cc69ada07c185bb281bac3', '5.255.250.62'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.22 01:00:22:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 766 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 01:00:22:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 766 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 01:00:22:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (766) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:00:22:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 766
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:00:22:
--------------------------------

                    -- Samsung вироблятиме комп&#039;ютерні процесори Intel
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Samsung')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 766
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:00:23:
--------------------------------

                    -- Samsung вироблятиме комп&#039;ютерні процесори Intel
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('вироблятиме')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 766
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:00:23:
--------------------------------

                    -- Samsung вироблятиме комп&#039;ютерні процесори Intel
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('комп&#039;ютерні')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 766
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:00:23:
--------------------------------

                    -- Samsung вироблятиме комп&#039;ютерні процесори Intel
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('процесори')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 766
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:00:23:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1010 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 01:00:23:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1010 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 01:00:23:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1010) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:00:23:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 911 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 01:00:23:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 911 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 01:00:23:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (911) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:00:23:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '5d38df1da31b907877f8a32c57a23ca3', '93.158.166.138'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.22 01:00:25:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	ARRAY['14'::int8] && posts.tag_id 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 01:00:25:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	ARRAY['14'::int8] && posts.tag_id 
-- ORDER
ORDER BY posts.created_time DESC, posts.fixed DESC, posts.posted ASC 
-- ORDER
-- OFFSET
OFFSET 70 LIMIT 10;
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 01:00:25:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (859,852,842,838,833,831,823,822,811,805) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:00:25:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '468cb6cbe8d6eac7bdc533307745a04f', '93.158.161.27'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.22 01:00:29:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1221
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:00:29:
--------------------------------

                    -- IT-експерти виявили нову кібератаку на користувачів платіжного сервісу PayPal
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('IT-експерти')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1221
                        AND posts.tag_id && ARRAY['3'::int8, '5'::int8, '7'::int8, '8'::int8, '11'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:00:29:
--------------------------------

                    -- IT-експерти виявили нову кібератаку на користувачів платіжного сервісу PayPal
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('виявили')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1221
                        AND posts.tag_id && ARRAY['3'::int8, '5'::int8, '7'::int8, '8'::int8, '11'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:00:29:
--------------------------------

                    -- IT-експерти виявили нову кібератаку на користувачів платіжного сервісу PayPal
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('кібератаку')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1221
                        AND posts.tag_id && ARRAY['3'::int8, '5'::int8, '7'::int8, '8'::int8, '11'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:00:29:
--------------------------------

                    -- IT-експерти виявили нову кібератаку на користувачів платіжного сервісу PayPal
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('користувачів')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1221
                        AND posts.tag_id && ARRAY['3'::int8, '5'::int8, '7'::int8, '8'::int8, '11'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:00:29:
--------------------------------

                    -- IT-експерти виявили нову кібератаку на користувачів платіжного сервісу PayPal
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('платіжного')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1221
                        AND posts.tag_id && ARRAY['3'::int8, '5'::int8, '7'::int8, '8'::int8, '11'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:00:29:
--------------------------------

                    -- IT-експерти виявили нову кібератаку на користувачів платіжного сервісу PayPal
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('сервісу')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1221
                        AND posts.tag_id && ARRAY['3'::int8, '5'::int8, '7'::int8, '8'::int8, '11'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:00:29:
--------------------------------

                    -- IT-експерти виявили нову кібератаку на користувачів платіжного сервісу PayPal
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('PayPal')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1221
                        AND posts.tag_id && ARRAY['3'::int8, '5'::int8, '7'::int8, '8'::int8, '11'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:00:29:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 152 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 01:00:29:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 152 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 01:00:29:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (152) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:00:29:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1189 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 01:00:29:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1189 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 01:00:29:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1189) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:00:29:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 451 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 01:00:29:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 451 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 01:00:29:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (451) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:00:29:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1313 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 01:00:29:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1313 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 01:00:29:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1313) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:00:29:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '624f56aa6824a5caa2c217fa5e939cd8', '5.255.250.42'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.22 01:00:31:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1213 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 01:00:31:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1213 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 01:00:31:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1213) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:00:31:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1213
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:00:31:
--------------------------------

                    -- Літні японці почали одягатися в екзоскелети заради роботи
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('японці')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1213
                        AND posts.tag_id && ARRAY['8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:00:31:
--------------------------------

                    -- Літні японці почали одягатися в екзоскелети заради роботи
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('почали')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1213
                        AND posts.tag_id && ARRAY['8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:00:31:
--------------------------------

                    -- Літні японці почали одягатися в екзоскелети заради роботи
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('одягатися')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1213
                        AND posts.tag_id && ARRAY['8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:00:31:
--------------------------------

                    -- Літні японці почали одягатися в екзоскелети заради роботи
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('екзоскелети')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1213
                        AND posts.tag_id && ARRAY['8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:00:32:
--------------------------------

                    -- Літні японці почали одягатися в екзоскелети заради роботи
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('заради')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1213
                        AND posts.tag_id && ARRAY['8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:00:32:
--------------------------------

                    -- Літні японці почали одягатися в екзоскелети заради роботи
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('роботи')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1213
                        AND posts.tag_id && ARRAY['8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:00:32:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '22acf00990c4964bc47fd3b90959a454', '141.8.188.182'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.22 01:00:39:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 18 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 01:00:39:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 18 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 01:00:39:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (18) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:00:39:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 18
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:00:39:
--------------------------------

                    -- «Захисник Вогню» — український комікс, заборонений в Ірані
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('«Захисник')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 18
                        AND posts.tag_id && ARRAY['10'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:00:39:
--------------------------------

                    -- «Захисник Вогню» — український комікс, заборонений в Ірані
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Вогню»')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 18
                        AND posts.tag_id && ARRAY['10'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:00:39:
--------------------------------

                    -- «Захисник Вогню» — український комікс, заборонений в Ірані
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('український')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 18
                        AND posts.tag_id && ARRAY['10'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:00:39:
--------------------------------

                    -- «Захисник Вогню» — український комікс, заборонений в Ірані
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('комікс,')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 18
                        AND posts.tag_id && ARRAY['10'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:00:39:
--------------------------------

                    -- «Захисник Вогню» — український комікс, заборонений в Ірані
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('заборонений')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 18
                        AND posts.tag_id && ARRAY['10'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:00:39:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 812 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 01:00:39:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 812 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 01:00:39:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (812) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:00:39:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 348 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 01:00:39:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 348 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 01:00:39:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (348) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:00:39:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1225 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 01:00:39:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1225 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 01:00:39:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1225) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:00:39:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( 'fcfdda7ada2968d29d9ba2c78838c866', '37.9.87.181'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.22 01:00:50:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1268 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 01:00:50:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1268 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 01:00:50:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1268) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:00:50:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1268
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:00:50:
--------------------------------

                    -- Лисички та кібергноми: що чекає на гравців в січневому оновленні для World of Warcraft: Battle for Azeroth
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Лисички')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1268
                        AND posts.tag_id && ARRAY['3'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:00:50:
--------------------------------

                    -- Лисички та кібергноми: що чекає на гравців в січневому оновленні для World of Warcraft: Battle for Azeroth
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('кібергноми:')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1268
                        AND posts.tag_id && ARRAY['3'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:00:50:
--------------------------------

                    -- Лисички та кібергноми: що чекає на гравців в січневому оновленні для World of Warcraft: Battle for Azeroth
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('гравців')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1268
                        AND posts.tag_id && ARRAY['3'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:00:50:
--------------------------------

                    -- Лисички та кібергноми: що чекає на гравців в січневому оновленні для World of Warcraft: Battle for Azeroth
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('січневому')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1268
                        AND posts.tag_id && ARRAY['3'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:00:50:
--------------------------------

                    -- Лисички та кібергноми: що чекає на гравців в січневому оновленні для World of Warcraft: Battle for Azeroth
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('оновленні')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1268
                        AND posts.tag_id && ARRAY['3'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:00:50:
--------------------------------

                    -- Лисички та кібергноми: що чекає на гравців в січневому оновленні для World of Warcraft: Battle for Azeroth
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Warcraft:')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1268
                        AND posts.tag_id && ARRAY['3'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:00:50:
--------------------------------

                    -- Лисички та кібергноми: що чекає на гравців в січневому оновленні для World of Warcraft: Battle for Azeroth
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Battle')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1268
                        AND posts.tag_id && ARRAY['3'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:00:50:
--------------------------------

                    -- Лисички та кібергноми: що чекає на гравців в січневому оновленні для World of Warcraft: Battle for Azeroth
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Azeroth')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1268
                        AND posts.tag_id && ARRAY['3'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:00:50:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1133 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 01:00:50:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1133 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 01:00:50:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1133) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:00:50:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 21 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 01:00:50:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 21 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 01:00:50:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (21) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:00:50:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 156 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 01:00:50:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 156 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 01:00:50:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (156) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:00:50:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1706 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 01:00:50:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1706 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 01:00:50:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1706) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:00:50:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '76031e313f4fa8707c9bd5f40c1bfbb6', '77.88.47.77'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.22 01:21:55:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1406 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 01:21:55:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1406 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 01:21:55:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1406) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:21:55:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1406
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:21:55:
--------------------------------

                    -- Велична справа Відукрів
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Велична')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1406
                        AND posts.tag_id && ARRAY['0'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:21:55:
--------------------------------

                    -- Велична справа Відукрів
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('справа')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1406
                        AND posts.tag_id && ARRAY['0'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:21:55:
--------------------------------

                    -- Велична справа Відукрів
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Відукрів')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1406
                        AND posts.tag_id && ARRAY['0'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:21:55:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 619 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 01:21:55:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 619 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 01:21:55:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (619) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:21:55:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 597 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 01:21:55:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 597 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 01:21:55:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (597) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:21:55:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1563 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 01:21:55:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1563 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 01:21:55:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1563) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:21:55:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 926 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 01:21:55:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 926 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 01:21:55:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (926) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:21:55:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1525 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 01:21:55:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1525 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 01:21:55:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1525) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:21:55:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1062 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 01:21:55:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1062 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 01:21:55:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1062) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:21:55:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1257 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 01:21:55:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1257 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 01:21:55:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1257) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:21:55:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1711 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 01:21:55:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1711 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 01:21:55:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1711) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:21:55:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1319 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 01:21:55:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1319 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 01:21:55:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1319) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:21:55:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( 'c40b3c75be0672c7464ee4b741a93655', '93.158.161.5'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.22 01:22:20:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	ARRAY['4'::int8] && posts.tag_id 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 01:22:20:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	ARRAY['4'::int8] && posts.tag_id 
-- ORDER
ORDER BY posts.created_time DESC, posts.fixed DESC, posts.posted ASC 
-- ORDER
-- OFFSET
OFFSET 40 LIMIT 10;
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 01:22:20:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1645,1644,1623,1618,1601,1598,1597,1596,1595,1573) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:22:20:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '437d4ced1a72a53b31fab17a953a4843', '93.158.161.7'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.22 01:22:32:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1430 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 01:22:32:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1430 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 01:22:32:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1430) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:22:32:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1430
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:22:32:
--------------------------------

                    -- Інсайдер розкрив характеристики Xiaomi Mi 10 та Mi 10 Pro
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Інсайдер')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1430
                        AND posts.tag_id && ARRAY['4'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:22:32:
--------------------------------

                    -- Інсайдер розкрив характеристики Xiaomi Mi 10 та Mi 10 Pro
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('розкрив')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1430
                        AND posts.tag_id && ARRAY['4'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:22:32:
--------------------------------

                    -- Інсайдер розкрив характеристики Xiaomi Mi 10 та Mi 10 Pro
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('характеристики')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1430
                        AND posts.tag_id && ARRAY['4'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:22:32:
--------------------------------

                    -- Інсайдер розкрив характеристики Xiaomi Mi 10 та Mi 10 Pro
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Xiaomi')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1430
                        AND posts.tag_id && ARRAY['4'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:22:32:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1145 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 01:22:32:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1145 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 01:22:32:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1145) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:22:32:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1410 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 01:22:32:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1410 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 01:22:32:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1410) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:22:32:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( 'd52cbdfa93f492bd09d5278b076a5b9f', '141.8.143.133'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.22 01:29:32:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1675 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 01:29:32:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1675 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 01:29:32:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1675) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:29:32:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1675
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:29:32:
--------------------------------

                    -- Sony запустила сервіс, що дозволяє дізнатися вашу PlayStation статистику за 2019 рік
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('запустила')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1675
                        AND posts.tag_id && ARRAY['3'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:29:32:
--------------------------------

                    -- Sony запустила сервіс, що дозволяє дізнатися вашу PlayStation статистику за 2019 рік
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('сервіс,')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1675
                        AND posts.tag_id && ARRAY['3'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:29:32:
--------------------------------

                    -- Sony запустила сервіс, що дозволяє дізнатися вашу PlayStation статистику за 2019 рік
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('дозволяє')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1675
                        AND posts.tag_id && ARRAY['3'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:29:32:
--------------------------------

                    -- Sony запустила сервіс, що дозволяє дізнатися вашу PlayStation статистику за 2019 рік
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('дізнатися')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1675
                        AND posts.tag_id && ARRAY['3'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:29:32:
--------------------------------

                    -- Sony запустила сервіс, що дозволяє дізнатися вашу PlayStation статистику за 2019 рік
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('PlayStation')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1675
                        AND posts.tag_id && ARRAY['3'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:29:32:
--------------------------------

                    -- Sony запустила сервіс, що дозволяє дізнатися вашу PlayStation статистику за 2019 рік
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('статистику')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1675
                        AND posts.tag_id && ARRAY['3'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:29:32:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 876 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 01:29:32:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 876 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 01:29:32:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (876) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:29:32:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 510 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 01:29:32:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 510 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 01:29:32:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (510) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:29:32:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '1a0d36373ed7a1d578ee56dab756da62', '66.249.65.146'::inet, 'Chrome' );
--------------------------------
2020.01.22 01:33:03:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1555 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 01:33:03:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1555 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 01:33:03:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1555) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:33:03:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1555
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:33:03:
--------------------------------

                    -- Біля берегів Нової Зеландії виник таємничий гарячий згусток води
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('берегів')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1555
                        AND posts.tag_id && ARRAY['7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:33:03:
--------------------------------

                    -- Біля берегів Нової Зеландії виник таємничий гарячий згусток води
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Зеландії')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1555
                        AND posts.tag_id && ARRAY['7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:33:03:
--------------------------------

                    -- Біля берегів Нової Зеландії виник таємничий гарячий згусток води
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('таємничий')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1555
                        AND posts.tag_id && ARRAY['7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:33:03:
--------------------------------

                    -- Біля берегів Нової Зеландії виник таємничий гарячий згусток води
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('гарячий')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1555
                        AND posts.tag_id && ARRAY['7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:33:03:
--------------------------------

                    -- Біля берегів Нової Зеландії виник таємничий гарячий згусток води
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('згусток')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1555
                        AND posts.tag_id && ARRAY['7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:33:03:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1626 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 01:33:03:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1626 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 01:33:03:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1626) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:33:03:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 184 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 01:33:03:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 184 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 01:33:03:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (184) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:33:03:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '006f9d1bb37bf44932741a89fa99601c', '93.158.161.136'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.22 01:42:11:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	ARRAY['14'::int8] && posts.tag_id 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 01:42:11:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	ARRAY['14'::int8] && posts.tag_id 
-- ORDER
ORDER BY posts.created_time DESC, posts.fixed DESC, posts.posted ASC 
-- ORDER
-- OFFSET
OFFSET 50 LIMIT 10;
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 01:42:11:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1079,1075,1074,1046,1021,997,995,974,972,965) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.22 01:42:11:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '041b71d0e5cc69ada07c185bb281bac3', '5.255.250.62'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.22 02:02:33:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1373 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 02:02:33:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1373 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 02:02:33:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1373) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.22 02:02:33:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1373
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.22 02:02:33:
--------------------------------

                    -- Зі смартфоном і без жодного документа: Федоров назвав онлайн-послуги, які з’являться через рік
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('смартфоном')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1373
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.22 02:02:33:
--------------------------------

                    -- Зі смартфоном і без жодного документа: Федоров назвав онлайн-послуги, які з’являться через рік
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('жодного')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1373
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.22 02:02:33:
--------------------------------

                    -- Зі смартфоном і без жодного документа: Федоров назвав онлайн-послуги, які з’являться через рік
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('документа:')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1373
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.22 02:02:33:
--------------------------------

                    -- Зі смартфоном і без жодного документа: Федоров назвав онлайн-послуги, які з’являться через рік
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Федоров')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1373
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.22 02:02:33:
--------------------------------

                    -- Зі смартфоном і без жодного документа: Федоров назвав онлайн-послуги, які з’являться через рік
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('назвав')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1373
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.22 02:02:33:
--------------------------------

                    -- Зі смартфоном і без жодного документа: Федоров назвав онлайн-послуги, які з’являться через рік
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('онлайн-послуги,')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1373
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.22 02:02:33:
--------------------------------

                    -- Зі смартфоном і без жодного документа: Федоров назвав онлайн-послуги, які з’являться через рік
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('з’являться')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1373
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.22 02:02:33:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 438 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 02:02:33:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 438 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 02:02:33:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (438) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.22 02:02:33:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 937 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 02:02:33:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 937 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 02:02:33:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (937) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.22 02:02:33:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 550 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 02:02:33:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 550 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 02:02:33:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (550) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.22 02:02:33:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 751 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 02:02:33:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 751 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 02:02:33:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (751) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.22 02:02:33:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '183bf786ff606b16c9e64430cf5cb754', '141.8.143.188'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.22 02:02:33:
--------------------------------
SELECT count( DISTINCT ua_hash ) as count FROM visit_counter WHERE date_trunc('day', ts) = date_trunc('day', now());
--------------------------------
2020.01.22 02:02:54:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 88 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 02:02:54:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 88 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 02:02:54:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (88) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.22 02:02:54:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 88
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.22 02:02:54:
--------------------------------

                    -- Помер Олексій Леонов – перша людина, що побувала у відкритому космосі
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Олексій')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 88
                        AND posts.tag_id && ARRAY['3'::int8, '6'::int8, '7'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.22 02:02:54:
--------------------------------

                    -- Помер Олексій Леонов – перша людина, що побувала у відкритому космосі
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Леонов')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 88
                        AND posts.tag_id && ARRAY['3'::int8, '6'::int8, '7'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.22 02:02:54:
--------------------------------

                    -- Помер Олексій Леонов – перша людина, що побувала у відкритому космосі
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('людина,')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 88
                        AND posts.tag_id && ARRAY['3'::int8, '6'::int8, '7'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.22 02:02:54:
--------------------------------

                    -- Помер Олексій Леонов – перша людина, що побувала у відкритому космосі
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('побувала')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 88
                        AND posts.tag_id && ARRAY['3'::int8, '6'::int8, '7'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.22 02:02:54:
--------------------------------

                    -- Помер Олексій Леонов – перша людина, що побувала у відкритому космосі
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('відкритому')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 88
                        AND posts.tag_id && ARRAY['3'::int8, '6'::int8, '7'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.22 02:02:54:
--------------------------------

                    -- Помер Олексій Леонов – перша людина, що побувала у відкритому космосі
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('космосі')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 88
                        AND posts.tag_id && ARRAY['3'::int8, '6'::int8, '7'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.22 02:02:54:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 504 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 02:02:54:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 504 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 02:02:54:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (504) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.22 02:02:54:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 572 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 02:02:54:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 572 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 02:02:54:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (572) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.22 02:02:54:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1627 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 02:02:54:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1627 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 02:02:54:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1627) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.22 02:02:54:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1531 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 02:02:54:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1531 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 02:02:54:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1531) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.22 02:02:54:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '5d38df1da31b907877f8a32c57a23ca3', '93.158.166.138'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.22 02:02:55:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( 'd0be6b2f4ea7767aff72038d82cc7385', '77.88.47.59'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.22 02:03:04:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1614 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 02:03:04:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1614 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 02:03:04:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1614) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.22 02:03:04:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1614
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.22 02:03:04:
--------------------------------

                    -- Експерти встановлюють ознаки культурних цінностей
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Експерти')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1614
                        AND posts.tag_id && ARRAY['8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.22 02:03:05:
--------------------------------

                    -- Експерти встановлюють ознаки культурних цінностей
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('встановлюють')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1614
                        AND posts.tag_id && ARRAY['8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.22 02:03:05:
--------------------------------

                    -- Експерти встановлюють ознаки культурних цінностей
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('ознаки')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1614
                        AND posts.tag_id && ARRAY['8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.22 02:03:05:
--------------------------------

                    -- Експерти встановлюють ознаки культурних цінностей
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('культурних')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1614
                        AND posts.tag_id && ARRAY['8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.22 02:03:05:
--------------------------------

                    -- Експерти встановлюють ознаки культурних цінностей
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('цінностей')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1614
                        AND posts.tag_id && ARRAY['8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.22 02:03:05:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1511 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 02:03:05:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1511 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 02:03:05:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1511) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.22 02:03:05:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1046 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 02:03:05:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1046 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 02:03:05:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1046) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.22 02:03:05:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 464 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 02:03:05:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 464 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 02:03:05:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (464) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.22 02:03:05:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1099 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 02:03:05:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1099 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.22 02:03:05:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1099) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.22 02:03:05:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '624f56aa6824a5caa2c217fa5e939cd8', '5.255.250.42'::inet, '[Bot] Yandex' );
--------------------------------
