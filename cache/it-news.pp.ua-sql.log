2020.01.18 20:41:54:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1624 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:41:54:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1624 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:41:54:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1624) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:41:54:
--------------------------------
SELECT * FROM categories ORDER BY level;  -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:41:54:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1624
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:41:54:
--------------------------------

                    -- GTA 4 більше не можна купити у Steam
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('більше')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1624
                        AND posts.tag_id && ARRAY['3'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:41:54:
--------------------------------

                    -- GTA 4 більше не можна купити у Steam
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('купити')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1624
                        AND posts.tag_id && ARRAY['3'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:41:54:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1682 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:41:54:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1682 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:41:54:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1682) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:41:54:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1380 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:41:54:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1380 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:41:54:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1380) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:41:54:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 282 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:41:54:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 282 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:41:54:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (282) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:41:54:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 255 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:41:54:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 255 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:41:54:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (255) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:41:54:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1451 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:41:54:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1451 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:41:54:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1451) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:41:54:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '50027cc66ea01f9c2732ba30158ccdd1', '5.255.250.61'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.18 20:41:54:
--------------------------------

                SELECT
                    tags.id,
                    tags.name,
                    tags.altname,
                    (SELECT count(posts_tags.post_id) FROM posts_tags WHERE posts_tags.tag_id = tags.id ) as news_count
                FROM
                    tags WHERE id > 0 ORDER BY name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:41:54:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:41:54:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 
-- ORDER
ORDER BY posts.created_time DESC, posts.fixed DESC, posts.posted ASC 
-- ORDER
-- OFFSET
OFFSET 90 LIMIT 12;
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:41:54:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1698,1697,1696,1695,1694,1693,1692,1691,1690,1689,1688,1687) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:41:54:
--------------------------------
SELECT count( DISTINCT ua_hash ) as count FROM visit_counter WHERE date_trunc('day', ts) = date_trunc('day', now());
--------------------------------
2020.01.18 20:41:54:
--------------------------------

                SELECT
                    date_trunc('day', visit_counter.ts) as visit_day,
                    COUNT( DISTINCT visit_counter.ua_hash ) as count
                FROM
                    visit_counter
                WHERE
                    date_trunc('day', visit_counter.ts ) > date_trunc('day', NOW() - INTERVAL '1 week')
                GROUP BY visit_day
                ORDER BY visit_day;
            
--------------------------------
2020.01.18 20:41:57:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 691 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:41:57:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 691 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:41:57:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (691) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:41:57:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 691
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:41:57:
--------------------------------

                    -- Вчені встановили користь від нічних кошмарів
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('встановили')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 691
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:41:58:
--------------------------------

                    -- Вчені встановили користь від нічних кошмарів
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('користь')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 691
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:41:58:
--------------------------------

                    -- Вчені встановили користь від нічних кошмарів
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('нічних')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 691
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:41:58:
--------------------------------

                    -- Вчені встановили користь від нічних кошмарів
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('кошмарів')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 691
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:41:58:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1437 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:41:58:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1437 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:41:58:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1437) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:41:58:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 801 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:41:58:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 801 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:41:58:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (801) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:41:58:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 471 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:41:58:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 471 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:41:58:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (471) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:41:58:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 72 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:41:58:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 72 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:41:58:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (72) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:41:58:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1611 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:41:58:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1611 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:41:58:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1611) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:41:58:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '50027cc66ea01f9c2732ba30158ccdd1', '5.255.250.61'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.18 20:42:07:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1744 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:42:07:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1744 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:42:07:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1744) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:42:07:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1744
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:42:07:
--------------------------------

                    -- Скорпіони могли бути першими істотами, які ступили на суходіл
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Скорпіони')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1744
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:42:07:
--------------------------------

                    -- Скорпіони могли бути першими істотами, які ступили на суходіл
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('першими')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1744
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:42:07:
--------------------------------

                    -- Скорпіони могли бути першими істотами, які ступили на суходіл
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('істотами,')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1744
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:42:07:
--------------------------------

                    -- Скорпіони могли бути першими істотами, які ступили на суходіл
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('ступили')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1744
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:42:07:
--------------------------------

                    -- Скорпіони могли бути першими істотами, які ступили на суходіл
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('суходіл')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1744
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:42:07:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 160 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:42:07:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 160 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:42:07:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (160) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:42:07:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 88 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:42:07:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 88 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:42:07:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (88) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:42:07:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1467 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:42:07:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1467 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:42:07:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1467) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:42:07:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1400 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:42:07:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1400 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:42:07:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1400) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:42:07:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1500 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:42:07:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1500 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:42:07:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1500) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:42:07:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '50027cc66ea01f9c2732ba30158ccdd1', '5.255.250.61'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.18 20:42:11:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1548 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:42:11:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1548 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:42:11:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1548) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:42:11:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1548
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:42:11:
--------------------------------

                    -- Chrome 80 отримає «тихий режим» для веб-сайтів
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Chrome')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1548
                        AND posts.tag_id && ARRAY['4'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:42:11:
--------------------------------

                    -- Chrome 80 отримає «тихий режим» для веб-сайтів
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('отримає')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1548
                        AND posts.tag_id && ARRAY['4'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:42:11:
--------------------------------

                    -- Chrome 80 отримає «тихий режим» для веб-сайтів
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('«тихий')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1548
                        AND posts.tag_id && ARRAY['4'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:42:11:
--------------------------------

                    -- Chrome 80 отримає «тихий режим» для веб-сайтів
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('режим»')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1548
                        AND posts.tag_id && ARRAY['4'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:42:11:
--------------------------------

                    -- Chrome 80 отримає «тихий режим» для веб-сайтів
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('веб-сайтів')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1548
                        AND posts.tag_id && ARRAY['4'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:42:11:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 831 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:42:11:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 831 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:42:11:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (831) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:42:11:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 882 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:42:11:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 882 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:42:11:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (882) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:42:11:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1751 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:42:11:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1751 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:42:11:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1751) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:42:11:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1143 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:42:11:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1143 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:42:11:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1143) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:42:11:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1358 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:42:11:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1358 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:42:11:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1358) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:42:11:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( 'f8ef41e54041fc9c40c1b29903da2fc7', '100.43.90.119'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.18 20:42:40:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1582 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:42:40:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1582 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:42:40:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1582) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:42:40:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1582
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:42:40:
--------------------------------

                    -- Вчені з'ясували, що мікропластик значно забруднює повітря
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('з''ясували,')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1582
                        AND posts.tag_id && ARRAY['6'::int8, '7'::int8, '8'::int8, '12'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:42:40:
--------------------------------

                    -- Вчені з'ясували, що мікропластик значно забруднює повітря
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('мікропластик')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1582
                        AND posts.tag_id && ARRAY['6'::int8, '7'::int8, '8'::int8, '12'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:42:40:
--------------------------------

                    -- Вчені з'ясували, що мікропластик значно забруднює повітря
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('значно')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1582
                        AND posts.tag_id && ARRAY['6'::int8, '7'::int8, '8'::int8, '12'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:42:40:
--------------------------------

                    -- Вчені з'ясували, що мікропластик значно забруднює повітря
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('забруднює')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1582
                        AND posts.tag_id && ARRAY['6'::int8, '7'::int8, '8'::int8, '12'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:42:40:
--------------------------------

                    -- Вчені з'ясували, що мікропластик значно забруднює повітря
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('повітря')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1582
                        AND posts.tag_id && ARRAY['6'::int8, '7'::int8, '8'::int8, '12'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:42:40:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 133 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:42:40:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 133 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:42:40:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (133) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:42:40:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1731 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:42:40:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1731 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:42:40:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1731) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:42:40:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 570 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:42:40:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 570 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:42:40:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (570) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:42:40:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 55 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:42:40:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 55 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:42:40:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (55) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:42:40:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1628 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:42:40:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1628 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:42:40:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1628) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:42:40:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '50027cc66ea01f9c2732ba30158ccdd1', '5.255.250.61'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.18 20:42:43:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	ARRAY['7'::int8] && posts.tag_id 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:42:43:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	ARRAY['7'::int8] && posts.tag_id 
-- ORDER
ORDER BY posts.created_time DESC, posts.fixed DESC, posts.posted ASC 
-- ORDER
-- OFFSET
OFFSET 420 LIMIT 10;
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:42:43:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (554,550,548,542,533,531,529,525,524,523) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:42:43:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '50027cc66ea01f9c2732ba30158ccdd1', '5.255.250.61'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.18 20:42:43:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	posts.tag_id && ARRAY[ '11'::int8 ] 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:42:43:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	posts.tag_id && ARRAY[ '11'::int8 ] 
-- ORDER
ORDER BY posts.created_time DESC, posts.fixed DESC, posts.posted ASC 
-- ORDER
-- OFFSET
OFFSET 10 LIMIT 2;
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:42:43:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1275,1221) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:42:43:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	posts.tag_id && ARRAY[ '8'::int8 ] 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:42:43:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	posts.tag_id && ARRAY[ '8'::int8 ] 
-- ORDER
ORDER BY posts.created_time DESC, posts.fixed DESC, posts.posted ASC 
-- ORDER
-- OFFSET
OFFSET 0 LIMIT 1;
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:42:43:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1788) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:42:43:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	posts.tag_id && ARRAY[ '8'::int8 ] 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:42:43:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	posts.tag_id && ARRAY[ '8'::int8 ] 
-- ORDER
ORDER BY posts.created_time DESC, posts.fixed DESC, posts.posted ASC 
-- ORDER
-- OFFSET
OFFSET 10 LIMIT 3;
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:42:43:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1766,1750,1748) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:42:43:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	posts.tag_id && ARRAY[ '5'::int8, '13'::int8 ] 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:42:43:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	posts.tag_id && ARRAY[ '5'::int8, '13'::int8 ] 
-- ORDER
ORDER BY posts.created_time DESC, posts.fixed DESC, posts.posted ASC 
-- ORDER
-- OFFSET
OFFSET 0 LIMIT 1;
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:42:43:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1763) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:42:43:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	posts.tag_id && ARRAY[ '5'::int8, '13'::int8 ] 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:42:43:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	posts.tag_id && ARRAY[ '5'::int8, '13'::int8 ] 
-- ORDER
ORDER BY posts.created_time DESC, posts.fixed DESC, posts.posted ASC 
-- ORDER
-- OFFSET
OFFSET 0 LIMIT 4;
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:42:43:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1763,1730,1729,1726) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:42:43:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	posts.tag_id && ARRAY[ '6'::int8, '7'::int8 ] 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:42:43:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	posts.tag_id && ARRAY[ '6'::int8, '7'::int8 ] 
-- ORDER
ORDER BY posts.created_time DESC, posts.fixed DESC, posts.posted ASC 
-- ORDER
-- OFFSET
OFFSET 0 LIMIT 10;
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:42:43:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1788,1787,1786,1785,1782,1773,1771,1767,1750,1745) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:51:13:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:51:13:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 
-- ORDER
ORDER BY posts.created_time DESC, posts.fixed DESC, posts.posted ASC 
-- ORDER
-- OFFSET
OFFSET 0 LIMIT 10;
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:51:13:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1788,1787,1786,1785,1784,1783,1782,1781,1780,1779) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:51:13:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '2d2e8e6ab88742154eade31e44c21e75', '66.249.65.150'::inet, 'Chrome' );
--------------------------------
2020.01.18 20:51:13:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:51:14:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 
-- ORDER
ORDER BY posts.created_time DESC, posts.fixed DESC, posts.posted ASC 
-- ORDER
-- OFFSET
OFFSET 0 LIMIT 10000;
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:51:14:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1788,1787,1786,1785,1784,1783,1782,1781,1780,1779,1778,1777,1776,1775,1774,1773,1772,1771,1770,1769,1768,1767,1766,1765,1764,1763,1762,1761,1760,1759,1758,1757,1756,1755,1754,1753,1752,1751,1750,1749,1748,1747,1746,1745,1744,1743,1742,1741,1740,1739,1738,1737,1736,1735,1734,1733,1732,1731,1730,1729,1728,1727,1726,1725,1724,1723,1722,1721,1720,1719,1718,1717,1716,1715,1714,1713,1712,1711,1710,1709,1708,1707,1706,1705,1704,1703,1702,1701,1700,1699,1698,1697,1696,1695,1694,1693,1692,1691,1690,1689,1688,1687,1686,1685,1684,1683,1682,1681,1680,1679,1678,1677,1676,1675,1674,1673,1672,1671,1670,1669,1668,1667,1666,1665,1664,1663,1662,1661,1660,1659,1658,1657,1656,1655,1654,1653,1652,1651,1650,1649,1648,1647,1646,1645,1644,1643,1642,1641,1640,1639,1638,1637,1636,1635,1634,1633,1632,1631,1630,1629,1628,1627,1626,1625,1624,1623,1622,1621,1620,1619,1618,1617,1616,1615,1614,1613,1612,1611,1610,1609,1608,1607,1606,1605,1604,1603,1602,1601,1600,1599,1598,1597,1596,1595,1594,1593,1592,1591,1590,1589,1588,1587,1586,1585,1584,1583,1582,1581,1580,1579,1578,1577,1576,1575,1574,1573,1572,1571,1570,1569,1568,1567,1566,1565,1564,1563,1562,1561,1560,1559,1558,1557,1556,1555,1554,1553,1552,1551,1550,1549,1548,1547,1546,1545,1544,1543,1542,1541,1540,1539,1538,1537,1536,1535,1534,1533,1532,1531,1530,1529,1528,1527,1526,1525,1524,1523,1522,1521,1520,1519,1518,1517,1516,1515,1514,1513,1512,1511,1510,1509,1508,1507,1506,1505,1504,1503,1502,1501,1500,1499,1498,1497,1496,1495,1494,1493,1492,1491,1490,1489,1488,1487,1486,1485,1484,1483,1482,1481,1480,1479,1478,1477,1476,1475,1474,1473,1472,1471,1470,1469,1468,1467,1466,1465,1464,1463,1462,1461,1460,1459,1458,1457,1456,1455,1454,1453,1452,1451,1450,1449,1448,1447,1446,1445,1444,1443,1442,1441,1440,1439,1438,1437,1436,1435,1434,1433,1432,1431,1430,1429,1428,1427,1426,1425,1424,1423,1422,1421,1420,1419,1418,1417,1416,1415,1414,1413,1412,1411,1410,1409,1408,1407,1406,1405,1404,1403,1402,1401,1400,1399,1398,1397,1396,1395,1394,1393,1392,1391,1390,1389,1388,1387,1386,1385,1384,1383,1382,1381,1380,1379,1378,1377,1376,1375,1374,1373,1372,1371,1370,1369,1368,1367,1366,1365,1364,1363,1362,1361,1360,1359,1358,1357,1356,1355,1354,1353,1352,1351,1350,1349,1348,1347,1346,1345,1344,1343,1342,1341,1340,1339,1338,1337,1336,1335,1334,1333,1332,1331,1330,1329,1328,1327,1326,1325,1324,1323,1322,1321,1320,1319,1318,1317,1316,1315,1314,1313,1312,1311,1310,1309,1308,1307,1306,1305,1304,1303,1302,1301,1300,1299,1298,1297,1296,1295,1294,1293,1292,1291,1290,1289,1288,1287,1286,1285,1284,1283,1282,1281,1280,1279,1278,1277,1276,1275,1274,1273,1272,1271,1270,1269,1268,1267,1266,1265,1264,1263,1262,1261,1260,1259,1258,1257,1256,1255,1254,1253,1252,1251,1250,1249,1248,1247,1246,1245,1244,1243,1242,1241,1240,1239,1238,1237,1236,1235,1234,1233,1232,1231,1230,1229,1228,1227,1226,1225,1224,1223,1222,1221,1220,1219,1218,1217,1216,1215,1214,1213,1212,1211,1210,1209,1208,1207,1206,1205,1204,1203,1202,1201,1200,1199,1198,1197,1196,1195,1194,1193,1192,1191,1190,1189,1188,1187,1186,1185,1184,1183,1182,1181,1180,1179,1178,1177,1176,1175,1174,1173,1172,1171,1170,1169,1168,1167,1166,1165,1164,1163,1162,1161,1160,1159,1158,1157,1156,1155,1154,1153,1152,1151,1150,1149,1148,1147,1146,1145,1144,1143,1142,1141,1140,1139,1138,1137,1136,1135,1134,1133,1132,1131,1130,1129,1128,1127,1126,1125,1124,1123,1122,1121,1120,1119,1118,1117,1116,1115,1114,1113,1112,1111,1110,1109,1108,1107,1106,1105,1104,1103,1102,1101,1100,1099,1098,1097,1096,1095,1094,1093,1092,1091,1090,1089,1088,1087,1086,1085,1084,1083,1082,1081,1080,1079,1078,1077,1076,1075,1074,1073,1072,1071,1070,1069,1068,1067,1066,1065,1064,1063,1062,1061,1060,1059,1058,1057,1056,1055,1054,1053,1052,1051,1050,1049,1048,1047,1046,1045,1044,1043,1042,1041,1040,1039,1038,1037,1036,1035,1034,1033,1032,1031,1030,1029,1028,1027,1026,1025,1024,1023,1022,1021,1020,1019,1018,1017,1016,1015,1014,1013,1012,1011,1010,1009,1008,1007,1006,1005,1004,1003,1002,1001,1000,999,998,997,996,995,994,993,992,991,990,989,988,987,986,985,984,983,982,981,980,979,978,977,976,975,974,973,972,971,970,969,968,967,966,965,964,963,962,961,960,959,958,957,956,955,954,953,952,951,950,949,948,947,946,945,944,943,942,941,940,939,938,937,936,935,934,933,932,931,930,929,928,927,926,925,924,923,922,921,920,919,918,917,916,915,914,913,912,911,910,909,908,907,906,905,904,903,902,901,900,899,898,897,896,895,894,893,892,891,890,889,888,887,886,885,884,883,882,881,880,879,878,877,876,875,874,873,872,871,870,869,868,867,866,865,864,863,862,861,860,859,858,857,856,855,854,853,852,851,850,849,848,847,846,845,844,843,842,841,840,839,838,837,836,835,834,833,832,831,830,829,828,827,826,825,824,823,822,821,820,819,818,817,816,815,814,813,812,811,810,809,808,807,806,805,804,803,802,801,800,799,798,797,796,795,794,793,792,791,790,789,788,787,786,785,784,783,782,781,780,779,778,777,776,775,774,773,772,771,770,769,768,767,766,765,764,763,762,761,760,759,758,757,756,755,754,753,752,751,750,749,748,747,746,745,744,743,742,741,740,739,738,737,736,735,734,733,732,731,730,729,728,727,726,725,724,723,722,721,719,718,716,715,714,712,708,703,702,701,700,699,698,697,696,695,694,693,692,691,690,689,688,687,686,685,678,677,675,674,673,672,671,670,669,667,666,665,664,663,661,658,657,656,653,647,646,645,644,639,638,637,636,635,632,630,629,627,626,623,620,619,618,617,616,615,614,611,610,609,607,606,605,604,603,602,601,598,597,595,593,591,590,589,588,587,586,585,584,583,582,581,580,579,578,577,576,574,572,571,570,569,567,562,559,558,557,556,555,554,553,551,550,548,546,545,542,537,535,534,533,532,531,529,528,526,525,524,523,522,521,520,519,513,511,510,509,508,507,506,505,504,503,500,497,495,493,489,487,485,484,483,482,481,480,479,478,477,476,475,474,473,472,471,470,469,468,467,466,465,464,463,460,457,455,452,451,441,440,439,438,437,436,435,434,433,432,431,428,427,425,423,422,421,420,419,418,417,414,411,410,408,407,405,404,400,399,398,396,395,394,393,390,389,388,386,385,379,378,375,374,372,370,369,368,367,366,364,362,361,359,356,355,354,353,348,347,346,345,344,343,342,341,340,339,338,337,336,334,333,332,329,327,326,324,319,318,317,316,314,310,307,304,302,300,299,298,297,296,295,294,293,292,291,290,286,285,283,282,280,274,273,272,271,270,269,268,267,266,265,264,261,257,255,249,248,245,241,240,239,238,237,236,235,234,233,231,230,227,226,225,224,223,222,221,220,219,218,214,213,211,210,207,203,201,199,198,197,196,195,194,193,192,191,190,189,188,187,186,185,184,183,182,181,180,179,178,177,176,175,174,173,172,171,170,169,168,167,166,165,164,163,162,161,160,159,158,157,156,155,154,153,152,151,150,149,148,147,145,139,138,137,136,135,134,133,132,131,130,129,128,127,126,125,124,123,122,121,120,119,118,117,116,115,114,113,112,111,110,109,108,107,106,105,104,103,102,101,100,99,98,97,96,95,94,93,92,91,90,89,88,87,86,85,84,83,82,81,80,79,78,77,76,75,74,73,72,71,70,69,68,67,66,65,64,63,62,61,60,59,56,55,54,53,52,51,50,49,48,47,46,45,44,43,42,41,40,39,38,37,36,35,34,33,24,23,22,21,20,19,18,17,16) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:51:14:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	posts.tag_id && ARRAY[ '25'::int8, '26'::int8, '27'::int8, '28'::int8, '29'::int8, '30'::int8, '31'::int8, '32'::int8, '33'::int8, '34'::int8, '35'::int8 ] 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:51:14:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	posts.tag_id && ARRAY[ '25'::int8, '26'::int8, '27'::int8, '28'::int8, '29'::int8, '30'::int8, '31'::int8, '32'::int8, '33'::int8, '34'::int8, '35'::int8 ] 
-- ORDER
ORDER BY posts.created_time DESC, posts.fixed DESC, posts.posted ASC 
-- ORDER
-- OFFSET
OFFSET 0 LIMIT 1;
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:55:21:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1464 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:55:21:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1464 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:55:21:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1464) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:55:21:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1464
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:55:21:
--------------------------------

                    -- Bosch представила нове рішення для розумних окулярів
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('представила')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1464
                        AND posts.tag_id && ARRAY['4'::int8, '9'::int8, '14'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:55:21:
--------------------------------

                    -- Bosch представила нове рішення для розумних окулярів
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('рішення')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1464
                        AND posts.tag_id && ARRAY['4'::int8, '9'::int8, '14'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:55:22:
--------------------------------

                    -- Bosch представила нове рішення для розумних окулярів
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('розумних')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1464
                        AND posts.tag_id && ARRAY['4'::int8, '9'::int8, '14'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:55:22:
--------------------------------

                    -- Bosch представила нове рішення для розумних окулярів
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('окулярів')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1464
                        AND posts.tag_id && ARRAY['4'::int8, '9'::int8, '14'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:55:22:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1396 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:55:22:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1396 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:55:22:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1396) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:55:22:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1576 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:55:22:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1576 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:55:22:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1576) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:55:22:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1410 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:55:22:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1410 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:55:22:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1410) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:55:22:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1183 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:55:22:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1183 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:55:22:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1183) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:55:22:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1336 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:55:22:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1336 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:55:22:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1336) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:55:22:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '2d2e8e6ab88742154eade31e44c21e75', '66.249.65.150'::inet, 'Chrome' );
--------------------------------
2020.01.18 20:58:48:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	ARRAY['6'::int8] && posts.tag_id 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:58:48:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	ARRAY['6'::int8] && posts.tag_id 
-- ORDER
ORDER BY posts.created_time DESC, posts.fixed DESC, posts.posted ASC 
-- ORDER
-- OFFSET
OFFSET 0 LIMIT 10;
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:58:48:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1787,1750,1740,1714,1697,1696,1676,1669,1648,1641) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:58:48:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '50027cc66ea01f9c2732ba30158ccdd1', '5.255.250.61'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.18 20:59:01:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1554 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:59:01:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1554 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:59:01:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1554) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:59:01:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1554
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:59:01:
--------------------------------

                    -- Apple iPhone 9 показали на якісних рендерах
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('iPhone')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1554
                        AND posts.tag_id && ARRAY['9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:59:01:
--------------------------------

                    -- Apple iPhone 9 показали на якісних рендерах
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('показали')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1554
                        AND posts.tag_id && ARRAY['9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:59:01:
--------------------------------

                    -- Apple iPhone 9 показали на якісних рендерах
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('якісних')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1554
                        AND posts.tag_id && ARRAY['9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:59:02:
--------------------------------

                    -- Apple iPhone 9 показали на якісних рендерах
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('рендерах')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1554
                        AND posts.tag_id && ARRAY['9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:59:02:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 953 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:59:02:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 953 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:59:02:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (953) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:59:02:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 875 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:59:02:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 875 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:59:02:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (875) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:59:02:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1434 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:59:02:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1434 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:59:02:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1434) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:59:02:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1521 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:59:02:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1521 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:59:02:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1521) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:59:02:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 927 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:59:02:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 927 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:59:02:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (927) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:59:02:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '50027cc66ea01f9c2732ba30158ccdd1', '5.255.250.61'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.18 20:59:16:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	ARRAY['3'::int8] && posts.tag_id 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:59:16:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	ARRAY['3'::int8] && posts.tag_id 
-- ORDER
ORDER BY posts.created_time DESC, posts.fixed DESC, posts.posted ASC 
-- ORDER
-- OFFSET
OFFSET 0 LIMIT 10;
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:59:16:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1788,1784,1783,1781,1780,1779,1778,1777,1776,1775) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:59:16:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '50027cc66ea01f9c2732ba30158ccdd1', '5.255.250.61'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.18 20:59:18:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 571 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:59:18:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 571 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:59:18:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (571) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:59:19:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 571
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:59:19:
--------------------------------

                    -- Існування кібер-армій у великих країнах стало звичним явищем – топ-менеджер міжнародної IT-компанії
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Існування')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 571
                        AND posts.tag_id && ARRAY['3'::int8, '5'::int8, '7'::int8, '8'::int8, '11'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:59:19:
--------------------------------

                    -- Існування кібер-армій у великих країнах стало звичним явищем – топ-менеджер міжнародної IT-компанії
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('кібер-армій')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 571
                        AND posts.tag_id && ARRAY['3'::int8, '5'::int8, '7'::int8, '8'::int8, '11'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:59:19:
--------------------------------

                    -- Існування кібер-армій у великих країнах стало звичним явищем – топ-менеджер міжнародної IT-компанії
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('великих')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 571
                        AND posts.tag_id && ARRAY['3'::int8, '5'::int8, '7'::int8, '8'::int8, '11'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:59:19:
--------------------------------

                    -- Існування кібер-армій у великих країнах стало звичним явищем – топ-менеджер міжнародної IT-компанії
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('країнах')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 571
                        AND posts.tag_id && ARRAY['3'::int8, '5'::int8, '7'::int8, '8'::int8, '11'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:59:19:
--------------------------------

                    -- Існування кібер-армій у великих країнах стало звичним явищем – топ-менеджер міжнародної IT-компанії
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('звичним')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 571
                        AND posts.tag_id && ARRAY['3'::int8, '5'::int8, '7'::int8, '8'::int8, '11'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:59:19:
--------------------------------

                    -- Існування кібер-армій у великих країнах стало звичним явищем – топ-менеджер міжнародної IT-компанії
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('явищем')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 571
                        AND posts.tag_id && ARRAY['3'::int8, '5'::int8, '7'::int8, '8'::int8, '11'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:59:19:
--------------------------------

                    -- Існування кібер-армій у великих країнах стало звичним явищем – топ-менеджер міжнародної IT-компанії
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('топ-менеджер')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 571
                        AND posts.tag_id && ARRAY['3'::int8, '5'::int8, '7'::int8, '8'::int8, '11'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:59:19:
--------------------------------

                    -- Існування кібер-армій у великих країнах стало звичним явищем – топ-менеджер міжнародної IT-компанії
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('міжнародної')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 571
                        AND posts.tag_id && ARRAY['3'::int8, '5'::int8, '7'::int8, '8'::int8, '11'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:59:19:
--------------------------------

                    -- Існування кібер-армій у великих країнах стало звичним явищем – топ-менеджер міжнародної IT-компанії
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('IT-компанії')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 571
                        AND posts.tag_id && ARRAY['3'::int8, '5'::int8, '7'::int8, '8'::int8, '11'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:59:19:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1763 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:59:19:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1763 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:59:19:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1763) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:59:19:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 63 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:59:19:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 63 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:59:19:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (63) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:59:19:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1513 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:59:19:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1513 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:59:19:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1513) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:59:19:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 835 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:59:19:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 835 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:59:19:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (835) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:59:19:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 119 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:59:19:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 119 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:59:19:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (119) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:59:19:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '50027cc66ea01f9c2732ba30158ccdd1', '5.255.250.61'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.18 20:59:21:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1104 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:59:21:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1104 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:59:21:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1104) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:59:21:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1104
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:59:21:
--------------------------------

                    -- Українські водії почали тестування мобільного додатка Дія
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Українські')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1104
                        AND posts.tag_id && ARRAY['0'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:59:21:
--------------------------------

                    -- Українські водії почали тестування мобільного додатка Дія
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('почали')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1104
                        AND posts.tag_id && ARRAY['0'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:59:21:
--------------------------------

                    -- Українські водії почали тестування мобільного додатка Дія
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('тестування')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1104
                        AND posts.tag_id && ARRAY['0'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:59:21:
--------------------------------

                    -- Українські водії почали тестування мобільного додатка Дія
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('мобільного')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1104
                        AND posts.tag_id && ARRAY['0'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:59:21:
--------------------------------

                    -- Українські водії почали тестування мобільного додатка Дія
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('додатка')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1104
                        AND posts.tag_id && ARRAY['0'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:59:21:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1388 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:59:21:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1388 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:59:21:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1388) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:59:21:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 834 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:59:21:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 834 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:59:21:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (834) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:59:21:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 656 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:59:21:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 656 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:59:21:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (656) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:59:21:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1319 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:59:21:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1319 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:59:21:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1319) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:59:21:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1005 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:59:21:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1005 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 20:59:21:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1005) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 20:59:21:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '50027cc66ea01f9c2732ba30158ccdd1', '5.255.250.61'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.18 21:16:06:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1577 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 21:16:06:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1577 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 21:16:06:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1577) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 21:16:06:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1577
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.18 21:16:06:
--------------------------------

                    -- Нові Apple iPhone: які смартфони компанія Apple планує представити вже у 2020 році
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('iPhone:')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1577
                        AND posts.tag_id && ARRAY['9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 21:16:06:
--------------------------------

                    -- Нові Apple iPhone: які смартфони компанія Apple планує представити вже у 2020 році
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('смартфони')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1577
                        AND posts.tag_id && ARRAY['9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 21:16:06:
--------------------------------

                    -- Нові Apple iPhone: які смартфони компанія Apple планує представити вже у 2020 році
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('компанія')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1577
                        AND posts.tag_id && ARRAY['9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 21:16:06:
--------------------------------

                    -- Нові Apple iPhone: які смартфони компанія Apple планує представити вже у 2020 році
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('планує')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1577
                        AND posts.tag_id && ARRAY['9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 21:16:06:
--------------------------------

                    -- Нові Apple iPhone: які смартфони компанія Apple планує представити вже у 2020 році
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('представити')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1577
                        AND posts.tag_id && ARRAY['9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 21:16:06:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1453 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 21:16:06:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1453 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 21:16:06:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1453) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 21:16:06:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 937 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 21:16:06:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 937 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 21:16:06:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (937) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 21:16:06:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 550 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 21:16:06:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 550 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 21:16:06:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (550) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 21:16:06:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '50027cc66ea01f9c2732ba30158ccdd1', '5.255.250.61'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.18 21:16:06:
--------------------------------
SELECT count( DISTINCT ua_hash ) as count FROM visit_counter WHERE date_trunc('day', ts) = date_trunc('day', now());
--------------------------------
2020.01.18 21:19:31:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 585 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 21:19:31:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 585 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 21:19:31:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (585) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 21:19:31:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 585
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.18 21:19:31:
--------------------------------

                    -- Cyberpunk 2077 вступає в фінальну стадію розробки
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Cyberpunk')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 585
                        AND posts.tag_id && ARRAY['3'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 21:19:31:
--------------------------------

                    -- Cyberpunk 2077 вступає в фінальну стадію розробки
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('вступає')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 585
                        AND posts.tag_id && ARRAY['3'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 21:19:31:
--------------------------------

                    -- Cyberpunk 2077 вступає в фінальну стадію розробки
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('фінальну')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 585
                        AND posts.tag_id && ARRAY['3'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 21:19:31:
--------------------------------

                    -- Cyberpunk 2077 вступає в фінальну стадію розробки
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('стадію')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 585
                        AND posts.tag_id && ARRAY['3'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 21:19:31:
--------------------------------

                    -- Cyberpunk 2077 вступає в фінальну стадію розробки
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('розробки')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 585
                        AND posts.tag_id && ARRAY['3'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 21:19:31:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 390 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 21:19:31:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 390 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 21:19:31:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (390) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 21:19:31:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 687 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 21:19:31:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 687 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 21:19:31:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (687) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 21:19:31:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1250 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 21:19:31:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1250 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 21:19:31:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1250) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 21:19:31:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 672 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 21:19:31:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 672 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 21:19:31:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (672) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 21:19:31:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '50027cc66ea01f9c2732ba30158ccdd1', '5.255.250.61'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.18 21:20:59:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	ARRAY['12'::int8] && posts.tag_id 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 21:20:59:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	ARRAY['12'::int8] && posts.tag_id 
-- ORDER
ORDER BY posts.created_time DESC, posts.fixed DESC, posts.posted ASC 
-- ORDER
-- OFFSET
OFFSET 0 LIMIT 10;
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 21:20:59:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1786,1773,1770,1721,1717,1688,1643,1640,1636,1634) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 21:20:59:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( 'bbc73cf92656b27bd1280a5dceee4a98', '66.249.65.148'::inet, 'Chrome' );
--------------------------------
2020.01.18 21:34:57:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1535 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 21:34:57:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1535 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 21:34:57:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1535) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 21:34:57:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1535
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.18 21:34:57:
--------------------------------

                    -- Компанія Acer поповнила лінійку ПК для творчої роботи ноутбуками-трансформерами та робочою станцією
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Компанія')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1535
                        AND posts.tag_id && ARRAY['3'::int8, '4'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 21:34:58:
--------------------------------

                    -- Компанія Acer поповнила лінійку ПК для творчої роботи ноутбуками-трансформерами та робочою станцією
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('поповнила')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1535
                        AND posts.tag_id && ARRAY['3'::int8, '4'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 21:34:58:
--------------------------------

                    -- Компанія Acer поповнила лінійку ПК для творчої роботи ноутбуками-трансформерами та робочою станцією
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('лінійку')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1535
                        AND posts.tag_id && ARRAY['3'::int8, '4'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 21:34:58:
--------------------------------

                    -- Компанія Acer поповнила лінійку ПК для творчої роботи ноутбуками-трансформерами та робочою станцією
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('творчої')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1535
                        AND posts.tag_id && ARRAY['3'::int8, '4'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 21:34:58:
--------------------------------

                    -- Компанія Acer поповнила лінійку ПК для творчої роботи ноутбуками-трансформерами та робочою станцією
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('роботи')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1535
                        AND posts.tag_id && ARRAY['3'::int8, '4'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 21:34:58:
--------------------------------

                    -- Компанія Acer поповнила лінійку ПК для творчої роботи ноутбуками-трансформерами та робочою станцією
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('ноутбуками-трансформерами')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1535
                        AND posts.tag_id && ARRAY['3'::int8, '4'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 21:34:58:
--------------------------------

                    -- Компанія Acer поповнила лінійку ПК для творчої роботи ноутбуками-трансформерами та робочою станцією
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('робочою')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1535
                        AND posts.tag_id && ARRAY['3'::int8, '4'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 21:34:58:
--------------------------------

                    -- Компанія Acer поповнила лінійку ПК для творчої роботи ноутбуками-трансформерами та робочою станцією
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('станцією')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1535
                        AND posts.tag_id && ARRAY['3'::int8, '4'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 21:34:58:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 231 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 21:34:58:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 231 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 21:34:58:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (231) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 21:34:58:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 369 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 21:34:58:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 369 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 21:34:58:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (369) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 21:34:58:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1369 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 21:34:58:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1369 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 21:34:58:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1369) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 21:34:58:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1532 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 21:34:58:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1532 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 21:34:58:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1532) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 21:34:58:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 188 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 21:34:58:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 188 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 21:34:58:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (188) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 21:34:58:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '50027cc66ea01f9c2732ba30158ccdd1', '5.255.250.61'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.18 21:35:25:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	ARRAY['3'::int8] && posts.tag_id 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 21:35:25:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	ARRAY['3'::int8] && posts.tag_id 
-- ORDER
ORDER BY posts.created_time DESC, posts.fixed DESC, posts.posted ASC 
-- ORDER
-- OFFSET
OFFSET 150 LIMIT 10;
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 21:35:25:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1408,1399,1397,1391,1390,1384,1381,1380,1379,1378) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 21:35:25:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '76031e313f4fa8707c9bd5f40c1bfbb6', '77.88.47.77'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.18 21:41:32:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 469 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 21:41:32:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 469 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 21:41:32:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (469) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 21:41:32:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 469
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.18 21:41:32:
--------------------------------

                    -- Фахівці дали поради по захисту комп’ютерів від вірусів і «троянів»
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Фахівці')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 469
                        AND posts.tag_id && ARRAY['5'::int8, '8'::int8, '9'::int8, '13'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 21:41:32:
--------------------------------

                    -- Фахівці дали поради по захисту комп’ютерів від вірусів і «троянів»
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('поради')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 469
                        AND posts.tag_id && ARRAY['5'::int8, '8'::int8, '9'::int8, '13'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 21:41:33:
--------------------------------

                    -- Фахівці дали поради по захисту комп’ютерів від вірусів і «троянів»
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('захисту')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 469
                        AND posts.tag_id && ARRAY['5'::int8, '8'::int8, '9'::int8, '13'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 21:41:33:
--------------------------------

                    -- Фахівці дали поради по захисту комп’ютерів від вірусів і «троянів»
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('комп’ютерів')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 469
                        AND posts.tag_id && ARRAY['5'::int8, '8'::int8, '9'::int8, '13'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 21:41:33:
--------------------------------

                    -- Фахівці дали поради по захисту комп’ютерів від вірусів і «троянів»
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('вірусів')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 469
                        AND posts.tag_id && ARRAY['5'::int8, '8'::int8, '9'::int8, '13'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 21:41:33:
--------------------------------

                    -- Фахівці дали поради по захисту комп’ютерів від вірусів і «троянів»
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('«троянів»')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 469
                        AND posts.tag_id && ARRAY['5'::int8, '8'::int8, '9'::int8, '13'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 21:41:33:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 969 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 21:41:33:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 969 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 21:41:33:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (969) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 21:41:33:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1683 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 21:41:33:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1683 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 21:41:33:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1683) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 21:41:33:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 45 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 21:41:33:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 45 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 21:41:33:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (45) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 21:41:33:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 337 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 21:41:33:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 337 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 21:41:33:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (337) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 21:41:33:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 434 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 21:41:33:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 434 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 21:41:33:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (434) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 21:41:33:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( 'bbc73cf92656b27bd1280a5dceee4a98', '66.249.65.148'::inet, 'Chrome' );
--------------------------------
2020.01.18 21:52:09:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( 'bbc73cf92656b27bd1280a5dceee4a98', '66.249.65.148'::inet, 'Chrome' );
--------------------------------
2020.01.18 21:55:13:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1713 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 21:55:13:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1713 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 21:55:13:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1713) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 21:55:13:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1713
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.18 21:55:13:
--------------------------------

                    -- Огляд Sigma Mobile X-treme PQ39 MAX – Захищений смартфон з акумулятором на 9000 mah
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Mobile')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1713
                        AND posts.tag_id && ARRAY['8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 21:55:13:
--------------------------------

                    -- Огляд Sigma Mobile X-treme PQ39 MAX – Захищений смартфон з акумулятором на 9000 mah
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('X-treme')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1713
                        AND posts.tag_id && ARRAY['8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 21:55:13:
--------------------------------

                    -- Огляд Sigma Mobile X-treme PQ39 MAX – Захищений смартфон з акумулятором на 9000 mah
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Захищений')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1713
                        AND posts.tag_id && ARRAY['8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 21:55:13:
--------------------------------

                    -- Огляд Sigma Mobile X-treme PQ39 MAX – Захищений смартфон з акумулятором на 9000 mah
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('смартфон')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1713
                        AND posts.tag_id && ARRAY['8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 21:55:14:
--------------------------------

                    -- Огляд Sigma Mobile X-treme PQ39 MAX – Захищений смартфон з акумулятором на 9000 mah
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('акумулятором')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1713
                        AND posts.tag_id && ARRAY['8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 21:55:14:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 751 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 21:55:14:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 751 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 21:55:14:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (751) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 21:55:14:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1657 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 21:55:14:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1657 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 21:55:14:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1657) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 21:55:14:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '50027cc66ea01f9c2732ba30158ccdd1', '5.255.250.61'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.18 21:55:23:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1569 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 21:55:23:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1569 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 21:55:23:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1569) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 21:55:23:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1569
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.18 21:55:23:
--------------------------------

                    -- Вчені надягнули мініатюрні 3D-окуляри на каракатиць, аби дізнатися, як вони бачать
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('надягнули')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1569
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 21:55:23:
--------------------------------

                    -- Вчені надягнули мініатюрні 3D-окуляри на каракатиць, аби дізнатися, як вони бачать
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('мініатюрні')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1569
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 21:55:23:
--------------------------------

                    -- Вчені надягнули мініатюрні 3D-окуляри на каракатиць, аби дізнатися, як вони бачать
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('3D-окуляри')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1569
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 21:55:23:
--------------------------------

                    -- Вчені надягнули мініатюрні 3D-окуляри на каракатиць, аби дізнатися, як вони бачать
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('каракатиць,')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1569
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 21:55:24:
--------------------------------

                    -- Вчені надягнули мініатюрні 3D-окуляри на каракатиць, аби дізнатися, як вони бачать
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('дізнатися,')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1569
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 21:55:24:
--------------------------------

                    -- Вчені надягнули мініатюрні 3D-окуляри на каракатиць, аби дізнатися, як вони бачать
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('бачать')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1569
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 21:55:24:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1675 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 21:55:24:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1675 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 21:55:24:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1675) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 21:55:24:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1785 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 21:55:24:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1785 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 21:55:24:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1785) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 21:55:24:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 193 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 21:55:24:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 193 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 21:55:24:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (193) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 21:55:24:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 933 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 21:55:24:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 933 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 21:55:24:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (933) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 21:55:24:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 972 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 21:55:24:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 972 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 21:55:24:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (972) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 21:55:24:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '50027cc66ea01f9c2732ba30158ccdd1', '5.255.250.61'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.18 21:55:38:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	ARRAY['7'::int8] && posts.tag_id 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 21:55:38:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	ARRAY['7'::int8] && posts.tag_id 
-- ORDER
ORDER BY posts.created_time DESC, posts.fixed DESC, posts.posted ASC 
-- ORDER
-- OFFSET
OFFSET 300 LIMIT 10;
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 21:55:38:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (902,897,896,888,884,874,872,871,870,869) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 21:55:38:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '50027cc66ea01f9c2732ba30158ccdd1', '5.255.250.61'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.18 22:14:10:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	ARRAY['7'::int8] && posts.tag_id 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 22:14:11:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	ARRAY['7'::int8] && posts.tag_id 
-- ORDER
ORDER BY posts.created_time DESC, posts.fixed DESC, posts.posted ASC 
-- ORDER
-- OFFSET
OFFSET 170 LIMIT 10;
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 22:14:11:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1301,1295,1289,1288,1285,1281,1279,1276,1271,1266) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 22:14:11:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '50027cc66ea01f9c2732ba30158ccdd1', '5.255.250.61'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.18 22:14:11:
--------------------------------
SELECT count( DISTINCT ua_hash ) as count FROM visit_counter WHERE date_trunc('day', ts) = date_trunc('day', now());
--------------------------------
2020.01.18 22:14:27:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	ARRAY['3'::int8] && posts.tag_id 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 22:14:27:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	ARRAY['3'::int8] && posts.tag_id 
-- ORDER
ORDER BY posts.created_time DESC, posts.fixed DESC, posts.posted ASC 
-- ORDER
-- OFFSET
OFFSET 440 LIMIT 10;
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 22:14:27:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (593,590,589,588,587,586,585,584,582,581) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 22:14:27:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '50027cc66ea01f9c2732ba30158ccdd1', '5.255.250.61'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.18 22:20:12:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1247 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 22:20:12:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1247 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 22:20:12:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1247) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 22:20:12:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1247
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.18 22:20:12:
--------------------------------

                    -- Xiaomi випустила оновлення для Mi Band 4 та Mi Fit
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Xiaomi')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1247
                        AND posts.tag_id && ARRAY['4'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 22:20:12:
--------------------------------

                    -- Xiaomi випустила оновлення для Mi Band 4 та Mi Fit
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('випустила')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1247
                        AND posts.tag_id && ARRAY['4'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 22:20:12:
--------------------------------

                    -- Xiaomi випустила оновлення для Mi Band 4 та Mi Fit
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('оновлення')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1247
                        AND posts.tag_id && ARRAY['4'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 22:20:12:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 750 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 22:20:12:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 750 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 22:20:12:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (750) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 22:20:12:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 274 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 22:20:12:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 274 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 22:20:12:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (274) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 22:20:12:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 904 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 22:20:12:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 904 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 22:20:12:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (904) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 22:20:12:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1604 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 22:20:12:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1604 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 22:20:12:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1604) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 22:20:12:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1145 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 22:20:12:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1145 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 22:20:12:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1145) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 22:20:12:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '2d2e8e6ab88742154eade31e44c21e75', '66.249.65.150'::inet, 'Chrome' );
--------------------------------
2020.01.18 23:10:24:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1639 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 23:10:24:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1639 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 23:10:24:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1639) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 23:10:24:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1639
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.18 23:10:24:
--------------------------------

                    -- Виробництво їжі з повітря, води і електрики запустять до 2022 року
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Виробництво')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1639
                        AND posts.tag_id && ARRAY['7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 23:10:24:
--------------------------------

                    -- Виробництво їжі з повітря, води і електрики запустять до 2022 року
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('повітря,')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1639
                        AND posts.tag_id && ARRAY['7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 23:10:24:
--------------------------------

                    -- Виробництво їжі з повітря, води і електрики запустять до 2022 року
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('електрики')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1639
                        AND posts.tag_id && ARRAY['7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 23:10:24:
--------------------------------

                    -- Виробництво їжі з повітря, води і електрики запустять до 2022 року
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('запустять')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1639
                        AND posts.tag_id && ARRAY['7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 23:10:24:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1166 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 23:10:24:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1166 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 23:10:24:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1166) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 23:10:24:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 304 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 23:10:24:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 304 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 23:10:24:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (304) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 23:10:24:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 888 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 23:10:24:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 888 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 23:10:24:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (888) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 23:10:24:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1165 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 23:10:24:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1165 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 23:10:24:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1165) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 23:10:24:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '50027cc66ea01f9c2732ba30158ccdd1', '5.255.250.61'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.18 23:10:25:
--------------------------------
SELECT count( DISTINCT ua_hash ) as count FROM visit_counter WHERE date_trunc('day', ts) = date_trunc('day', now());
--------------------------------
2020.01.18 23:16:07:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1012 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 23:16:07:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1012 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 23:16:07:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1012) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 23:16:07:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1012
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.18 23:16:07:
--------------------------------

                    -- На дні Тихого океану виявлено тисячі таємничих дір
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Тихого')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1012
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 23:16:07:
--------------------------------

                    -- На дні Тихого океану виявлено тисячі таємничих дір
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('океану')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1012
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 23:16:07:
--------------------------------

                    -- На дні Тихого океану виявлено тисячі таємничих дір
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('виявлено')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1012
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 23:16:07:
--------------------------------

                    -- На дні Тихого океану виявлено тисячі таємничих дір
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('тисячі')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1012
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 23:16:07:
--------------------------------

                    -- На дні Тихого океану виявлено тисячі таємничих дір
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('таємничих')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1012
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 23:16:07:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 249 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 23:16:07:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 249 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 23:16:07:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (249) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 23:16:07:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 764 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 23:16:07:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 764 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 23:16:07:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (764) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 23:16:07:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1693 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 23:16:07:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1693 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 23:16:07:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1693) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 23:16:07:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 893 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 23:16:07:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 893 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 23:16:07:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (893) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 23:16:07:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 601 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 23:16:07:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 601 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 23:16:07:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (601) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 23:16:07:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '50027cc66ea01f9c2732ba30158ccdd1', '5.255.250.61'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.18 23:30:53:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	ARRAY['7'::int8] && posts.tag_id 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 23:30:53:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	ARRAY['7'::int8] && posts.tag_id 
-- ORDER
ORDER BY posts.created_time DESC, posts.fixed DESC, posts.posted ASC 
-- ORDER
-- OFFSET
OFFSET 120 LIMIT 10;
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 23:30:53:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1466,1455,1452,1450,1449,1445,1442,1438,1437,1432) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 23:30:53:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '3b045a1128c6bcf252612ad50611945f', '5.255.250.21'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.18 23:33:08:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1209 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 23:33:08:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1209 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 23:33:08:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1209) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 23:33:08:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1209
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.18 23:33:08:
--------------------------------

                    -- Google Translate для Android та iOS отримав кращий офлайн переклад
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Google')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1209
                        AND posts.tag_id && ARRAY['4'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 23:33:08:
--------------------------------

                    -- Google Translate для Android та iOS отримав кращий офлайн переклад
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Translate')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1209
                        AND posts.tag_id && ARRAY['4'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 23:33:08:
--------------------------------

                    -- Google Translate для Android та iOS отримав кращий офлайн переклад
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Android')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1209
                        AND posts.tag_id && ARRAY['4'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 23:33:08:
--------------------------------

                    -- Google Translate для Android та iOS отримав кращий офлайн переклад
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('отримав')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1209
                        AND posts.tag_id && ARRAY['4'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 23:33:08:
--------------------------------

                    -- Google Translate для Android та iOS отримав кращий офлайн переклад
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('кращий')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1209
                        AND posts.tag_id && ARRAY['4'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 23:33:08:
--------------------------------

                    -- Google Translate для Android та iOS отримав кращий офлайн переклад
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('офлайн')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1209
                        AND posts.tag_id && ARRAY['4'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 23:33:08:
--------------------------------

                    -- Google Translate для Android та iOS отримав кращий офлайн переклад
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('переклад')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1209
                        AND posts.tag_id && ARRAY['4'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 23:33:08:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 170 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 23:33:08:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 170 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 23:33:08:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (170) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 23:33:08:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1549 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 23:33:08:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1549 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 23:33:08:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1549) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 23:33:08:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1700 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 23:33:08:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1700 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 23:33:08:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1700) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 23:33:08:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 737 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 23:33:08:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 737 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 23:33:08:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (737) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 23:33:08:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '1a0d36373ed7a1d578ee56dab756da62', '66.249.65.146'::inet, 'Chrome' );
--------------------------------
2020.01.18 23:48:39:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '2ff57d952d9ba116660a9a3a4e7d459a', '192.0.91.201'::inet, '[Bot] Other' );
--------------------------------
2020.01.18 23:50:56:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1647 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 23:50:56:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1647 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 23:50:56:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1647) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 23:50:56:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1647
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.18 23:50:56:
--------------------------------

                    -- Революційний крок в авіації: Rolls-Royce представила легкомоторний електричний літак
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Революційний')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1647
                        AND posts.tag_id && ARRAY['0'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 23:50:56:
--------------------------------

                    -- Революційний крок в авіації: Rolls-Royce представила легкомоторний електричний літак
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('авіації:')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1647
                        AND posts.tag_id && ARRAY['0'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 23:50:56:
--------------------------------

                    -- Революційний крок в авіації: Rolls-Royce представила легкомоторний електричний літак
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Rolls-Royce')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1647
                        AND posts.tag_id && ARRAY['0'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 23:50:56:
--------------------------------

                    -- Революційний крок в авіації: Rolls-Royce представила легкомоторний електричний літак
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('представила')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1647
                        AND posts.tag_id && ARRAY['0'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 23:50:56:
--------------------------------

                    -- Революційний крок в авіації: Rolls-Royce представила легкомоторний електричний літак
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('легкомоторний')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1647
                        AND posts.tag_id && ARRAY['0'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 23:50:56:
--------------------------------

                    -- Революційний крок в авіації: Rolls-Royce представила легкомоторний електричний літак
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('електричний')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1647
                        AND posts.tag_id && ARRAY['0'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.18 23:50:56:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 986 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 23:50:56:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 986 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 23:50:56:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (986) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 23:50:56:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1352 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 23:50:56:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1352 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 23:50:56:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1352) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 23:50:56:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1052 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 23:50:56:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1052 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 23:50:56:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1052) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 23:50:56:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1463 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 23:50:56:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1463 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.18 23:50:56:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1463) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.18 23:50:56:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '50027cc66ea01f9c2732ba30158ccdd1', '5.255.250.61'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.19 00:13:26:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1731
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.19 00:13:26:
--------------------------------

                    -- Вчені з&#039;ясували, звідки на Землі з&#039;явився фосфор
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('з&#039;ясували,')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1731
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.19 00:13:26:
--------------------------------

                    -- Вчені з&#039;ясували, звідки на Землі з&#039;явився фосфор
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('звідки')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1731
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.19 00:13:26:
--------------------------------

                    -- Вчені з&#039;ясували, звідки на Землі з&#039;явився фосфор
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('з&#039;явився')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1731
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.19 00:13:26:
--------------------------------

                    -- Вчені з&#039;ясували, звідки на Землі з&#039;явився фосфор
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('фосфор')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1731
                        AND posts.tag_id && ARRAY['3'::int8, '7'::int8, '8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.19 00:13:26:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1270 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.19 00:13:26:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1270 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.19 00:13:26:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1270) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.19 00:13:26:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '50027cc66ea01f9c2732ba30158ccdd1', '5.255.250.61'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.19 00:13:27:
--------------------------------
SELECT count( DISTINCT ua_hash ) as count FROM visit_counter WHERE date_trunc('day', ts) = date_trunc('day', now());
--------------------------------
2020.01.19 00:13:29:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1646 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.19 00:13:29:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1646 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.19 00:13:29:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1646) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.19 00:13:29:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1646
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.19 00:13:29:
--------------------------------

                    -- «Живі» фотографії Samsung Galaxy S20+ опинилися в мережі
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('«Живі»')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1646
                        AND posts.tag_id && ARRAY['9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.19 00:13:30:
--------------------------------

                    -- «Живі» фотографії Samsung Galaxy S20+ опинилися в мережі
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('фотографії')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1646
                        AND posts.tag_id && ARRAY['9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.19 00:13:30:
--------------------------------

                    -- «Живі» фотографії Samsung Galaxy S20+ опинилися в мережі
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Samsung')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1646
                        AND posts.tag_id && ARRAY['9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.19 00:13:30:
--------------------------------

                    -- «Живі» фотографії Samsung Galaxy S20+ опинилися в мережі
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Galaxy')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1646
                        AND posts.tag_id && ARRAY['9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.19 00:13:30:
--------------------------------

                    -- «Живі» фотографії Samsung Galaxy S20+ опинилися в мережі
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('опинилися')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1646
                        AND posts.tag_id && ARRAY['9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.19 00:13:30:
--------------------------------

                    -- «Живі» фотографії Samsung Galaxy S20+ опинилися в мережі
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('мережі')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1646
                        AND posts.tag_id && ARRAY['9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.19 00:13:30:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1479 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.19 00:13:30:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1479 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.19 00:13:30:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1479) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.19 00:13:30:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1617 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.19 00:13:30:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1617 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.19 00:13:30:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1617) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.19 00:13:30:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 176 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.19 00:13:30:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 176 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.19 00:13:30:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (176) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.19 00:13:30:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1514 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.19 00:13:30:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1514 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.19 00:13:30:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1514) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.19 00:13:30:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1023 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.19 00:13:30:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1023 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.19 00:13:30:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1023) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.19 00:13:30:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '50027cc66ea01f9c2732ba30158ccdd1', '5.255.250.61'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.19 00:14:00:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.19 00:14:00:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 
-- ORDER
ORDER BY posts.created_time DESC, posts.fixed DESC, posts.posted ASC 
-- ORDER
-- OFFSET
OFFSET 80 LIMIT 10;
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.19 00:14:00:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1708,1707,1706,1705,1704,1703,1702,1701,1700,1699) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.19 00:14:00:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '50027cc66ea01f9c2732ba30158ccdd1', '5.255.250.61'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.19 00:54:04:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	ARRAY['5'::int8] && posts.tag_id 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.19 00:54:04:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	ARRAY['5'::int8] && posts.tag_id 
-- ORDER
ORDER BY posts.created_time DESC, posts.fixed DESC, posts.posted ASC 
-- ORDER
-- OFFSET
OFFSET 50 LIMIT 10;
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.19 00:54:04:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (81,80,79,78,77,75,64,63,62,61) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.19 00:54:04:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '50027cc66ea01f9c2732ba30158ccdd1', '5.255.250.61'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.19 00:54:26:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1529 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.19 00:54:26:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1529 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.19 00:54:26:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1529) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.19 00:54:26:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1529
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.19 00:54:26:
--------------------------------

                    -- В Австралії створили літій-іонний акумулятор, якому нема рівних
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Австралії')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1529
                        AND posts.tag_id && ARRAY['8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.19 00:54:26:
--------------------------------

                    -- В Австралії створили літій-іонний акумулятор, якому нема рівних
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('створили')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1529
                        AND posts.tag_id && ARRAY['8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.19 00:54:26:
--------------------------------

                    -- В Австралії створили літій-іонний акумулятор, якому нема рівних
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('літій-іонний')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1529
                        AND posts.tag_id && ARRAY['8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.19 00:54:26:
--------------------------------

                    -- В Австралії створили літій-іонний акумулятор, якому нема рівних
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('акумулятор,')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1529
                        AND posts.tag_id && ARRAY['8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.19 00:54:26:
--------------------------------

                    -- В Австралії створили літій-іонний акумулятор, якому нема рівних
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('рівних')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1529
                        AND posts.tag_id && ARRAY['8'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.19 00:54:26:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1750 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.19 00:54:26:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1750 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.19 00:54:26:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1750) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.19 00:54:26:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1633 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.19 00:54:26:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1633 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.19 00:54:26:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1633) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.19 00:54:26:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1716 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.19 00:54:26:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1716 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.19 00:54:26:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1716) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.19 00:54:26:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 620 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.19 00:54:26:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 620 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.19 00:54:26:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (620) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.19 00:54:26:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 396 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.19 00:54:26:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 396 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.19 00:54:26:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (396) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.19 00:54:26:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '50027cc66ea01f9c2732ba30158ccdd1', '5.255.250.61'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.19 00:58:33:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1412 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.19 00:58:33:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1412 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.19 00:58:33:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1412) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.19 00:58:33:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1412
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.19 00:58:33:
--------------------------------

                    -- В Ізраїлі виявили гробницю, якій понад 2800 років
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Ізраїлі')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1412
                        AND posts.tag_id && ARRAY['7'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.19 00:58:33:
--------------------------------

                    -- В Ізраїлі виявили гробницю, якій понад 2800 років
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('виявили')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1412
                        AND posts.tag_id && ARRAY['7'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.19 00:58:34:
--------------------------------

                    -- В Ізраїлі виявили гробницю, якій понад 2800 років
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('гробницю,')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1412
                        AND posts.tag_id && ARRAY['7'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.19 00:58:34:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1313 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.19 00:58:34:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1313 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.19 00:58:34:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1313) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.19 00:58:34:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 100 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.19 00:58:34:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 100 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.19 00:58:34:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (100) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.19 00:58:34:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1424 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.19 00:58:34:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1424 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.19 00:58:34:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1424) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.19 00:58:34:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1540 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.19 00:58:34:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1540 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.19 00:58:34:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1540) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.19 00:58:34:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1112 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.19 00:58:34:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1112 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.19 00:58:34:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1112) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.19 00:58:34:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '1a0d36373ed7a1d578ee56dab756da62', '66.249.65.146'::inet, 'Chrome' );
--------------------------------
2020.01.19 01:14:04:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1575 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.19 01:14:04:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1575 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.19 01:14:04:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1575) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.19 01:14:04:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1575
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.19 01:14:04:
--------------------------------

                    -- Чотири причини придбати смартфон Huawei Y5
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Чотири')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1575
                        AND posts.tag_id && ARRAY['8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.19 01:14:04:
--------------------------------

                    -- Чотири причини придбати смартфон Huawei Y5
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('причини')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1575
                        AND posts.tag_id && ARRAY['8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.19 01:14:05:
--------------------------------

                    -- Чотири причини придбати смартфон Huawei Y5
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('придбати')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1575
                        AND posts.tag_id && ARRAY['8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.19 01:14:05:
--------------------------------

                    -- Чотири причини придбати смартфон Huawei Y5
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('смартфон')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1575
                        AND posts.tag_id && ARRAY['8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.19 01:14:05:
--------------------------------

                    -- Чотири причини придбати смартфон Huawei Y5
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Huawei')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1575
                        AND posts.tag_id && ARRAY['8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.19 01:14:05:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 644 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.19 01:14:05:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 644 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.19 01:14:05:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (644) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.19 01:14:05:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '50027cc66ea01f9c2732ba30158ccdd1', '5.255.250.61'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.19 01:14:05:
--------------------------------
SELECT count( DISTINCT ua_hash ) as count FROM visit_counter WHERE date_trunc('day', ts) = date_trunc('day', now());
--------------------------------
2020.01.19 01:34:06:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1705 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.19 01:34:06:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1705 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.19 01:34:06:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1705) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.19 01:34:06:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1705
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.19 01:34:06:
--------------------------------

                    -- Карткова Legends of Runeterra від творців LoL виходить у відкрите тестування
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Карткова')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1705
                        AND posts.tag_id && ARRAY['3'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.19 01:34:06:
--------------------------------

                    -- Карткова Legends of Runeterra від творців LoL виходить у відкрите тестування
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Legends')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1705
                        AND posts.tag_id && ARRAY['3'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.19 01:34:06:
--------------------------------

                    -- Карткова Legends of Runeterra від творців LoL виходить у відкрите тестування
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Runeterra')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1705
                        AND posts.tag_id && ARRAY['3'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.19 01:34:06:
--------------------------------

                    -- Карткова Legends of Runeterra від творців LoL виходить у відкрите тестування
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('творців')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1705
                        AND posts.tag_id && ARRAY['3'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.19 01:34:06:
--------------------------------

                    -- Карткова Legends of Runeterra від творців LoL виходить у відкрите тестування
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('виходить')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1705
                        AND posts.tag_id && ARRAY['3'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.19 01:34:06:
--------------------------------

                    -- Карткова Legends of Runeterra від творців LoL виходить у відкрите тестування
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('відкрите')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1705
                        AND posts.tag_id && ARRAY['3'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.19 01:34:06:
--------------------------------

                    -- Карткова Legends of Runeterra від творців LoL виходить у відкрите тестування
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('тестування')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1705
                        AND posts.tag_id && ARRAY['3'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.19 01:34:06:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 106 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.19 01:34:06:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 106 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.19 01:34:06:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (106) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.19 01:34:06:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 16 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.19 01:34:06:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 16 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.19 01:34:06:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (16) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.19 01:34:06:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 925 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.19 01:34:06:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 925 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.19 01:34:06:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (925) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.19 01:34:06:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 103 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.19 01:34:06:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 103 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.19 01:34:06:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (103) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.19 01:34:06:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '50027cc66ea01f9c2732ba30158ccdd1', '5.255.250.61'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.19 01:34:54:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1413 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.19 01:34:54:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1413 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.19 01:34:54:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1413) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.19 01:34:54:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1413
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.19 01:34:54:
--------------------------------

                    -- Amazon та Ring звинуватили у порушенні конфіденційності
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Amazon')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1413
                        AND posts.tag_id && ARRAY['5'::int8, '9'::int8, '11'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.19 01:34:54:
--------------------------------

                    -- Amazon та Ring звинуватили у порушенні конфіденційності
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('звинуватили')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1413
                        AND posts.tag_id && ARRAY['5'::int8, '9'::int8, '11'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.19 01:34:54:
--------------------------------

                    -- Amazon та Ring звинуватили у порушенні конфіденційності
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('порушенні')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1413
                        AND posts.tag_id && ARRAY['5'::int8, '9'::int8, '11'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.19 01:34:54:
--------------------------------

                    -- Amazon та Ring звинуватили у порушенні конфіденційності
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('конфіденційності')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1413
                        AND posts.tag_id && ARRAY['5'::int8, '9'::int8, '11'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.19 01:34:54:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 861 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.19 01:34:54:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 861 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.19 01:34:54:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (861) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.19 01:34:54:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 77 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.19 01:34:54:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 77 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.19 01:34:54:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (77) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.19 01:34:54:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 860 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.19 01:34:54:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 860 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.19 01:34:54:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (860) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.19 01:34:54:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1175 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.19 01:34:54:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1175 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.19 01:34:54:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1175) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.19 01:34:54:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '50027cc66ea01f9c2732ba30158ccdd1', '5.255.250.61'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.19 01:56:25:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 811 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.19 01:56:25:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 811 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.19 01:56:25:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (811) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.19 01:56:25:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 811
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.19 01:56:25:
--------------------------------

                    -- Facebook запустив функцію експорту файлів у Google Photo
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Facebook')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 811
                        AND posts.tag_id && ARRAY['4'::int8, '9'::int8, '14'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.19 01:56:25:
--------------------------------

                    -- Facebook запустив функцію експорту файлів у Google Photo
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('запустив')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 811
                        AND posts.tag_id && ARRAY['4'::int8, '9'::int8, '14'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.19 01:56:25:
--------------------------------

                    -- Facebook запустив функцію експорту файлів у Google Photo
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('функцію')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 811
                        AND posts.tag_id && ARRAY['4'::int8, '9'::int8, '14'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.19 01:56:25:
--------------------------------

                    -- Facebook запустив функцію експорту файлів у Google Photo
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('експорту')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 811
                        AND posts.tag_id && ARRAY['4'::int8, '9'::int8, '14'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.19 01:56:25:
--------------------------------

                    -- Facebook запустив функцію експорту файлів у Google Photo
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('файлів')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 811
                        AND posts.tag_id && ARRAY['4'::int8, '9'::int8, '14'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.19 01:56:25:
--------------------------------

                    -- Facebook запустив функцію експорту файлів у Google Photo
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('Google')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 811
                        AND posts.tag_id && ARRAY['4'::int8, '9'::int8, '14'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.19 01:56:25:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 230 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.19 01:56:25:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 230 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.19 01:56:25:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (230) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.19 01:56:25:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 997 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.19 01:56:25:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 997 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.19 01:56:25:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (997) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.19 01:56:25:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '50027cc66ea01f9c2732ba30158ccdd1', '5.255.250.61'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.19 01:56:57:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts


WHERE 
	posts.id = 1220 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.19 01:56:57:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id = 1220 
-- ORDER
-- ORDER
-- OFFSET
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.19 01:56:57:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1220) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.19 01:56:57:
--------------------------------

            SELECT
                posts.id,
                posts.title,
                posts.created_time,
                array_to_string(posts.tag_id,',', '0') as agg_tags
            FROM
                posts
            WHERE
                posts.id = 1220
            GROUP by posts.id;-- %QUERY_CACHABLE
--------------------------------
2020.01.19 01:56:57:
--------------------------------

                    -- Apple iPhone 2020 отримає покращену стабілізацію зображення
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('iPhone')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1220
                        AND posts.tag_id && ARRAY['8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.19 01:56:57:
--------------------------------

                    -- Apple iPhone 2020 отримає покращену стабілізацію зображення
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('отримає')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1220
                        AND posts.tag_id && ARRAY['8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.19 01:56:57:
--------------------------------

                    -- Apple iPhone 2020 отримає покращену стабілізацію зображення
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('покращену')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1220
                        AND posts.tag_id && ARRAY['8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.19 01:56:57:
--------------------------------

                    -- Apple iPhone 2020 отримає покращену стабілізацію зображення
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('стабілізацію')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1220
                        AND posts.tag_id && ARRAY['8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.19 01:56:57:
--------------------------------

                    -- Apple iPhone 2020 отримає покращену стабілізацію зображення
                    SELECT
                        posts.id,
                        rank
                    FROM
                        posts,
                        ts_rank(posts.svector,websearch_to_tsquery('зображення')) as rank
                    WHERE
                        rank > 0
                        AND posts.id != 1220
                        AND posts.tag_id && ARRAY['8'::int8, '9'::int8]
                    ORDER by rank DESC
                    OFFSET 0 LIMIT 10;
                -- %QUERY_CACHABLE
--------------------------------
2020.01.19 01:56:57:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '50027cc66ea01f9c2732ba30158ccdd1', '5.255.250.61'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.19 01:57:00:
--------------------------------
SELECT 
 count( posts.id ) as count 
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	ARRAY['7'::int8] && posts.tag_id 


-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.19 01:57:00:
--------------------------------
SELECT 
-- SELECT 
	posts.id as "post.id", 
	posts.title as "post.title", 
	posts.alt_title as "post.alt_title", 
	posts.descr as "post.descr", 
	posts.short_post as "post.short_post", 
	posts.author_id as "post.author_id", 
	posts.created_time as "post.created_time", 
	posts.keywords as "post.keywords", 
	posts.posted as "post.posted", 
	posts.fixed as "post.fixed", 
	posts.static as "post.static", 
	posts.full_post as "post.full_post", 
	posts.repost_tg as "post.repost_tg", 
	categ.id as "categ.id", 
	categ.altname as "categ.altname", 
	categ.name as "categ.name", 
	usr.login as "usr.login", 
	usr.email as "usr.email"
-- SELECT
FROM 
	posts
	LEFT JOIN categories as categ ON ( categ.id = posts.category ) -- JOIN
	LEFT JOIN users as usr ON ( usr.id = posts.author_id ) -- JOIN
WHERE 
	posts.id > 0 AND
	categ.id > 0 AND
	posts.created_time <= ( NOW() + interval '1 year' ) AND
	posts.posted = 1 AND
	ARRAY['7'::int8] && posts.tag_id 
-- ORDER
ORDER BY posts.created_time DESC, posts.fixed DESC, posts.posted ASC 
-- ORDER
-- OFFSET
OFFSET 230 LIMIT 10;
-- OFFSET
-- %QUERY_CACHABLE
-- USER_ID: 0


--------------------------------
2020.01.19 01:57:00:
--------------------------------
SELECT tg.*, ptags.post_id FROM tags as tg LEFT JOIN posts_tags as ptags ON (tg.id = ptags.tag_id) WHERE tg.id > 0 AND ptags.post_id IN (1124,1115,1114,1113,1112,1110,1106,1105,1103,1101) ORDER by tg.name; -- %QUERY_CACHABLE
--------------------------------
2020.01.19 01:57:00:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '50027cc66ea01f9c2732ba30158ccdd1', '5.255.250.61'::inet, '[Bot] Yandex' );
--------------------------------
2020.01.19 02:07:34:
--------------------------------
INSERT INTO visit_counter ( ua_hash, ip, browser ) VALUES ( '2d2e8e6ab88742154eade31e44c21e75', '66.249.65.150'::inet, 'Chrome' );
--------------------------------
2020.01.19 02:07:34:
--------------------------------
SELECT count( DISTINCT ua_hash ) as count FROM visit_counter WHERE date_trunc('day', ts) = date_trunc('day', now());
--------------------------------
